<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:ni="urn:ni">
  <assembly>
    <name>NationalInstruments.Common</name>
  </assembly>
  <members>
    <member name="T:NationalInstruments.Restricted.IConvertibleType" />
    <member name="M:NationalInstruments.Restricted.IConvertibleType.CanConvertTo(System.Type)" />
    <member name="M:NationalInstruments.Restricted.IConvertibleType.ConvertTo(System.Type)" />
    <member name="T:NationalInstruments.Restricted.IAnalogWaveformService" />
    <member name="M:NationalInstruments.Restricted.IAnalogWaveformService.LoadData(System.Array,System.Type)" />
    <member name="M:NationalInstruments.Restricted.IAnalogWaveformService.LoadData(System.Array,System.Type,System.Int32,System.Int32)" />
    <member name="T:NationalInstruments.Restricted.EvalReleaseLicense" />
    <member name="T:NationalInstruments.Restricted.LicenseBase" />
    <member name="M:NationalInstruments.Restricted.LicenseBase.#ctor(System.String,System.String)" />
    <member name="M:NationalInstruments.Restricted.LicenseBase.LoadRunTimeLicense" />
    <member name="M:NationalInstruments.Restricted.LicenseBase.IsValidLicenseFile" />
    <member name="M:NationalInstruments.Restricted.LicenseBase.IsValidLicenseFile(System.Boolean)" />
    <member name="M:NationalInstruments.Restricted.LicenseBase.GetUnencryptedLicenseContents" />
    <member name="M:NationalInstruments.Restricted.LicenseBase.DesignTimeCheck" />
    <member name="M:NationalInstruments.Restricted.LicenseBase.RunTimeCheck(System.ComponentModel.LicenseContext,System.Type,System.Object)" />
    <member name="M:NationalInstruments.Restricted.LicenseBase.Dispose" />
    <member name="M:NationalInstruments.Restricted.LicenseBase.CheckForCorrectFileLicense(NationalInstruments.Internal.FileLicense)" />
    <member name="M:NationalInstruments.Restricted.LicenseBase.ComponentRunTimeCheck(System.Type,System.Object,System.String)" />
    <member name="M:NationalInstruments.Restricted.LicenseBase.ShowUnLicensedBehavior(System.Type,System.Object)" />
    <member name="M:NationalInstruments.Restricted.LicenseBase.IsCallingAssembly(System.Type,System.Type,System.Type)" />
    <member name="M:NationalInstruments.Restricted.LicenseBase.IsCallingAssemblyUsingTypeCompare(System.Type,System.Type,System.Type)" />
    <member name="M:NationalInstruments.Restricted.LicenseBase.IsCallingAssemblyUsingAssemblyCompare(System.Type,System.Type,System.Type)" />
    <member name="M:NationalInstruments.Restricted.LicenseBase.RemoveVersion(System.String)" />
    <member name="M:NationalInstruments.Restricted.LicenseBase.GetLicenseFromHashTable(System.Type,System.Collections.Hashtable)" />
    <member name="P:NationalInstruments.Restricted.LicenseBase.LicenseKey" />
    <member name="P:NationalInstruments.Restricted.LicenseBase.MajorMinorAssemblyVersion" />
    <member name="P:NationalInstruments.Restricted.LicenseBase.FileName" />
    <member name="P:NationalInstruments.Restricted.LicenseBase.FileExists" />
    <member name="P:NationalInstruments.Restricted.LicenseBase.DecryptedFileLicenseString" />
    <member name="P:NationalInstruments.Restricted.LicenseBase.LicenseType" />
    <member name="M:NationalInstruments.Restricted.EvalReleaseLicense.#ctor(System.String[],System.String[],System.String,System.String)" />
    <member name="M:NationalInstruments.Restricted.EvalReleaseLicense.CheckForCorrectFileLicense(NationalInstruments.Internal.FileLicense)" />
    <member name="M:NationalInstruments.Restricted.EvalReleaseLicense.ComponentRunTimeCheck(System.Type,System.Object,System.String)" />
    <member name="M:NationalInstruments.Restricted.EvalReleaseLicense.ShowEvalBehavior(System.Type,System.Object,System.String)" />
    <member name="P:NationalInstruments.Restricted.EvalReleaseLicense.LicenseType" />
    <member name="T:NationalInstruments.Restricted.ExceptionBuilderBase" />
    <member name="F:NationalInstruments.Restricted.ExceptionBuilderBase.StackFramesToSkip" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.Trace(System.Exception)" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.LicenseException(System.Type,System.Object,System.String)" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.ArgumentNull(System.String)" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.ArgumentNull(System.String,System.String)" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.ArgumentOutOfRange(System.String,System.String)" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.ArgumentOutOfRange(System.String)" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.ArgumentOutOfRangeNaNOrInfinity(System.String)" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.ArgumentOutOfRangeInfinity(System.String)" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.ArgumentOutOfRangeNaN(System.String)" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.EmptyString(System.String)" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.InvalidEnumArgument(System.String,System.Int32,System.Type)" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.InvalidArgument(System.String,System.String,System.Exception)" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.InvalidArgument(System.String,System.String)" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.InvalidArgument(System.String)" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.IndexOutOfRange(System.String)" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.NotFiniteNumber(System.String,System.Double)" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.ObjectDisposed(System.String)" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.ObjectDisposed(System.Object)" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.NotSupported(System.String)" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.NotSupported" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.InvalidOperation(System.String,System.Exception)" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.InvalidOperation(System.String)" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.InvalidOperation" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.TypedCollectionDoesNotSupportType(System.Type,System.Object)" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.Format" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.Format(System.String)" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.Format(System.String,System.Exception)" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.Serialization" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.Serialization(System.String)" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.NotImplemented" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.NotImplemented(System.String)" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.DllNotFound(System.String)" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.EntryPointNotFound(System.String)" />
    <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.InvalidCast(System.String,System.Type,System.Type)" />
    <member name="T:NationalInstruments.DigitalStateCollection">
      <summary>
            Represents a strongly typed collection of DigitalState values.
            </summary>
    </member>
    <member name="M:NationalInstruments.DigitalStateCollection.CopyTo(NationalInstruments.DigitalState[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
            
            - or -
            index (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalStateCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
    <member name="M:NationalInstruments.DigitalStateCollection.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="P:NationalInstruments.DigitalStateCollection.Item(System.Int32)">
      <summary>
            Gets or sets the DigitalState at the specified index. 
            </summary>
      <param name="stateIndex">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">index (parameter) is an invalid DigitalState value.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            
            -or-
            

index (parameter) is greater than or equal to Count.
            


            -or-
            index (parameter) is greater than or equal to Count.
            </exception>
    </member>
    <member name="P:NationalInstruments.DigitalStateCollection.Count">
      <summary>
            Gets the number of states in the DigitalStateCollection.
            </summary>
    </member>
    <member name="P:NationalInstruments.DigitalStateCollection.System#Collections#ICollection#IsSynchronized" />
    <member name="P:NationalInstruments.DigitalStateCollection.System#Collections#ICollection#SyncRoot" />
    <member name="T:NationalInstruments.ComplexDouble">
      <summary>
            Represents a complex number of type Double that is composed of a real part and an imaginary part of type.
            </summary>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the ComplexDouble class with the specified real and imaginary values.
            </summary>
      <param name="real">
            The real part of the complex number.
            </param>
      <param name="imaginary">
            The imaginary part of the complex number.
            </param>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.FromDouble(System.Double)">
      <summary>
            Creates a ComplexDouble from a double real value.
            </summary>
      <param name="real">
            The real part of the complex number.
            </param>
      <returns>
            A ComplexDouble with the real part specified by real (parameter)
            and a 0 imaginary part.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.FromPolar(System.Double,System.Double)">
      <summary>
            Returns a ComplexDouble that represents a complex
            value with the specified magnitude and phase.
            </summary>
      <param name="magnitude">
            The magnitude of the complex quantity.
            </param>
      <param name="phase">
            The phase, in radians, of the complex quantity.
            </param>
      <returns>
            A ComplexDouble that represents a complex value
            with a magnitude of magnitude (parameter) and a phase of 
            phase (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.Plus">
      <summary>
            Returns this instance of the ComplexDouble (unary plus).
            </summary>
      <returns>
            This instance of the ComplexDouble.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.op_UnaryPlus(NationalInstruments.ComplexDouble)">
      <summary>
            Returns the specified instance of the ComplexDouble (unary plus).
            </summary>
      <param name="c">
            A ComplexDouble.
            </param>
      <returns>
            The specified instance of c (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.Negate">
      <summary>
            Returns a ComplexDouble with a value that is 
            the negated value of this object (unary minus).
            </summary>
      <returns>
            A ComplexDouble with a value that is the negated value 
            of this object.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.op_UnaryNegation(NationalInstruments.ComplexDouble)">
      <summary>
            Returns a ComplexDouble with a value that is the negative of the specified 
            object (unary minus).
            </summary>
      <param name="c">
            A ComplexDouble.
            </param>
      <returns>
            A ComplexDouble with a value that is the negative of c (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.Add(NationalInstruments.ComplexDouble)">
      <summary>
            Adds the value of the specified ComplexDouble to this object and returns a 
            new ComplexDouble that represents the sum.
            </summary>
      <param name="c">
            The ComplexDouble to add to this object.
            </param>
      <returns>
            A ComplexDouble that represents the value of this 
            object plus the value of c (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.op_Addition(NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)">
      <summary>
            Adds the values of two ComplexDouble objects.
            </summary>
      <param name="c1">
            A ComplexDouble.
            </param>
      <param name="c2">
            A ComplexDouble.
            </param>
      <returns>
            A ComplexDouble with a value that is the sum of 
            c1 (parameter) and c2 (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.Subtract(NationalInstruments.ComplexDouble)">
      <summary>
            Subtracts the value of a ComplexDouble from this object and 
            returns a new ComplexDouble that represents the difference.
            </summary>
      <param name="c">
            The ComplexDouble to subtract from this object.
            </param>
      <returns>
            A ComplexDouble that represents the value of this
            object minus the value of c (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.op_Subtraction(NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)">
      <summary>
            Subtracts the value of one ComplexDouble from the value of another ComplexDouble.
            </summary>
      <param name="c1">
            A ComplexDouble.
            </param>
      <param name="c2">
            A ComplexDouble.
            </param>
      <returns>
            A ComplexDouble with a value that is the result of 
            c1 (parameter) minus c2 (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.Multiply(NationalInstruments.ComplexDouble)">
      <summary>
            Multiplies a ComplexDouble with this object and 
            returns a new ComplexDouble that represents the product.
            </summary>
      <param name="c">
            The ComplexDouble to multiply with this object.
            </param>
      <returns>
            A ComplexDouble that represents the value of this
            object times the value of c (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.op_Multiply(NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)">
      <summary>
            Multiplies the values of two ComplexDouble objects.
            </summary>
      <param name="c1">
            A ComplexDouble.
            </param>
      <param name="c2">
            A ComplexDouble.
            </param>
      <returns>
            A ComplexDouble with a value that is the product of 
            c1 (parameter) and c2 (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.Divide(NationalInstruments.ComplexDouble)">
      <summary>
            Divides this object by a ComplexDouble and returns
            a new ComplexDouble that represents the result.
            </summary>
      <param name="c">
            The ComplexDouble by which to divide this object.
            </param>
      <returns>
            A ComplexDouble that represents the value of this
            object divided by the value of c (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.op_Division(NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)">
      <summary>
            Divides the value of a ComplexDouble by the value of another ComplexDouble.
            </summary>
      <param name="c1">
            A ComplexDouble.
            </param>
      <param name="c2">
            A ComplexDouble.
            </param>
      <returns>
            A ComplexDouble with a value that equal to is 
            c1 (parameter) divided by c2 (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.op_Explicit(System.Double)~NationalInstruments.ComplexDouble">
      <summary>
            Creates a ComplexDouble from a double real value.
            </summary>
      <param name="real">
            The real part of the complex number.
            </param>
      <returns>
            A ComplexDouble with the real part specified by real (parameter)
            and a 0 imaginary part.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.GetHashCode">
      <summary>
            Returns a hash code for this object.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.op_Equality(NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)">
      <summary>
            Returns if two ComplexDouble objects are 
            equal.
            </summary>
      <param name="c1">
            A ComplexDouble.
            </param>
      <param name="c2">
            A ComplexDouble.
            </param>
      <returns>true if the values of c1 (parameter) and c2 (parameter)
            are equal.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.op_Inequality(NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)">
      <summary>
            Returns if two ComplexDouble objects are 
            not equal.
            </summary>
      <param name="c1">
            A ComplexDouble.
            </param>
      <param name="c2">
            A ComplexDouble.
            </param>
      <returns>true if the values of c1 (parameter) and c2 (parameter)
            are not equal.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.Equals(NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)">
      <summary>
            Returns a value that indicates if two specified ComplexDouble objects are equal.
            </summary>
      <param name="c1">
            A ComplexDouble.
            </param>
      <param name="c2">
            A ComplexDouble.
            </param>
      <returns>true if c1 (parameter) and c2 (parameter) are equal.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.Equals(System.Object)">
      <summary>
            Returns a value that indicates if this object is equal to the specified object.
            </summary>
      <param name="obj">
            An object to compare with this object.
            </param>
      <returns>true if obj (parameter) is a
            ComplexDouble that represents the same value as this object.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.Equals(NationalInstruments.ComplexDouble)">
      <summary>
            Returns a value that indicates if this object is equal to the specified 
            ComplexDouble.
            </summary>
      <param name="c">
            A ComplexDouble to compare with this object.
            </param>
      <returns>true if c (parameter) represents the same value  
            as this object.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.ToString(System.String,System.IFormatProvider)">
      <summary>
            Returns the String representation of the value of this object using the specified format and culture-specific 
            formatting information.
            </summary>
      <param name="format">
            	The String that specifies the format to use.  This value can be any of the numeric format 
            strings that are defined for Double and is applied to the real and imaginary
            parts of the complex number. If format (parameter) is null,  the return value uses the default format.</param>
      <param name="formatProvider">
            The IFormatProvider to use to format the value.  This IFormatProvider is
            applied to the real and imaginary parts of the number. If formatProvider (parameter) is null, the return value uses
            the numeric format information from the current locale setting of the operating system.
            </param>
      <returns>
            A string representation of this object as specified by format (parameter) and formatProvider (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.ToString(System.String)">
      <summary>
            Returns the String representation of the value of this object using the specified format.
            </summary>
      <param name="format">
            The String that specifies the format to use.  This value can be any of the numeric format 
            strings that are defined for Double and is applied to the real and imaginary
            parts of the complex number. If format (parameter) is null, the return value uses the default format.
            </param>
      <returns>
            A string representation of this object as specified by format (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.ToString(System.IFormatProvider)">
      <summary>
            Returns the String representation of the value of this object using the specified culture-specific formatting information.
            </summary>
      <param name="formatProvider">
            The IFormatProvider to use to format the value.  This IFormatProvider is
            applied to the real and imaginary parts of the number. If formatProvider (parameter) is null, the return value uses
             the numeric format information from the current locale setting of the operating system.
            </param>
      <returns>
            A string representation of this object as specified by formatProvider (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    <member name="M:NationalInstruments.ComplexDouble.ComposeArray(System.Double[],System.Double[])">
      <summary>
            Creates an array of ComplexDouble objects from 
            Double arrays that represent the real and imaginary parts of complex numbers.
            </summary>
      <param name="realData">
            The real parts of complex numbers.
            </param>
      <param name="imaginaryData">
            The imaginary parts of complex numbers.
            </param>
      <returns>
            A ComplexDouble array in which the real part of the
            nth element is realData (parameter)[n] and the imaginary part is 
            imaginaryData (parameter)[n].
            </returns>
      <exception cref="T:System.ArgumentException">realData (parameter) and imaginaryData (parameter) do not have the same 
            length.
            </exception>
      <exception cref="T:System.ArgumentNullException">realData (parameter) is null.
            
            -or-
            imaginaryData (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.ComposeArray(System.Double[],System.Double[],System.Int32,System.Int32)">
      <summary>
            Creates an array of ComplexDouble objects from subsets of 
            Double arrays that represent the real and imaginary parts of complex numbers.
            </summary>
      <param name="realData">
            The real parts of complex numbers.
            </param>
      <param name="imaginaryData">
            The imaginary parts of complex numbers.
            </param>
      <param name="startIndex">
            The index in realData (parameter) (and imaginaryData (parameter)), from which to compose the ComplexDouble array.
            </param>
      <param name="length">
            The number of elements used, beginning at startIndex (parameter) in realData (parameter) and 
            imaginaryData (parameter), to compose the ComplexDouble array.
            </param>
      <returns>
            A ComplexDouble array in which the real part of the
            nth element is realData (parameter)[startIndex (parameter) + n] and the imaginary part is 
            imaginaryData (parameter)[startIndex (parameter) + n].
            </returns>
      <exception cref="T:System.ArgumentException">realData (parameter) and imaginaryData (parameter) do not have the same 
            length.
            </exception>
      <exception cref="T:System.ArgumentNullException">realData (parameter) is null.
            
            -or-
            imaginaryData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            -or-
            startIndex (parameter) is greater than or equal to the
            number of elements in realData (parameter) (or imaginaryData (parameter)).
            
            -or-
            length (parameter) is less than 0.
            
            -or-
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of realData (parameter) (or imaginaryData (parameter)).
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.ComposeArrayPolar(System.Double[],System.Double[])">
      <summary>
            Creates an array of ComplexDouble objects from 
            Double arrays that represent the magnitudes and phases of complex numbers.
            </summary>
      <param name="magnitudes">
            The magnitudes of complex numbers.
            </param>
      <param name="phases">
            The phases of complex numbers.
            </param>
      <returns>
            A ComplexDouble array in which the magnitude of the
            nth element is magnitudes (parameter)[n]
             and the phase is phases (parameter)[n].
            </returns>
      <exception cref="T:System.ArgumentException">magnitudes (parameter) and phases (parameter) do not have the same 
            length.
            </exception>
      <exception cref="T:System.ArgumentNullException">magnitudes (parameter) is null.
            
            -or-
            phases (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.ComposeArrayPolar(System.Double[],System.Double[],System.Int32,System.Int32)">
      <summary>
            Creates an array of ComplexDouble objects from subsets of
            Double arrays that represent the magnitudes and phases of complex numbers.
            </summary>
      <param name="magnitudes">
            The magnitudes of complex numbers.
            </param>
      <param name="phases">
            The phases of complex numbers.
            </param>
      <param name="startIndex">
            The index in magnitudes (parameter) and phases (parameter), from which to compose the ComplexDouble array.
            </param>
      <param name="length">
            The number of elements used, beginning at startIndex (parameter) in magnitudes (parameter) and 
            phases (parameter), to compose the ComplexDouble array.
            </param>
      <returns>
            A ComplexDouble array in which the magnitude of the
            nth element is magnitudes (parameter)[startIndex (parameter) + n]
             and the phase is phases (parameter)[startIndex (parameter) + n].
            </returns>
      <exception cref="T:System.ArgumentException">magnitudes (parameter) and phases (parameter) do not have the same 
            length.
            </exception>
      <exception cref="T:System.ArgumentNullException">magnitudes (parameter) is null.
            
            -or-
            phases (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            -or-
            startIndex (parameter) is greater than or equal to the
            number of elements in magnitudes (parameter) or phases (parameter).
            
            -or-
            length (parameter) is less than 0.
            
            -or-
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of magnitudes (parameter) or phases (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.DecomposeArray(NationalInstruments.ComplexDouble[],System.Double[]@,System.Double[]@)">
      <summary>Extracts the real and imaginary parts of a ComplexDouble array.
            </summary>
      <param name="complexData">
            A ComplexDouble array.
            </param>
      <param name="realData">
            Upon return, contains an array that consists of the real parts of complexData (parameter).
            </param>
      <param name="imaginaryData">
            Upon return, contains an array that consists of the imaginary parts of complexData (parameter).
            </param>
      <exception cref="T:System.ArgumentNullException">complexData (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.DecomposeArray(NationalInstruments.ComplexDouble[],System.Int32,System.Int32,System.Double[]@,System.Double[]@)">
      <summary>Extracts the real and imaginary parts of a subset of a ComplexDouble array.
            </summary>
      <param name="complexData">
            A ComplexDouble array.
            </param>
      <param name="startIndex">
            The index in complexData (parameter), from which to decompose into two Double arrays.
            </param>
      <param name="length">
            The number of elements used, beginning at startIndex (parameter) in complexData (parameter),
             to decompose into two Double arrays.
            </param>
      <param name="realData">
            Upon return, contains an array that consists of the real parts of complexData (parameter).
            </param>
      <param name="imaginaryData">
            Upon return, contains an array that consists of the imaginary parts of complexData (parameter).
            </param>
      <exception cref="T:System.ArgumentNullException">complexData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            -or-
            startIndex (parameter) is greater than or equal to the
            number of elements in complexData (parameter).
            
            -or-
            length (parameter) is less than 0.
            
            -or-
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of complexData (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.DecomposeArrayPolar(NationalInstruments.ComplexDouble[],System.Double[]@,System.Double[]@)">
      <summary>Extracts the magnitude and phase parts of a ComplexDouble array.
            </summary>
      <param name="complexData">
            A ComplexDouble array.
            </param>
      <param name="magnitudes">
            Upon return, contains an array that consists of the magnitudes of complexData (parameter).
            </param>
      <param name="phases">
            Upon return, contains an array that consists of the phases of complexData (parameter).
            </param>
      <exception cref="T:System.ArgumentNullException">complexData (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.DecomposeArrayPolar(NationalInstruments.ComplexDouble[],System.Int32,System.Int32,System.Double[]@,System.Double[]@)">
      <summary>Extracts the magnitude and phase parts of a subset of a ComplexDouble array.
            </summary>
      <param name="complexData">
            A ComplexDouble array.
            </param>
      <param name="startIndex">
            The index in complexData (parameter), from which to decompose into two Double arrays.
            </param>
      <param name="length">
            The number of elements used, beginning at startIndex (parameter) in complexData (parameter),
             to decompose into two Double arrays.
            </param>
      <param name="magnitudes">
            Upon return, contains an array that consists of the magnitudes of complexData (parameter).
            </param>
      <param name="phases">
            Upon return, contains an array that consists of the phases of complexData (parameter).
            </param>
      <exception cref="T:System.ArgumentNullException">complexData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex (parameter) is less than 0.
            
            -or-
            startIndex (parameter) is greater than or equal to the
            number of elements in complexData (parameter).
            
            -or-
            length (parameter) is less than 0.
            
            -or-
            length (parameter) is greater than the number of elements
            from startIndex (parameter) to the end of complexData (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.GetPhases(NationalInstruments.ComplexDouble[])">
      <summary>
            Extracts the phases of complex numbers from an array of ComplexDouble objects.
            </summary>
      <param name="complexData">
            A ComplexDouble array.
            </param>
      <returns>
            A Double array that contains the phases of the complex numbers in
            complexData (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">complexData (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.GetMagnitudes(NationalInstruments.ComplexDouble[])">
      <summary>
            Extracts the magnitudes of complex numbers from an array of ComplexDouble objects.
            </summary>
      <param name="complexData">
            A ComplexDouble array.
            </param>
      <returns>
            A Double array that contains the magnitudes of the complex numbers in
            complexData (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">complexData (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.Parse(System.String)">
      <summary>
            Converts the string representation of a complex number to its
            ComplexDouble equivalent.
            </summary>
      <param name="s">
            A string contains a complex number to convert.
            </param>
      <returns>
            A ComplexDouble equivalent to the complex numeric value
            specified in s (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">s (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">s (parameter) is not a complex number in a valid format.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a complex number in a specified culture-specific format
            to its ComplexDouble equivalent.
            </summary>
      <param name="s">
            A string contains a complex number to convert.
            </param>
      <param name="provider">
            An IFormatProvider that supplies culture-specific formatting information
            about s (parameter).
            </param>
      <returns>
            A ComplexDouble equivalent to the complex numeric value
            specified in s (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">s (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">s (parameter) is not a complex number in a valid format.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.TryParse(System.String,NationalInstruments.ComplexDouble@)">
      <summary>
            Converts the string representation of a complex number to its
            ComplexDouble equivalent.
            </summary>
      <param name="s">
            A string contains a complex number to convert.
            </param>
      <param name="result">
            A ComplexDouble equivalent to the complex numeric value
            specified by s (parameter).  If the return value is false, result (parameter)
            is Zero.
            </param>
      <returns>true is s (parameter) is converted successfully.
            </returns>
    </member>
    <member name="M:NationalInstruments.ComplexDouble.TryParse(System.String,System.IFormatProvider,NationalInstruments.ComplexDouble@)">
      <summary>
            Converts the string representation of a complex number in a specified culture-specific format
            to its ComplexDouble equivalent.
            </summary>
      <param name="s">
            A string contains a complex number to convert.
            </param>
      <param name="provider">
            An IFormatProvider that supplies culture-specific formatting information
            about s (parameter).
            </param>
      <param name="result">
            A ComplexDouble equivalent to the complex numeric value
            specified by s (parameter).  If the return value is false, result (parameter)
            is Zero.
            </param>
      <returns>true is s (parameter) is converted successfully.
            </returns>
    </member>
    <member name="P:NationalInstruments.ComplexDouble.Real">
      <summary>
            Gets or sets the real part of the ComplexDouble.
            </summary>
    </member>
    <member name="P:NationalInstruments.ComplexDouble.Imaginary">
      <summary>
            Gets or sets the imaginary part of the ComplexDouble.
            </summary>
    </member>
    <member name="P:NationalInstruments.ComplexDouble.Magnitude">
      <summary>
            Gets the magnitude of the ComplexDouble.
            </summary>
    </member>
    <member name="P:NationalInstruments.ComplexDouble.Phase">
      <summary>
            Gets the phase of the ComplexDouble.
            </summary>
    </member>
    <member name="P:NationalInstruments.ComplexDouble.ComplexConjugate">
      <summary>
            Gets the complex conjugate of the ComplexDouble.
            </summary>
    </member>
    <member name="P:NationalInstruments.ComplexDouble.Zero">
      <summary>
            Gets the complex number 0 + 0i.
            </summary>
    </member>
    <member name="T:NationalInstruments.AnalogWaveformSampleCollection`1">
      <summary>
            Represents a strongly typed collection of AnalogWaveformSample&lt;T&gt; objects.
            </summary>
      <typeparam name="TData">
            The type of the sample collection.
            </typeparam>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformSampleCollection`1.CopyTo(NationalInstruments.AnalogWaveformSample{`0}[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">index (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformSampleCollection`1.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformSampleCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
    <member name="M:NationalInstruments.AnalogWaveformSampleCollection`1.IndexOf(NationalInstruments.AnalogWaveformSample{`0})">
      <summary>
            Searches for the AnalogWaveformSample&lt;T&gt; and returns the zero-based index of the first
            occurrence.
            </summary>
      <param name="sample">
            The AnalogWaveformSample&lt;T&gt; to locate.
            </param>
      <returns>
            The zero-based index of the first occurrence of sample (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformSampleCollection`1.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformSampleCollection`1.Item(System.Int32)">
      <summary>
            Gets the AnalogWaveformSample&lt;T&gt; at the specified index. 
            </summary>
      <param name="sampleIndex">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleIndex (parameter) is less than zero.
            
            -or-
            

sampleIndex (parameter) is greater than or equal to count.
            


            -or-
            sampleIndex (parameter) is greater than or equal to count.
            </exception>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformSampleCollection`1.Count">
      <summary>
            Gets the number of samples in AnalogWaveformSampleCollection&lt;T&gt;.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformSampleCollection`1.System#Collections#ICollection#SyncRoot" />
    <member name="P:NationalInstruments.AnalogWaveformSampleCollection`1.System#Collections#ICollection#IsSynchronized" />
    <member name="T:NationalInstruments.AnalogWaveformSample">
      <summary>
            Represents a sample of an analog waveform.
            </summary>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformSample.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformSample.Owner">
      <summary>
            Gets the AnalogWaveform that the sample came from.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformSample.Value">
      <summary>
            Gets and sets the value of the analog sample.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformSample.HasTimeStamp">
      <summary>
            Gets a value indicating if the analog sample has a time stamp.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformSample.TimeStamp">
      <summary>
            Gets the time at which the data was sampled.
            </summary>
      <exception cref="T:System.InvalidOperationException">HasTimeStamp is false.
            </exception>
    </member>
    <member name="T:NationalInstruments.Restricted.LicenserHelper" />
    <member name="M:NationalInstruments.Restricted.LicenserHelper.GetPathFromRegistry(System.String)" />
    <member name="M:NationalInstruments.Restricted.LicenserHelper.FileExists(System.String)" />
    <member name="M:NationalInstruments.Restricted.LicenserHelper.DecryptBase64(System.String)" />
    <member name="M:NationalInstruments.Restricted.LicenserHelper.Encrypt(System.String)" />
    <member name="T:NationalInstruments.Restricted.DigitalWaveformChangedEventArgs" />
    <member name="M:NationalInstruments.Restricted.DigitalWaveformChangedEventArgs.#ctor(NationalInstruments.DigitalWaveform,NationalInstruments.Restricted.DigitalChangeType)" />
    <member name="M:NationalInstruments.Restricted.DigitalWaveformChangedEventArgs.#ctor(NationalInstruments.DigitalWaveform,System.Int32,System.Int32,NationalInstruments.Restricted.DigitalChangeType)" />
    <member name="P:NationalInstruments.Restricted.DigitalWaveformChangedEventArgs.Waveform" />
    <member name="P:NationalInstruments.Restricted.DigitalWaveformChangedEventArgs.SampleIndex" />
    <member name="P:NationalInstruments.Restricted.DigitalWaveformChangedEventArgs.SignalIndex" />
    <member name="P:NationalInstruments.Restricted.DigitalWaveformChangedEventArgs.ChangeType" />
    <member name="T:NationalInstruments.AnalogWaveform`1">
      <summary>
            Provides a data type that encapsulates analog data and timing information.
            </summary>
      <typeparam name="TData">
            The underlying type of the waveform. The following data types are supported by TData (generic type parameter):
            ByteSByteDecimalSingleDoubleInt16UInt16Int32UInt32Int64UInt64</typeparam>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of AnalogWaveform&lt;T&gt; with the specified sample
            count.
            </summary>
      <param name="sampleCount">
            The number of samples in the AnalogWaveform&lt;T&gt;.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleCount (parameter) is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    <member name="M:NationalInstruments.AnalogWaveform`1.FromArray1D(`0[])">
      <summary>
            Creates an AnalogWaveform&lt;T&gt; from an array of values.
            </summary>
      <param name="array">
            The array of values.
            </param>
      <returns>
            An AnalogWaveform&lt;T&gt;.
            </returns>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.FromArray2D(`0[0:,0:])">
      <summary>
            Creates an AnalogWaveform&lt;T&gt; array from a two-dimensional array of values.
            </summary>
      <param name="array">
            The two-dimensional array of values.
            </param>
      <returns>
            An AnalogWaveform&lt;T&gt; array.
            </returns>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.CopySamples(NationalInstruments.AnalogWaveform{`0},NationalInstruments.AnalogWaveform{`0},System.Int32)">
      <summary>
            Copies the data of a source analog waveform to a destination analog waveform.
            </summary>
      <param name="sourceWaveform">
            The source AnalogWaveform&lt;T&gt;.
            </param>
      <param name="destinationWaveform">
            The destination AnalogWaveform&lt;T&gt;.
            </param>
      <param name="sampleCount">
            The number of samples to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">sourceWaveform (parameter) is null.
            
            -or-
            destinationWaveform (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleCount (parameter) is less than zero.
            
            -or-
            sampleCount (parameter) is greater than the 
            sourceWaveform (parameter) sample count.
            
            -or-
            sampleCount (parameter) is greater than the 
            destinationWaveform (parameter) sample count.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.CopySamples(NationalInstruments.AnalogWaveform{`0},System.Int32,NationalInstruments.AnalogWaveform{`0},System.Int32,System.Int32)">
      <summary>
            Copies the data of a source analog waveform to a destination analog waveform with the specified indexes.
            </summary>
      <param name="sourceWaveform">
            The source AnalogWaveform&lt;T&gt;.
            </param>
      <param name="sourceSampleIndex">
            The source sample index.
            </param>
      <param name="destinationWaveform">
            The destination AnalogWaveform&lt;T&gt;.
            </param>
      <param name="destinationSampleIndex">
            The destination sample index.
            </param>
      <param name="sampleCount">
            The number of samples to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">sourceWaveform (parameter) is null.
            
            -or-
            destinationWaveform (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">sourceSampleIndex (parameter) is less than zero.
            
            -or-
            destinationSampleIndex (parameter) is less than zero.
            
            -or-
            sampleCount (parameter) is less than zero.
            
            -or-
            sourceSampleIndex (parameter) plus sampleCount (parameter) is greater than the 
            sourceWaveform (parameter) sample count.
            
            -or-
            destinationSampleIndex (parameter) plus sampleCount (parameter) is greater than the 
            destinationWaveform (parameter) sample count.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.GetRawData">
      <summary>
            Returns the raw analog waveform data.
            </summary>
      <returns>
            The raw analog waveform data.
            </returns>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.GetRawData(System.Int32,System.Int32)">
      <summary>
            Returns the raw analog waveform data using the specified sample index and count.
            </summary>
      <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the data.
            </param>
      <param name="count">
            The number of samples to return.
            </param>
      <returns>
            The raw analog waveform data.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            


            -or-
            

sampleIndex (parameter) is less than zero.
            


            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            



count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            

</exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.GetRawData(System.Int32,System.Int32,`0[],System.Int32)">
      <summary>
            Returns the raw analog waveform data using the specified sample index, count, and array index.
            </summary>
      <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the data.
            </param>
      <param name="count">
            The number of samples to copy into buffer (parameter).
            </param>
      <param name="buffer">
            The buffer to copy the raw data into.
            </param>
      <param name="arrayIndex">
            The beginning index of buffer (parameter) to copy the raw data into.
            </param>
      <exception cref="T:System.ArgumentNullException">buffer (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            
            -or-
            arrayIndex (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            -or-
            arrayIndex (parameter) plus count (parameter) is greater than the buffer (parameter) length.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.GetScaledData">
      <summary>
            Returns the scaled analog waveform data.
            </summary>
      <returns>
            The scaled analog waveform data.
            </returns>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.GetScaledData(System.Int32,System.Int32)">
      <summary>
            Returns the scaled analog waveform data using the sample index and count.
            </summary>
      <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the data.
            </param>
      <param name="count">
            The number of samples to return.
            </param>
      <returns>
            The scaled analog waveform data.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            


            -or-
            

sampleIndex (parameter) is less than zero.
            


            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            



count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            

</exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.GetScaledData(System.Int32,System.Int32,System.Double[],System.Int32)">
      <summary>
            Returns the scaled analog waveform data using the sample index, count, and array index.
            </summary>
      <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the data.
            </param>
      <param name="count">
            The number of samples to copy into buffer (parameter).
            </param>
      <param name="buffer">
            The buffer to copy the scaled data into.
            </param>
      <param name="arrayIndex">
            The beginning index of buffer (parameter) to copy the scaled data into.
            </param>
      <exception cref="T:System.ArgumentNullException">buffer (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            
            -or-
            arrayIndex (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            -or-
            arrayIndex (parameter) plus count (parameter) is greater than the buffer (parameter) length.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.Clone">
      <summary>
            Creates a new object that is a deep copy of this instance.
            </summary>
      <returns>
            A new object that is a deep copy of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.System#ICloneable#Clone" />
    <member name="M:NationalInstruments.AnalogWaveform`1.GetTimeStamps">
      <summary>
            Retrieves the time stamps from Timing.
            </summary>
      <returns>
            A DateTime array of time stamps.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is None.
            
            -or-
            
            The SampleIntervalMode is Regular, and
            HasTimeStamp is false.
            	</exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.GetTimeStamps(System.Int32,System.Int32)">
      <summary>
            Retrieves the time stamps from Timing using 
            the specified sample index and count.
            </summary>
      <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the time stamps.
            </param>
      <param name="count">
            The number of time stamps to return.
            </param>
      <returns>
            A DateTime array of time stamps.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is None.
            
            -or-
            
            The SampleIntervalMode is Regular, and
            HasTimeStamp is false.
            	</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            


            -or-
            

sampleIndex (parameter) is less than zero.
            


            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            



count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            

</exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.GetTimeStamps(System.Int32,System.Int32,System.DateTime[],System.Int32)">
      <summary>
            Retrieves the time stamps from Timing using 
            the specified sample index, count, and array index.
            </summary>
      <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the time stamps.
            </param>
      <param name="count">
            The number of time stamps to copy into buffer (parameter).
            </param>
      <param name="buffer">
            The buffer to copy the time stamps into.
            </param>
      <param name="arrayIndex">
            The beginning index of buffer (parameter) to copy the time stamps into.
            </param>
      <exception cref="T:System.ArgumentNullException">buffer (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is None.
            
            -or-
            
            The SampleIntervalMode is Regular, and
            HasTimeStamp is false.
            	</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            
            -or-
            arrayIndex (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            -or-
            arrayIndex (parameter) plus count (parameter) is greater than the buffer (parameter) length.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform`1.System#IServiceProvider#GetService(System.Type)" />
    <member name="P:NationalInstruments.AnalogWaveform`1.Samples">
      <summary>
            Gets the samples of the analog waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveform`1.ScaleMode">
      <summary>
            Gets or sets the scale mode of the analog waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveform`1.DataType">
      <summary>
            Gets the data type of the analog waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveform`1.ChannelName">
      <summary>
            Gets or sets the name of the device channel from which the analog waveform was acquired.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveform`1.UnitDescription">
      <summary>
            Gets or sets the unit of measurement, such as volts, of the analog waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveform`1.Timing">
      <summary>
            Gets or sets the timing information of the analog waveform.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            	The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">SampleIntervalMode is
            Irregular and the number of time stamps in 
            Timing is not equal to
            Count.
            
            -or-
            
            The time stamp values are greater than MaxValue.
            </exception>
    </member>
    <member name="P:NationalInstruments.AnalogWaveform`1.ExtendedProperties">
      <summary>
            Gets the extended properties for the analog waveform.
            </summary>
    </member>
    <member name="T:NationalInstruments.Restricted.IAnalogWaveformService`1" />
    <member name="M:NationalInstruments.Restricted.IAnalogWaveformService`1.LoadData(`0)" />
    <member name="M:NationalInstruments.Restricted.IAnalogWaveformService`1.LoadData(`0,System.Int32,System.Int32)" />
    <member name="T:NationalInstruments.Restricted.TypeConversionMap" />
    <member name="M:NationalInstruments.Restricted.TypeConversionMap.#ctor" />
    <member name="M:NationalInstruments.Restricted.TypeConversionMap.AddEntry(System.Type,System.Type,NationalInstruments.Restricted.TypeConversionMap.ConversionHandler)" />
    <member name="M:NationalInstruments.Restricted.TypeConversionMap.RemoveEntry(System.Type,System.Type)" />
    <member name="M:NationalInstruments.Restricted.TypeConversionMap.HasEntry(System.Type,System.Type)" />
    <member name="P:NationalInstruments.Restricted.TypeConversionMap.DefaultHandler" />
    <member name="P:NationalInstruments.Restricted.TypeConversionMap.Item(System.Type,System.Type)" />
    <member name="T:NationalInstruments.Restricted.TypeConversionMap.ConversionHandler" />
    <member name="T:NationalInstruments.ExtendedPropertyDictionary">
      <summary>
            Represents a dictionary of extended properties.
            </summary>
    </member>
    <member name="M:NationalInstruments.ExtendedPropertyDictionary.#ctor">
      <summary>
            Initializes a new instance of ExtendedPropertyDictionary.
            </summary>
    </member>
    <member name="M:NationalInstruments.ExtendedPropertyDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the ExtendedPropertyDictionary with the specified info and 
            context.
            </summary>
      <param name="info">
            The data needed to serialize or deserialize an object.
            </param>
      <param name="context">
            The source and destination of a given serialized stream.
            </param>
      <exception cref="T:System.ArgumentNullException">info (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.ExtendedPropertyDictionary.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Returns the data needed to serialize the ExtendedPropertyDictionary.
            </summary>
      <param name="info">
            A SerializationInfo object containing the information required to serialize the
            ExtendedPropertyDictionary.
            </param>
      <param name="context">
            A StreamingContext object.
            </param>
      <exception cref="T:System.ArgumentNullException">info (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.ExtendedPropertyDictionary.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    <member name="M:NationalInstruments.ExtendedPropertyDictionary.Clear">
      <summary>
            Removes all elements from the extended properties.
            </summary>
    </member>
    <member name="M:NationalInstruments.ExtendedPropertyDictionary.GetEnumerator">
      <summary>
            Returns an IDictionaryEnumerator that iterates through the extended properties.
            </summary>
      <returns>
            an IDictionaryEnumerator for the extended properties.
            </returns>
    </member>
    <member name="M:NationalInstruments.ExtendedPropertyDictionary.Add(System.String,System.Object)">
      <summary>
            Adds an element with the specified key and value to the extended properties.
            </summary>
      <param name="key">
            The String key of the element to add.
            </param>
      <param name="value">
            The value of the element to add. The value can be null.
            </param>
      <exception cref="T:System.ArgumentNullException">key (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            An element with the same key (parameter) already exists in the extended properties.
            </exception>
    </member>
    <member name="M:NationalInstruments.ExtendedPropertyDictionary.System#Collections#IDictionary#Add(System.Object,System.Object)" />
    <member name="M:NationalInstruments.ExtendedPropertyDictionary.Contains(System.String)">
      <summary>
            Determines whether the extended properties contains the specific key.
            </summary>
      <param name="key">
            The String key to locate in the extended properties.
            </param>
      <returns>true if the extended properties contains an element with the specified key (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">key (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.ExtendedPropertyDictionary.System#Collections#IDictionary#Contains(System.Object)" />
    <member name="M:NationalInstruments.ExtendedPropertyDictionary.Remove(System.String)">
      <summary>
            Removes the element with the specified key from the extended properties.
            </summary>
      <param name="key">
            The String key of the element to remove.
            </param>
      <exception cref="T:System.ArgumentNullException">key (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.ExtendedPropertyDictionary.System#Collections#IDictionary#Remove(System.Object)" />
    <member name="M:NationalInstruments.ExtendedPropertyDictionary.Clone">
      <summary>
            Creates a shallow copy of the extended properties.
            </summary>
      <returns>
            A shallow copy of the extended properties.
            </returns>
    </member>
    <member name="M:NationalInstruments.ExtendedPropertyDictionary.System#ICloneable#Clone" />
    <member name="M:NationalInstruments.ExtendedPropertyDictionary.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
    <member name="M:NationalInstruments.ExtendedPropertyDictionary.System#Collections#IEnumerable#GetEnumerator" />
    <member name="P:NationalInstruments.ExtendedPropertyDictionary.Count">
      <summary>
            Gets the number of key-and-value pairs contained in the extended properties.
            </summary>
    </member>
    <member name="P:NationalInstruments.ExtendedPropertyDictionary.Item(System.String)">
      <summary>
            Gets or sets the value associated with the specified key. 
            </summary>
      <param name="key">
            The String key value.
            </param>
      <exception cref="T:System.ArgumentNullException">key (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.ExtendedPropertyDictionary.System#Collections#IDictionary#Item(System.Object)" />
    <member name="P:NationalInstruments.ExtendedPropertyDictionary.Keys">
      <summary>
            Gets an ICollection containing the keys of the extended properties.
            </summary>
    </member>
    <member name="P:NationalInstruments.ExtendedPropertyDictionary.Values">
      <summary>
            Gets an ICollection containing the values of the extended properties.
            </summary>
    </member>
    <member name="P:NationalInstruments.ExtendedPropertyDictionary.System#Collections#ICollection#IsSynchronized" />
    <member name="P:NationalInstruments.ExtendedPropertyDictionary.System#Collections#ICollection#SyncRoot" />
    <member name="P:NationalInstruments.ExtendedPropertyDictionary.System#Collections#IDictionary#IsFixedSize" />
    <member name="P:NationalInstruments.ExtendedPropertyDictionary.System#Collections#IDictionary#IsReadOnly" />
    <member name="T:NationalInstruments.Restricted.ObsoleteMessage" />
    <member name="F:NationalInstruments.Restricted.ObsoleteMessage.SynchronizingObject" />
    <member name="T:NationalInstruments.Restricted.ImplicitRefreshItem" />
    <member name="M:NationalInstruments.Restricted.ImplicitRefreshItem.#ctor" />
    <member name="M:NationalInstruments.Restricted.ImplicitRefreshItem.Refresh" />
    <member name="T:NationalInstruments.WaveformTiming">
      <summary>
            Provides a class that encapsulates waveform timing information.
            </summary>
    </member>
    <member name="M:NationalInstruments.WaveformTiming.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    <member name="F:NationalInstruments.WaveformTiming.Empty">
      <summary>
            Represents a WaveformTiming that has no time stamp, time offset, or sample interval.
            </summary>
    </member>
    <member name="M:NationalInstruments.WaveformTiming.CreateWithNoInterval(System.DateTime)">
      <summary>
            Creates a WaveformTiming without an interval with the specified time stamp.
            </summary>
      <param name="timeStamp">
            The DateTime time stamp.
            </param>
      <returns>
            A WaveformTiming instance with no interval.
            </returns>
    </member>
    <member name="M:NationalInstruments.WaveformTiming.CreateWithNoInterval(System.TimeSpan)">
      <summary>
            Creates a WaveformTiming without an interval and with the specified time offset.
            </summary>
      <param name="timeOffset">
            The TimeSpan time offset.
            </param>
      <returns>
            A WaveformTiming instance with no interval.
            </returns>
    </member>
    <member name="M:NationalInstruments.WaveformTiming.CreateWithNoInterval(System.DateTime,System.TimeSpan)">
      <summary>
            Creates a WaveformTiming without an interval with the specified time stamp and
            time offset.
            </summary>
      <param name="timeStamp">
            The DateTime time stamp.
            </param>
      <param name="timeOffset">
            The TimeSpan time offset.
            </param>
      <returns>
            A WaveformTiming instance with no interval.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The timeStamp (parameter) plus timeOffset (parameter) is greater than MaxValue.
            
            -or-
            
            The timeStamp (parameter) plus timeOffset (parameter) is less than MinValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.WaveformTiming.CreateWithRegularInterval(System.TimeSpan)">
      <summary>
            Creates a regular interval WaveformTiming with the specified sample interval.
            </summary>
      <param name="sampleInterval">
            The TimeSpan between samples.
            </param>
      <returns>
            A regular interval WaveformTiming instance.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleInterval (parameter) is negative.
            </exception>
    </member>
    <member name="M:NationalInstruments.WaveformTiming.CreateWithRegularInterval(System.TimeSpan,System.TimeSpan)">
      <summary>
            Creates a regular interval WaveformTiming with the specified sample interval and
            time offset.
            </summary>
      <param name="sampleInterval">
            The TimeSpan between samples.
            </param>
      <param name="timeOffset">
            The TimeSpan time offset.
            </param>
      <returns>
            A regular interval WaveformTiming instance.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleInterval (parameter) is negative.
            </exception>
    </member>
    <member name="M:NationalInstruments.WaveformTiming.CreateWithRegularInterval(System.TimeSpan,System.DateTime)">
      <summary>
            Creates a regular interval WaveformTiming with the specified sample interval and
            time stamp.
            </summary>
      <param name="sampleInterval">
            The TimeSpan between samples.
            </param>
      <param name="timeStamp">
            The DateTime time stamp.
            </param>
      <returns>
            A regular interval WaveformTiming instance.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleInterval (parameter) is negative.
            </exception>
    </member>
    <member name="M:NationalInstruments.WaveformTiming.CreateWithRegularInterval(System.TimeSpan,System.DateTime,System.TimeSpan)">
      <summary>
            Creates a regular interval WaveformTiming with the specified sample interval, 
            time stamp, and time offset.
            </summary>
      <param name="sampleInterval">
            The TimeSpan between samples.
            </param>
      <param name="timeStamp">
            The DateTime time stamp.
            </param>
      <param name="timeOffset">
            The TimeSpan time offset.
            </param>
      <returns>
            A regular interval WaveformTiming instance.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleInterval (parameter) is negative.
            
            -or-
            
            The timeStamp (parameter) plus timeOffset (parameter) is greater than MaxValue.
            
            -or-
            
            The timeStamp (parameter) plus timeOffset (parameter) is less than MinValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.WaveformTiming.CreateWithIrregularInterval(System.DateTime[])">
      <summary>
            Creates a WaveformTiming with an irregular interval.
            </summary>
      <param name="timeStamps">
            The time stamps that represent the irregular interval.
            </param>
      <returns>
            An irregular interval WaveformTiming instance.
            </returns>
      <exception cref="T:System.ArgumentNullException">timeStamps (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">timeStamps (parameter) are not in ascending order.
            </exception>
    </member>
    <member name="M:NationalInstruments.WaveformTiming.GetTimeStamps(System.Int32)">
      <summary>
            Retrieves the time stamps of the waveform samples.
            </summary>
      <param name="count">
            The number of time stamps to return.
            </param>
      <returns>
            A DateTime array of time stamps.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is None.
            
            -or-
            
            The SampleIntervalMode is Regular and
            HasTimeStamp is false.
            	
            - or -
            
            The SampleIntervalMode is Regular,
            and the generated time stamp values are greater than MaxValue.
            </exception>
      <exception cref="T:System.ArgumentException">
            The SampleIntervalMode is Irregular,
            and count (parameter) is greater than the number of irregular time stamps.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.WaveformTiming.GetTimeStamps(System.Int32,System.Int32)">
      <summary>
            Retrieves the time stamps of the waveform samples.
            </summary>
      <param name="sampleIndex">
            The start sample.
            </param>
      <param name="count">
            The number of time stamps to return.
            </param>
      <returns>
            A DateTime array of time stamps.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is None.
            
            -or-
            
            The SampleIntervalMode is Regular, and
            HasTimeStamp is false.
            	
            - or -
            
            The SampleIntervalMode is Regular,
            and the generated time stamp values are greater than MaxValue.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            
            -or-
            
            The SampleIntervalMode is Irregular,
            and sampleIndex (parameter) plus count (parameter) is greater than the number of irregular time stamps.
            </exception>
    </member>
    <member name="M:NationalInstruments.WaveformTiming.GetTimeStamps(System.Int32,System.Int32,System.DateTime[],System.Int32)">
      <summary>
            Retrieves the time stamps of the waveform samples.
            </summary>
      <param name="sampleIndex">
            The start sample.
            </param>
      <param name="count">
            The number of time stamps to copy into buffer (parameter).
            </param>
      <param name="buffer">
            The buffer to copy the time stamps into.
            </param>
      <param name="arrayIndex">
            The beginning index of buffer (parameter) to copy the time stamps into.
            </param>
      <exception cref="T:System.ArgumentNullException">buffer (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is None.
            
            -or-
            
            The SampleIntervalMode is Regular, and
            HasTimeStamp is false.
            	
            - or -
            
            The SampleIntervalMode is Regular,
            and the generated time stamp values are greater than MaxValue.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            
            -or-
            arrayIndex (parameter) is less than zero.
            
            -or-
            
            The SampleIntervalMode is Irregular,
            and sampleIndex (parameter) plus count (parameter) is greater than the number of irregular time stamps.
            
            -or-
            arrayIndex (parameter) plus count (parameter) is greater than the buffer (parameter) length.
            </exception>
    </member>
    <member name="P:NationalInstruments.WaveformTiming.HasTimeStamp">
      <summary>
            Gets a value indicating whether the WaveformTiming has a time stamp.
            </summary>
    </member>
    <member name="P:NationalInstruments.WaveformTiming.TimeStamp">
      <summary>
            Gets the time stamp of the waveform.
            </summary>
      <exception cref="T:System.InvalidOperationException">HasTimeStamp is false.
            </exception>
    </member>
    <member name="P:NationalInstruments.WaveformTiming.StartTime">
      <summary>
            Gets the time stamp for the first waveform sample.
            </summary>
      <exception cref="T:System.InvalidOperationException">HasTimeStamp is false.
            </exception>
    </member>
    <member name="P:NationalInstruments.WaveformTiming.TimeOffset">
      <summary>
            Gets the difference between the start time and the time stamp of the waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.WaveformTiming.SampleIntervalMode">
      <summary>
            Gets the sample interval mode that determines how the waveform is sampled.
            </summary>
    </member>
    <member name="P:NationalInstruments.WaveformTiming.SampleInterval">
      <summary>
            Gets the time interval between samples.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is not Regular.
            </exception>
    </member>
    <member name="T:NationalInstruments.WaveformSampleIntervalMode">
      <summary>
            Specifies the sample interval mode that determines how the waveform is sampled.
            </summary>
    </member>
    <member name="F:NationalInstruments.WaveformSampleIntervalMode.None">
      <summary>
            No sample interval.
            </summary>
    </member>
    <member name="F:NationalInstruments.WaveformSampleIntervalMode.Regular">
      <summary>
            The sample interval is regular.
            </summary>
    </member>
    <member name="F:NationalInstruments.WaveformSampleIntervalMode.Irregular">
      <summary>
            The sample interval is irregular.
            </summary>
    </member>
    <member name="T:NationalInstruments.EnumObject">
      <summary>
            Provides the base class for enumeration-like objects that are based on extensible types.
            </summary>
    </member>
    <member name="M:NationalInstruments.EnumObject.#ctor">
      <summary>
            Initializes a new instance of the EnumObject class.
            </summary>
    </member>
    <member name="M:NationalInstruments.EnumObject.ToString">
      <summary>
            Override ToString.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.EnumObject.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="obj">
            An object to compare, or null.
            </param>
      <returns>
            A signed number indicating the relative values of this instance and value (parameter).
            

Return ValueDescription
            Less than zero
            
            This instance is less than value (parameter).
            
            Zero
            
            This instance is equal to value (parameter).
            
            Greater than zero
            
            This instance is greater than value (parameter)


            -or-
            

value (parameter) is null.
            

</returns>
      <exception cref="T:System.ArgumentException">value (parameter) is not an EnumObject.
            </exception>
    </member>
    <member name="M:NationalInstruments.EnumObject.GetNames(System.Type)">
      <summary>
            Gets an array of the names of the values in a specified EnumObject.
            </summary>
      <param name="type">
            An EnumObject type.
            </param>
      <returns>
            A string array of the names of the default values that are provided by the
            EnumObject.
            </returns>
      <exception cref="T:System.ArgumentException">type (parameter) is not an EnumObject.
            </exception>
      <exception cref="T:System.ArgumentNullException">type (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.EnumObject.GetValues(System.Type)">
      <summary>
            Gets an array of the values in a specified EnumObject.
            </summary>
      <param name="type">
            An EnumObject type.
            </param>
      <returns>
            A Array of the default values that are provided by the
            EnumObject.
            </returns>
      <exception cref="T:System.ArgumentException">type (parameter) is not an EnumObject.
            </exception>
      <exception cref="T:System.ArgumentNullException">type (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.EnumObject.Parse(System.Type,System.String)">
      <summary>
            Converts the string representation of the name to a default value that is provided by the
            EnumObject.
            </summary>
      <param name="type">
            The Type of the EnumObject.
            </param>
      <param name="value">
            A string that contains the name to convert.
            </param>
      <returns>
            An object which has a type that is specified by type (parameter) and has a value that is represented
            by value (parameter).
            </returns>
      <exception cref="T:System.ArgumentException">type (parameter) is not an EnumObject.
            
            -or-
            value (parameter) is not one of the default values that is defined by the
            EnumObject.
            </exception>
      <exception cref="T:System.ArgumentNullException">type (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.EnumObject.Parse(System.Type,System.String,System.Boolean)">
      <summary>
            Converts the string representation of the name to a default value that is provided by the
            EnumObject. You can specify if the operation is case-sensitive.</summary>
      <param name="type">
            The Type of the EnumObject.
            </param>
      <param name="value">
            A string that contains the name to convert.
            </param>
      <param name="ignoreCase">
            Ignores case sensitivity if true.
            </param>
      <returns>
            An object which has a type that is specified by type (parameter) and has a value that is represented
            by value (parameter).
            </returns>
      <exception cref="T:System.ArgumentException">type (parameter) is not an EnumObject.
            
            -or-
            value (parameter) is not one of the default values that is defined by the
            EnumObject.
            </exception>
      <exception cref="T:System.ArgumentNullException">type (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.EnumObject.UnderlyingType">
      <summary>
            Gets the underlying type of an EnumObject value.
            </summary>
    </member>
    <member name="P:NationalInstruments.EnumObject.Name">
      <summary>
            Gets the name of an EnumObject value.
            </summary>
    </member>
    <member name="T:NationalInstruments.AnalogWaveformSample`1">
      <summary>
            Represents a sample of an analog waveform.
            </summary>
      <typeparam name="TData">
            The type of the sample.
            </typeparam>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformSample`1.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformSample`1.Owner">
      <summary>
            Gets the AnalogWaveform&lt;T&gt; that the sample came from.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformSample`1.Value">
      <summary>
            Gets or sets the value of the AnalogWaveformSample&lt;T&gt;.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformSample`1.HasTimeStamp">
      <summary>
            Gets a value indicating if the analog sample has a time stamp.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformSample`1.TimeStamp">
      <summary>
            Gets the time at which the data was sampled.
            </summary>
      <exception cref="T:System.InvalidOperationException">HasTimeStamp is false.
            </exception>
    </member>
    <member name="T:NationalInstruments.DigitalWaveformSignalCollection">
      <summary>
            Represents a strongly typed collection of DigitalWaveformSignal objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformSignalCollection.IndexOf(NationalInstruments.DigitalWaveformSignal)">
      <summary>
            Searches for the DigitalWaveformSignal and returns the zero-based index of the first
            occurrence.
            </summary>
      <param name="signal">
            The DigitalWaveformSignal to locate.
            </param>
      <returns>
            The zero-based index of the first occurrence of signal (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformSignalCollection.CopyTo(NationalInstruments.DigitalWaveformSignal[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
            
            - or -
            index (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformSignalCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
    <member name="M:NationalInstruments.DigitalWaveformSignalCollection.GetEnumerator">
      <summary>
            Returns an enumerator that you use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformSignalCollection.Item(System.Int32)">
      <summary>
            Gets the DigitalWaveformSignal at the specified index.
            </summary>
      <param name="signalIndex">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">signalIndex (parameter) is less than zero.
            
            -or-
            

signalIndex (parameter) is greater than or equal to count.
            


            -or-
            signalIndex (parameter) is greater than or equal to count.
            </exception>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformSignalCollection.Item(System.String)">
      <summary>
            Gets the DigitalWaveformSignal with the specified signal name.
            </summary>
      <param name="signalName">
            The signal name of the DigitalWaveformSignal.
            </param>
      <exception cref="T:System.ArgumentException">signalName (parameter) was not found.
            </exception>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformSignalCollection.Count">
      <summary>
            Gets the number of samples in the DigitalWaveformSignalCollection.
            </summary>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformSignalCollection.System#Collections#ICollection#IsSynchronized" />
    <member name="P:NationalInstruments.DigitalWaveformSignalCollection.System#Collections#ICollection#SyncRoot" />
    <member name="T:NationalInstruments.DataConverter">
      <summary>
            Converts data from one data type to another data type.
            </summary>
    </member>
    <member name="M:NationalInstruments.DataConverter.CanConvert(System.Object,System.Type)">
      <summary>
            Returns if an object can be converted to a specified type.
            </summary>
      <param name="source">
            The object to check in order to verify if a conversion is possible.
            </param>
      <param name="targetType">
            The data type to check in order to verify if source (parameter) can be converted to it.
            </param>
      <returns>true if source (parameter) can be converted to the type specified by targetType (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.DataConverter.CanConvert``1(System.Object)">
      <summary>
            Returns if an object can be converted to the generic type TData.
            </summary>
      <typeparam name="TData">
            The type to check in order to verify if source (parameter) can be converted to it.
            </typeparam>
      <param name="source">
            The object to check in order to verify if a conversion is possible.
            </param>
      <returns>true if source (parameter) can be converted to the generic type TData.
            </returns>
    </member>
    <member name="M:NationalInstruments.DataConverter.Convert(System.Object,System.Type)">
      <summary>
            Returns an object of a specified type that has a value that is equivalent to a specified object.
            </summary>
      <param name="source">
            The object to convert the value of.
            </param>
      <param name="targetType">
            The type to convert the value of source (parameter) to.
            </param>
      <returns>
            An object that is of the type specified by targetType (parameter) and has a value that is equivalent to the value of source (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">source (parameter) is null.
            
            -or-
            targetType (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidCastException">
            Converting source (parameter) to targetType (parameter) cannot produce a meaningful result.
            </exception>
    </member>
    <member name="M:NationalInstruments.DataConverter.Convert``1(System.Object)">
      <summary>
            Returns an object of the generic type TData that has a value that is equivalent to a specified object.
            </summary>
      <typeparam name="TData">
            The type to convert the value of source (parameter) to.
            </typeparam>
      <param name="source">
            The object to convert the value of.
            </param>
      <returns>
            An object that is of the generic type TData and has a value that is equivalent to the value of source (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">source (parameter) is null.
            
            -or-
            targetType (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidCastException">
            Converting source (parameter) to targetType (parameter) cannot produce a meaningful result.
            </exception>
    </member>
    <member name="T:NationalInstruments.Restricted.UnmanagedHandle" />
    <member name="M:NationalInstruments.Restricted.UnmanagedHandle.#ctor(System.IntPtr)" />
    <member name="M:NationalInstruments.Restricted.UnmanagedHandle.Finalize" />
    <member name="M:NationalInstruments.Restricted.UnmanagedHandle.Dispose" />
    <member name="M:NationalInstruments.Restricted.UnmanagedHandle.ToHandle" />
    <member name="M:NationalInstruments.Restricted.UnmanagedHandle.CloseHandle" />
    <member name="M:NationalInstruments.Restricted.UnmanagedHandle.op_Implicit(NationalInstruments.Restricted.UnmanagedHandle)~System.IntPtr" />
    <member name="T:NationalInstruments.DigitalWaveformSignal">
      <summary>
            Represents a signal of a digital waveform.
            </summary>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformSignal.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to the specified
            DigitalWaveformSignal.
            </summary>
      <param name="obj">
            The DigitalWaveformSignal to compare with this
            instance.
            </param>
      <returns>true if obj (parameter) is a DigitalWaveformSignal that is equal 
            to this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformSignal.Equals(NationalInstruments.DigitalWaveformSignal)">
      <summary>
            Returns a value indicating whether this instance is equal to the specified
            DigitalWaveformSignal.
            </summary>
      <param name="signal">
            The DigitalWaveformSignal to compare with this
            instance.
            </param>
      <returns>true if signal (parameter) is a DigitalWaveformSignal that is equal 
            to this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformSignal.GetHashCode">
      <summary>
            Returns a hash code for the object.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformSignal.Owner">
      <summary>
            Gets the DigitalWaveform of the sample.
            </summary>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformSignal.States">
      <summary>
            Gets the collection of digital states that are part of the digital waveform signal.
            </summary>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformSignal.Name">
      <summary>
            Gets and sets the name of the digital waveform signal.
            </summary>
    </member>
    <member name="T:NationalInstruments.EventSynchronizationCallback`1">
      <summary>
            Represents a method that is called to raise an event.
            </summary>
      <typeparam name="TEventArgs">
            An EventArgs-derived type that specifies the type of the arguments
            of the event.
            </typeparam>
      <param name="e">
            The event arguments to use to raise the event.
            </param>
    </member>
    <member name="T:NationalInstruments.DigitalWaveformSampleCollection">
      <summary>
            Represents a strongly typed collection of DigitalWaveformSample objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformSampleCollection.IndexOf(NationalInstruments.DigitalWaveformSample)">
      <summary>
            Searches for the DigitalWaveformSample and returns the zero-based index of the first
            occurrence.
            </summary>
      <param name="sample">
            The DigitalWaveformSample to locate.
            </param>
      <returns>
            The zero-based index of the first occurrence of sample (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformSampleCollection.CopyTo(NationalInstruments.DigitalWaveformSample[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
            
            - or -
            index (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformSampleCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
    <member name="M:NationalInstruments.DigitalWaveformSampleCollection.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformSampleCollection.Item(System.Int32)">
      <summary>
            Gets the DigitalWaveformSample at the specified index. 
            </summary>
      <param name="sampleIndex">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleIndex (parameter) is less than zero.
            
            -or-
            

sampleIndex (parameter) is greater than or equal to count.
            


            -or-
            sampleIndex (parameter) is greater than or equal to count.
            </exception>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformSampleCollection.Count">
      <summary>
            Gets the number of samples in DigitalWaveformSampleCollection.
            </summary>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformSampleCollection.System#Collections#ICollection#IsSynchronized" />
    <member name="P:NationalInstruments.DigitalWaveformSampleCollection.System#Collections#ICollection#SyncRoot" />
    <member name="T:NationalInstruments.DigitalState">
      <summary>
            Specifies the different digital states that a digital signal can represent.
            </summary>
    </member>
    <member name="F:NationalInstruments.DigitalState.ForceDown">
      <summary>
            Force logic low. Drive to the low voltage level (VIL).
            </summary>
    </member>
    <member name="F:NationalInstruments.DigitalState.ForceUp">
      <summary>
            Force logic high. Drive to the high voltage level (VIH).
            </summary>
    </member>
    <member name="F:NationalInstruments.DigitalState.ForceOff">
      <summary>
            Force logic high impedance. Turn the driver off.
            </summary>
    </member>
    <member name="F:NationalInstruments.DigitalState.CompareLow">
      <summary>
            Compare logic low (edge). Compare for a voltage level lower than
            the low voltage threshold (VOL).
            </summary>
    </member>
    <member name="F:NationalInstruments.DigitalState.CompareHigh">
      <summary>
            Compare logic high (edge). Compare for a voltage level higher
            than the high voltage threshold (VOH).
            </summary>
    </member>
    <member name="F:NationalInstruments.DigitalState.CompareUnknown">
      <summary>
            Compare logic unknown. Don't compare.
            </summary>
    </member>
    <member name="F:NationalInstruments.DigitalState.CompareOff">
      <summary>
            Compare logic high impedance (edge). Compare for a voltage level
            between the low voltage threshold (VOL) and the high voltage threshold
            (VOH).
            </summary>
    </member>
    <member name="F:NationalInstruments.DigitalState.CompareValid">
      <summary>
            Compare logic valid level (edge). Compare for a 
            voltage level either lower than the low voltage threshold (VOL) or higher
            than the high voltage threshold (VOH).
            </summary>
    </member>
    <member name="T:NationalInstruments.Restricted.MultiKeyDictionary`3" />
    <member name="M:NationalInstruments.Restricted.MultiKeyDictionary`3.#ctor" />
    <member name="M:NationalInstruments.Restricted.MultiKeyDictionary`3.Add(`0,`1,`2)" />
    <member name="M:NationalInstruments.Restricted.MultiKeyDictionary`3.Clear" />
    <member name="M:NationalInstruments.Restricted.MultiKeyDictionary`3.ContainsKey(`0,`1)" />
    <member name="M:NationalInstruments.Restricted.MultiKeyDictionary`3.Remove(`0,`1)" />
    <member name="M:NationalInstruments.Restricted.MultiKeyDictionary`3.TryGetValue(`0,`1,`2@)" />
    <member name="P:NationalInstruments.Restricted.MultiKeyDictionary`3.Item(`0,`1)" />
    <member name="T:NationalInstruments.ISupportSynchronizationContext">
      <summary>
            Specifies that an object can use SynchronizationContext to
            customize how events and callback delegates are invoked.
            </summary>
    </member>
    <member name="P:NationalInstruments.ISupportSynchronizationContext.SynchronizeCallbacks">
      <summary>
            Specifies how events and callback delegates are invoked.
            </summary>
    </member>
    <member name="T:NationalInstruments.AnalogWaveform">
      <summary>
            Provides a data type that encapsulates analog data and timing information.
            </summary>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.#ctor(System.Type,System.Int32)">
      <summary>
            Initializes a new instance of AnalogWaveform with the specified sample type and count.
            </summary>
      <param name="sampleType">
            The Type of samples in the AnalogWaveform.
            </param>
      <param name="sampleCount">
            The number of samples in the AnalogWaveform.
            </param>
      <exception cref="T:System.ArgumentException">
            The Type specified by sampleType (parameter) is not supported by AnalogWaveform.
            </exception>
      <exception cref="T:System.ArgumentNullException">sampleType (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleCount (parameter) is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    <member name="M:NationalInstruments.AnalogWaveform.Clone">
      <summary>
            Creates a new object that is a deep copy of this instance.
            </summary>
      <returns>
            A new object that is a deep copy of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.System#ICloneable#Clone" />
    <member name="M:NationalInstruments.AnalogWaveform.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.CopySamples(NationalInstruments.AnalogWaveform,NationalInstruments.AnalogWaveform,System.Int32)">
      <summary>
            Copies the data of a source analog waveform to a destination analog waveform.
            </summary>
      <param name="sourceWaveform">
            The source AnalogWaveform.
            </param>
      <param name="destinationWaveform">
            The destination AnalogWaveform.
            </param>
      <param name="sampleCount">
            The number of samples to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">sourceWaveform (parameter) is null.
            
            -or-
            destinationWaveform (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleCount (parameter) is less than zero.
            
            -or-
            sampleCount (parameter) is greater than the 
            sourceWaveform (parameter) sample count.
            
            -or-
            sampleCount (parameter) is greater than the 
            destinationWaveform (parameter) sample count.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.CopySamples(NationalInstruments.AnalogWaveform,System.Int32,NationalInstruments.AnalogWaveform,System.Int32,System.Int32)">
      <summary>
            Copies the data of a source analog waveform to a destination analog waveform with the specified indexes.
            </summary>
      <param name="sourceWaveform">
            The source AnalogWaveform.
            </param>
      <param name="sourceSampleIndex">
            The source sample index.
            </param>
      <param name="destinationWaveform">
            The destination AnalogWaveform.
            </param>
      <param name="destinationSampleIndex">
            The destination sample index.
            </param>
      <param name="sampleCount">
            The number of samples to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">sourceWaveform (parameter) is null.
            
            -or-
            destinationWaveform (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">sourceSampleIndex (parameter) is less than zero.
            
            -or-
            destinationSampleIndex (parameter) is less than zero.
            
            -or-
            sampleCount (parameter) is less than zero.
            
            -or-
            sourceSampleIndex (parameter) plus sampleCount (parameter) is greater than the 
            sourceWaveform (parameter) sample count.
            
            -or-
            destinationSampleIndex (parameter) plus sampleCount (parameter) is greater than the 
            destinationWaveform (parameter) sample count.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.FromArray1D(System.Array)">
      <summary>
            Creates an analog waveform from a one-dimensional array of values.
            </summary>
      <param name="array">
            The one-dimensional array of values.
            </param>
      <returns>
            An AnalogWaveform containing the values.
            </returns>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The rank of array (parameter) is not one.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.FromArray2D(System.Array)">
      <summary>
            Creates an array of analog waveforms from a two-dimensional array of values.
            </summary>
      <param name="array">
            The two-dimensional array of values.
            </param>
      <returns>
            An AnalogWaveform array containing the values.
            </returns>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The rank of array (parameter) is not two.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.GetRawData">
      <summary>
            Returns the raw analog waveform data.
            </summary>
      <returns>
            The raw analog waveform data.
            </returns>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.GetRawData(System.Int32,System.Int32)">
      <summary>
            Returns the raw analog waveform data using the specified sample index and count.
            </summary>
      <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the data.
            </param>
      <param name="count">
            The number of samples to return.
            </param>
      <returns>
            The raw analog waveform data.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleIndex (parameter) is less than zero.
            


            -or-
            

count (parameter) is less than zero.
            


            -or-
            

sampleIndex (parameter) plus count (parameter) is greater than the sample count.
            sampleIndex (parameter) is less than zero.
            
            -or-
            count (parameter) is less than zero.
            
            -or-
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.GetRawData(System.Int32,System.Int32,System.Array,System.Int32)">
      <summary>
            Copies the raw analog waveform data into an array using the specified sample index, count, and array index.
            </summary>
      <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the data.
            </param>
      <param name="count">
            The number of samples to copy into buffer (parameter).
            </param>
      <param name="buffer">
            The buffer to copy the raw data into.
            </param>
      <param name="arrayIndex">
            The beginning index of buffer (parameter) to copy the raw data into.
            </param>
      <exception cref="T:System.ArgumentNullException">buffer (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleIndex (parameter) is less than zero.
            
            -or-
            count (parameter) is less than zero.
            
            -or-
            arrayIndex (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample count.
            
            -or-
            arrayIndex (parameter) plus count (parameter) is greater than the buffer (parameter) length.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.GetScaledData">
      <summary>
            Returns the scaled analog waveform data.
            </summary>
      <returns>
            The scaled analog waveform data.
            </returns>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.GetScaledData(System.Int32,System.Int32)">
      <summary>
            Returns the scaled analog waveform data using the specified sample index and count.
            </summary>
      <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the data.
            </param>
      <param name="count">
            The number of samples to return.
            </param>
      <returns>
            The scaled analog waveform data.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleIndex (parameter) is less than zero.
            


            -or-
            

count (parameter) is less than zero.
            


            -or-
            

sampleIndex (parameter) plus count (parameter) is greater than the sample count.
            sampleIndex (parameter) is less than zero.
            
            -or-
            count (parameter) is less than zero.
            
            -or-
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.GetScaledData(System.Int32,System.Int32,System.Double[],System.Int32)">
      <summary>
            Copies the scaled analog waveform data into an array using the specified sample index, count, and array index.
            </summary>
      <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the data.
            </param>
      <param name="count">
            The number of samples to copy into buffer (parameter).
            </param>
      <param name="buffer">
            The buffer to copy the scaled data into.
            </param>
      <param name="arrayIndex">
            The beginning index of buffer (parameter) to copy the scaled data into.
            </param>
      <exception cref="T:System.ArgumentNullException">buffer (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleIndex (parameter) is less than zero.
            
            -or-
            count (parameter) is less than zero.
            
            -or-
            arrayIndex (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample count.
            
            -or-
            arrayIndex (parameter) plus count (parameter) is greater than the buffer (parameter) length.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.GetTimeStamps">
      <summary>
            Retrieves the time stamps from Timing.
            </summary>
      <returns>
            A DateTime array of time stamps.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is None.
            
            -or-
            
            The SampleIntervalMode is Regular, and
            HasTimeStamp is false.
            	</exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.GetTimeStamps(System.Int32,System.Int32)">
      <summary>
            Retrieves the time stamps from Timing using the specified 
            sample index and count.
            </summary>
      <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the time stamps.
            </param>
      <param name="count">
            The number of time stamps to return.
            </param>
      <returns>
            A DateTime array of time stamps.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is None.
            
            -or-
            
            The SampleIntervalMode is Regular, and
            HasTimeStamp is false.
            	</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            


            -or-
            

sampleIndex (parameter) is less than zero.
            


            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            



count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            

</exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.GetTimeStamps(System.Int32,System.Int32,System.DateTime[],System.Int32)">
      <summary>
            Retrieves the time stamps from Timing using the specified 
            sample index, count, and array index.
            </summary>
      <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the time stamps.
            </param>
      <param name="count">
            The number of time stamps to copy into buffer (parameter).
            </param>
      <param name="buffer">
            The buffer to copy the time stamps into.
            </param>
      <param name="arrayIndex">
            The beginning index of buffer (parameter) to copy the time stamps into.
            </param>
      <exception cref="T:System.ArgumentNullException">buffer (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is None.
            
            -or-
            
            The SampleIntervalMode is Regular, and
            HasTimeStamp is false.
            	</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            
            -or-
            arrayIndex (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            -or-
            arrayIndex (parameter) plus count (parameter) is greater than the buffer (parameter) length.
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveform.System#IServiceProvider#GetService(System.Type)" />
    <member name="P:NationalInstruments.AnalogWaveform.Samples">
      <summary>
            Gets the samples of the analog waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveform.DataType">
      <summary>
            Gets the data type of the samples contained in the analog waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveform.UnitDescription">
      <summary>
            Gets or sets the unit of measurement, such as volts, of the analog waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveform.Timing">
      <summary>
            Gets or sets the timing information of the analog waveform.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            	The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">SampleIntervalMode is Irregular
            and the number of time stamps in Timing is not equal to
            Count.
            
            -or-
            
            The time stamp values are greater than MaxValue.
            </exception>
    </member>
    <member name="P:NationalInstruments.AnalogWaveform.ScaleMode">
      <summary>
            Gets or sets the scale mode of the analog waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveform.ExtendedProperties">
      <summary>
            Gets the extended properties for the analog waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveform.ChannelName">
      <summary>
            Gets or sets the name of the device channel from which the analog waveform was acquired.
            </summary>
    </member>
    <member name="T:NationalInstruments.Restricted.BetaLicense" />
    <member name="M:NationalInstruments.Restricted.BetaLicense.#ctor(System.String[],System.String,System.String,System.DateTime,System.DateTime)" />
    <member name="M:NationalInstruments.Restricted.BetaLicense.CheckForCorrectFileLicense(NationalInstruments.Internal.FileLicense)" />
    <member name="M:NationalInstruments.Restricted.BetaLicense.ComponentRunTimeCheck(System.Type,System.Object,System.String)" />
    <member name="P:NationalInstruments.Restricted.BetaLicense.LicenseType" />
    <member name="T:NationalInstruments.Restricted.LicenseProviderBase" />
    <member name="M:NationalInstruments.Restricted.LicenseProviderBase.#ctor" />
    <member name="M:NationalInstruments.Restricted.LicenseProviderBase.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" />
    <member name="P:NationalInstruments.Restricted.LicenseProviderBase.License" />
    <member name="T:NationalInstruments.ISynchronizeCallbacks">
      <summary>
            Specifies that an object can use an ISynchronizeInvoke implementation
            to customize how events and callback delegates are invoked.
            </summary>
    </member>
    <member name="P:NationalInstruments.ISynchronizeCallbacks.SynchronizingObject">
      <summary>
            Gets or sets the object that marshals event-handler and callback calls.
            </summary>
    </member>
    <member name="T:NationalInstruments.DigitalWaveformTestResult">
      <summary>
            Provides a test result from comparing an expected digital waveform against the compared waveform.
            </summary>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformTestResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the DigitalWaveformTestResult with the info and 
            context.
            </summary>
      <param name="info">
            The data needed to serialize or deserialize an object.
            </param>
      <param name="context">
            The source and destination of a given serialized stream.
            </param>
      <exception cref="T:System.ArgumentNullException">info (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformTestResult.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Returns the data needed to serialize the DigitalWaveformTestResult.
            </summary>
      <param name="info">
            A SerializationInfo object containing the information required to serialize the
            DigitalWaveformTestResult.
            </param>
      <param name="context">
            A StreamingContext object.
            </param>
      <exception cref="T:System.ArgumentNullException">info (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformTestResult.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    <member name="M:NationalInstruments.DigitalWaveformTestResult.GetFailures">
      <summary>
            Returns a DigitalWaveformFailure array containing failure information.
            </summary>
      <returns>
            The DigitalWaveformFailure array containing failure information.
            </returns>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformTestResult.Success">
      <summary>
            Returns if the test is successful.
            </summary>
    </member>
    <member name="T:NationalInstruments.DigitalWaveformSample">
      <summary>
            Represents a sample of a digital waveform.
            </summary>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformSample.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to the specified
            DigitalWaveformSample.
            </summary>
      <param name="obj">
            The DigitalWaveformSample to compare with this
            instance.
            </param>
      <returns>true if obj (parameter) is a DigitalWaveformSample that is equal 
            to this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformSample.Equals(NationalInstruments.DigitalWaveformSample)">
      <summary>
            Returns a value indicating whether this instance is equal to the specified
            DigitalWaveformSample.
            </summary>
      <param name="sample">
            The DigitalWaveformSample to compare with this
            instance.
            </param>
      <returns>true if sample (parameter) is a DigitalWaveformSample that is equal 
            to this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformSample.GetHashCode">
      <summary>
            Returns a hash code for the object.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformSample.TryConvert(System.Int64@)">
      <summary>
            Converts the DigitalWaveformSample to a 64-bit bus value.
            </summary>
      <param name="busValue">
            Upon return, contains the bus value of the DigitalWaveformSample. 
            </param>
      <returns>true if the bus value can convert to a 64-bit bus value. 
            </returns>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformSample.Owner">
      <summary>
            Gets the DigitalWaveform that the sample came from.
            </summary>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformSample.HasTimeStamp">
      <summary>
            Gets a value indicating whether the digital sample has a TimeStamp.
            </summary>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformSample.TimeStamp">
      <summary>
            The time stamp of the digital sample.
            </summary>
      <exception cref="T:System.InvalidOperationException">HasTimeStamp is false.
            </exception>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformSample.States">
      <summary>
            Gets the collection of digital states that are part of the sample.
            </summary>
    </member>
    <member name="T:NationalInstruments.Restricted.IDigitalWaveformService" />
    <member name="M:NationalInstruments.Restricted.IDigitalWaveformService.LoadData(NationalInstruments.DigitalState[0:,0:])" />
    <member name="M:NationalInstruments.Restricted.IDigitalWaveformService.GetData" />
    <member name="E:NationalInstruments.Restricted.IDigitalWaveformService.Changed" />
    <member name="T:NationalInstruments.Restricted.DigitalWaveformChangedEventHandler" />
    <member name="T:NationalInstruments.Restricted.DigitalChangeType" />
    <member name="F:NationalInstruments.Restricted.DigitalChangeType.Data" />
    <member name="F:NationalInstruments.Restricted.DigitalChangeType.Timing" />
    <member name="F:NationalInstruments.Restricted.DigitalChangeType.Label" />
    <member name="T:NationalInstruments.Restricted.CallbackManager" />
    <member name="M:NationalInstruments.Restricted.CallbackManager.#ctor" />
    <member name="M:NationalInstruments.Restricted.CallbackManager.#ctor(System.ComponentModel.EventHandlerList)" />
    <member name="M:NationalInstruments.Restricted.CallbackManager.Dispose" />
    <member name="M:NationalInstruments.Restricted.CallbackManager.Dispose(System.Boolean)" />
    <member name="M:NationalInstruments.Restricted.CallbackManager.AddEventHandler(System.Object,System.Delegate)" />
    <member name="M:NationalInstruments.Restricted.CallbackManager.RemoveEventHandler(System.Object,System.Delegate)" />
    <member name="M:NationalInstruments.Restricted.CallbackManager.GetHandlerCount(System.Object)" />
    <member name="M:NationalInstruments.Restricted.CallbackManager.InvokeAsyncCallback(System.ComponentModel.AsyncOperation,System.AsyncCallback,System.IAsyncResult)" />
    <member name="M:NationalInstruments.Restricted.CallbackManager.InvokeAsyncCallbackAsync(System.ComponentModel.AsyncOperation,System.AsyncCallback,System.IAsyncResult)" />
    <member name="M:NationalInstruments.Restricted.CallbackManager.RaiseGenericEvent``1(System.ComponentModel.AsyncOperation,NationalInstruments.EventSynchronizationCallback{``0},``0)" />
    <member name="M:NationalInstruments.Restricted.CallbackManager.RaiseGenericEventAsync``1(System.ComponentModel.AsyncOperation,NationalInstruments.EventSynchronizationCallback{``0},``0)" />
    <member name="M:NationalInstruments.Restricted.CallbackManager.RaiseEventDirect(System.Object,System.Object,System.EventArgs)" />
    <member name="M:NationalInstruments.Restricted.CallbackManager.RaiseGenericEventDirect``1(System.Object,System.Object,``0)" />
    <member name="M:NationalInstruments.Restricted.CallbackManager.RaiseEvent(System.Object,System.Object,System.EventArgs)" />
    <member name="M:NationalInstruments.Restricted.CallbackManager.RaiseEventAsync(System.Object,System.Object,System.EventArgs)" />
    <member name="M:NationalInstruments.Restricted.CallbackManager.RaiseGenericEvent``1(System.Object,System.Object,``0)" />
    <member name="M:NationalInstruments.Restricted.CallbackManager.RaiseGenericEventAsync``1(System.Object,System.Object,``0)" />
    <member name="P:NationalInstruments.Restricted.CallbackManager.IsDiposed" />
    <member name="P:NationalInstruments.Restricted.CallbackManager.SynchronizeCallbacks" />
    <member name="T:NationalInstruments.EngineeringFormatInfo">
      <summary>
            Defines a custom formatter to format numeric values with engineering notation and International
            System of Units (SI) prefixes and symbols.
            </summary>
    </member>
    <member name="M:NationalInstruments.EngineeringFormatInfo.#ctor">
      <summary>
            Initializes a new instance of the EngineeringFormatInfo class.
            </summary>
    </member>
    <member name="M:NationalInstruments.EngineeringFormatInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    <member name="M:NationalInstruments.EngineeringFormatInfo.GetInstance(System.IFormatProvider)">
      <summary>
            Gets EngineeringFormatInfo associated with the specified
            IFormatProvider.
            </summary>
      <param name="provider">
            The IFormatProvider used to get EngineeringFormatInfo.
            </param>
      <returns>
            The EngineeringFormatInfo associated with the specified
            IFormatProvider.
            </returns>
    </member>
    <member name="M:NationalInstruments.EngineeringFormatInfo.ReadOnly(NationalInstruments.EngineeringFormatInfo)">
      <summary>
            Returns a read-only copy of the specified EngineeringFormatInfo.
            </summary>
      <param name="efi">
            The EngineeringFormatInfo from which to create a read-only copy.
            </param>
      <returns>
            Attempting to perform an assignment to a property of a read-only
            EngineeringFormatInfo causes an
            InvalidOperationException.
            </returns>
    </member>
    <member name="M:NationalInstruments.EngineeringFormatInfo.GetFormat(System.Type)">
      <summary>
            Gets an object of the specified type that provides a numeric formatting service.
            </summary>
      <param name="formatType">
            The Type of the required formatting service.
            </param>
      <returns>
            The current EngineeringFormatInfo, if formatType (parameter)
            is the same as the type of the current EngineeringFormatInfo;
            otherwise, null.
            </returns>
    </member>
    <member name="M:NationalInstruments.EngineeringFormatInfo.Clone">
      <summary>
            Creates a copy of EngineeringFormatInfo.
            </summary>
      <returns>
            A new EngineeringFormatInfo copied from the original
            EngineeringFormatInfo.
            </returns>
    </member>
    <member name="M:NationalInstruments.EngineeringFormatInfo.Format(System.String,System.Object,System.IFormatProvider)">
      <summary>
            Converts the value of a specified object to an equivalent string representation using
            specified formatting information.
            </summary>
      <param name="format">
            A format string containing formatting specifications.
            </param>
      <param name="arg">
            An object to format.
            </param>
      <param name="formatProvider">
            An IFormatProvider object that supplies format information about the
            current instance.
            </param>
      <returns>
            The string representation of the value of arg (parameter), formatted as specified
            by format (parameter) and formatProvider (parameter).
            </returns>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.IsReadOnly">
      <summary>
            Gets a value that indicates if EngineeringFormatInfo
            is read-only.
            </summary>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.YottaPrefix">
      <summary>
            Gets or sets the SI prefix string to use for 10^24.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.YottaSymbol">
      <summary>
            Gets or sets the SI symbol string to use for 10^24.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.ZettaPrefix">
      <summary>
            Gets or sets the SI prefix string to use for 10^21.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.ZettaSymbol">
      <summary>
            Gets or sets the SI symbol string to use for 10^21.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.ExaPrefix">
      <summary>
            Gets or sets the SI prefix string to use for 10^18.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.ExaSymbol">
      <summary>
            Gets or sets the SI symbol string to use for 10^18.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.PetaPrefix">
      <summary>
            Gets or sets the SI prefix string to use for 10^15.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.PetaSymbol">
      <summary>
            Gets or sets the SI symbol string to use for 10^15.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.TeraPrefix">
      <summary>
            Gets or sets the SI prefix string to use for 10^12.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.TeraSymbol">
      <summary>
            Gets or sets the SI symbol string to use for 10^12.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.GigaPrefix">
      <summary>
            Gets or sets the SI prefix string to use for 10^9.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.GigaSymbol">
      <summary>
            Gets or sets the SI symbol string to use for 10^9.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.MegaPrefix">
      <summary>
            Gets or sets the SI prefix string to use for 10^6.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.MegaSymbol">
      <summary>
            Gets or sets the SI symbol string to use for 10^6.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.KiloPrefix">
      <summary>
            Gets or sets the SI prefix string to use for 10^3.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.KiloSymbol">
      <summary>
            Gets or sets the SI symbol string to use for 10^3.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.MilliPrefix">
      <summary>
            Gets or sets the SI prefix string to use for 10^-3.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.MilliSymbol">
      <summary>
            Gets or sets the SI symbol string to use for 10^-3.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.MicroPrefix">
      <summary>
            Gets or sets the SI prefix string to use for 10^-6.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.MicroSymbol">
      <summary>
            Gets or sets the SI symbol string to use for 10^-6.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.NanoPrefix">
      <summary>
            Gets or sets the SI prefix string to use for 10^-9.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.NanoSymbol">
      <summary>
            Gets or sets the SI symbol string to use for 10^-9.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.PicoPrefix">
      <summary>
            Gets or sets the SI prefix string to use for 10^-12.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.PicoSymbol">
      <summary>
            Gets or sets the SI symbol string to use for 10^-12.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.FemtoPrefix">
      <summary>
            Gets or sets the SI prefix string to use for 10^-15.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.FemtoSymbol">
      <summary>
            Gets or sets the SI symbol string to use for 10^-15.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.AttoPrefix">
      <summary>
            Gets or sets the SI prefix string to use for 10^-18.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.AttoSymbol">
      <summary>
            Gets or sets the SI symbol string to use for 10^-18.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.ZeptoPrefix">
      <summary>
            Gets or sets the SI prefix string to use for 10^-21.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.ZeptoSymbol">
      <summary>
            Gets or sets the SI symbol string to use for 10^-21.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.YoctoPrefix">
      <summary>
            Gets or sets the SI prefix string to use for 10^-24.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.YoctoSymbol">
      <summary>
            Gets or sets the SI symbol string to use for 10^-24.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The property is being set and EngineeringFormatInfo is read-only.
            </exception>
    </member>
    <member name="P:NationalInstruments.EngineeringFormatInfo.Default">
      <summary>
            Gets a read-only EngineeringFormatInfo whose properties are
            set to the default values.
            </summary>
    </member>
    <member name="T:NationalInstruments.DigitalStateUtility">
      <summary>
            Provides helper methods related to digital states.
            </summary>
    </member>
    <member name="M:NationalInstruments.DigitalStateUtility.Test(NationalInstruments.DigitalState,NationalInstruments.DigitalState)">
      <summary>
            Tests two digital states and returns whether the test failed.
            </summary>
      <param name="state1">
            The first DigitalState tested.
            </param>
      <param name="state2">
            The second DigitalState tested.
            </param>
      <returns>true if the test failed.
            </returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">digitalState1 (parameter) is an invalid DigitalState value.
            
            -or-
            digitalState2 (parameter) is an invalid DigitalState value.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalStateUtility.ToChar(NationalInstruments.DigitalState)">
      <summary>
            Returns a character representing the DigitalState.
            </summary>
      <param name="state">
            The DigitalState value.
            </param>
      <returns>
            A Char representing the DigitalState.
            </returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">state (parameter) is an invalid DigitalState value.
            </exception>
    </member>
    <member name="T:NationalInstruments.ComponentBase">
      <summary>
            Provides a base implementation of the IComponent interface for
            Measurement Studio components.
            </summary>
    </member>
    <member name="M:NationalInstruments.ComponentBase.#ctor">
      <summary>
            Initializes a new instance of the ComponentBase class.
            </summary>
    </member>
    <member name="M:NationalInstruments.ComponentBase.OnSynchronizingObjectChanged(System.EventArgs)">
      <summary>
            Raises the SynchronizingObjectChanged event.
            </summary>
      <param name="e">
            An EventArgs that contains the event data.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComponentBase.System#IServiceProvider#GetService(System.Type)" />
    <member name="M:NationalInstruments.ComponentBase.GetService(System.Type)">
      <summary>
            Returns an object that represents a service provided by the component or by its container.
            </summary>
      <param name="service">
            A service provided by the component.
            </param>
      <returns>
            An Object that represents a service provided by the component.  This value is
            null if the component does not provide the specified service.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComponentBase.Dispose(System.Boolean)">
      <summary>
            Releases the resources used by the ComponentBase.
            </summary>
      <param name="disposing">
            If true, this method releases managed and unmanaged resources. If
            false, this method releases
            only unmanaged resources.
            </param>
    </member>
    <member name="M:NationalInstruments.ComponentBase.RaiseExceptionIfDisposed">
      <summary>
            This member is obsolete. Use the ThrowExceptionIfDisposed 
            method to achieve the same functionality.
            </summary>
    </member>
    <member name="M:NationalInstruments.ComponentBase.ThrowExceptionIfDisposed">
      <summary>
            Throws an ObjectDisposedException if the component has been disposed.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The component has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComponentBase.AddEventHandler(System.Object,System.Delegate)">
      <summary>
            Adds an event handler for the specified event key.
            </summary>
      <param name="eventKey">
            The key of the event in the Events
            event handler list.
            </param>
      <param name="handler">
            The delegate to the method that handles the event.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComponentBase.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>
            Removes an event handler for the specified event key.
            </summary>
      <param name="eventKey">
            The key of the event in the Events
            event handler list.
            </param>
      <param name="handler">
            The delegate to the method that handles the event.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComponentBase.RaiseEvent(System.Object,System.EventArgs)">
      <summary>
            Raises the event specified by an event key with the specified event arguments.
            </summary>
      <param name="eventKey">
            The key of the event in the Events event handler list.
            </param>
      <param name="e">
            The event arguments to use to raise the event.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComponentBase.RaiseEventDirect(System.Object,System.EventArgs)">
      <summary>
            Raises the event specified by an event key with the specified event arguments without
            cross-thread synchronization.
            </summary>
      <param name="eventKey">
            The key of the event in the Events event handler list.
            </param>
      <param name="e">
            The event arguments to use to raise the event.
            </param>
    </member>
    <member name="M:NationalInstruments.ComponentBase.RaiseEventAsync(System.Object,System.EventArgs)">
      <summary>
            Asynchronously raises the event specified by an event key with the specified event arguments.
            </summary>
      <param name="eventKey">
            The key of the event in the Events
            event handler list.
            </param>
      <param name="e">
            The event arguments to use to raise the event.
            </param>
    </member>
    <member name="M:NationalInstruments.ComponentBase.RaiseGenericEventDirect``1(System.Object,``0)">
      <summary>
            Raises the event specified by an event key with the specified event arguments without
            cross-thread synchronization.
            </summary>
      <typeparam name="TEventArgs">
            An EventArgs-derived type that specifies the type of the arguments
            of the event.
            </typeparam>
      <param name="eventKey">
            The key of the event in the event handler list.
            </param>
      <param name="e">
            The event arguments to use to raise the event.
            </param>
    </member>
    <member name="M:NationalInstruments.ComponentBase.RaiseGenericEvent``1(System.Object,``0)">
      <summary>
            Raises the event specified by an event key with the specified event arguments.
            </summary>
      <typeparam name="TEventArgs">
            An EventArgs-derived type that specifies the type of the arguments
            of the event.
            </typeparam>
      <param name="eventKey">
            The key of the event in the Events
            event handler list.
            </param>
      <param name="e">
            The event arguments to use to raise the event.
            </param>
    </member>
    <member name="M:NationalInstruments.ComponentBase.RaiseGenericEvent``1(System.ComponentModel.AsyncOperation,NationalInstruments.EventSynchronizationCallback{``0},``0)">
      <summary>
            Raises the event through a synchronization context with the specified event arguments.
            </summary>
      <typeparam name="TEventArgs">
            An EventArgs-derived type that specifies the type of the arguments
            of the event.
            </typeparam>
      <param name="operation">
            An AsyncOperation that provides the
            SynchronizationContext that is used to invoke
            the event.
            </param>
      <param name="callback">
            A delegate to the method that raises the event.
            </param>
      <param name="e">
            The event arguments to use to raise the event.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="M:NationalInstruments.ComponentBase.RaiseGenericEventAsync``1(System.Object,``0)">
      <summary>
            Asynchronously raises the event specified by an event key with the specified event arguments.
            </summary>
      <typeparam name="TEventArgs">
            An EventArgs-derived type that specifies the type of the arguments
            of the event.
            </typeparam>
      <param name="eventKey">
            The key of the event in the Events
            event handler list.
            </param>
      <param name="e">
            The event arguments to use to raise the event.
            </param>
    </member>
    <member name="M:NationalInstruments.ComponentBase.RaiseGenericEventAsync``1(System.ComponentModel.AsyncOperation,NationalInstruments.EventSynchronizationCallback{``0},``0)">
      <summary>
            Asynchronously raises the event through a synchronization context with the specified event
            arguments.
            </summary>
      <typeparam name="TEventArgs">
            An EventArgs-derived type that specifies the type of the arguments
            of the event.
            </typeparam>
      <param name="operation">
            An AsyncOperation that provides the
            SynchronizationContext that is used to invoke
            the event.
            </param>
      <param name="callback">
            A delegate to the method that raises the event.
            </param>
      <param name="e">
            The event arguments to use to raise the event.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.ComponentBase.IsDisposed">
      <summary>
            Gets a value indicating if the component has been disposed.
            </summary>
    </member>
    <member name="P:NationalInstruments.ComponentBase.SynchronizeCallbacks">
      <summary>
            Gets or sets how events and callback delegates are invoked.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.ComponentBase.SynchronizingObject">
      <summary>
            Gets or sets the object that marshals event-handler and callback calls.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="P:NationalInstruments.ComponentBase.Tag">
      <summary>
            Gets or sets the object that contains data about the component.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
    </member>
    <member name="E:NationalInstruments.ComponentBase.SynchronizingObjectChanged">
      <summary>
            Occurs when SynchronizingObject has changed.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
    </member>
    <member name="T:NationalInstruments.WaveformScaleMode">
      <summary>
            Represents a class used to scale waveform data.
            </summary>
    </member>
    <member name="M:NationalInstruments.WaveformScaleMode.#ctor">
      <summary>
            Initializes a new instance of the WaveformScaleMode class.
            </summary>
    </member>
    <member name="M:NationalInstruments.WaveformScaleMode.GetScaledData(NationalInstruments.AnalogWaveform)">
      <summary>
            Returns the scaled analog waveform data.
            </summary>
      <param name="waveform">
            The waveform to get the scaled data from.
            </param>
      <returns>
            The scaled data.
            </returns>
      <exception cref="T:System.ArgumentNullException">waveform (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.WaveformScaleMode.GetScaledData``1(NationalInstruments.AnalogWaveform{``0})">
      <summary>
            Returns the scaled analog waveform data.
            </summary>
      <param name="waveform">
            The waveform to get the scaled data from.
            </param>
      <returns>
            The scaled data.
            </returns>
      <exception cref="T:System.ArgumentNullException">waveform (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.WaveformScaleMode.GetScaledData(NationalInstruments.AnalogWaveform,System.Int32,System.Int32)">
      <summary>
            Returns the scaled analog waveform data using the specified sample index and count.
            </summary>
      <param name="waveform">
            The waveform to get the scaled data from.
            </param>
      <param name="sampleIndex">
            The start index.
            </param>
      <param name="count">
            The amount of scaled data to return.
            </param>
      <returns>
            The scaled data.
            </returns>
      <exception cref="T:System.ArgumentNullException">waveform (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            


            -or-
            

sampleIndex (parameter) is less than zero.
            


            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            



count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            

</exception>
    </member>
    <member name="M:NationalInstruments.WaveformScaleMode.GetScaledData``1(NationalInstruments.AnalogWaveform{``0},System.Int32,System.Int32)">
      <summary>
            Returns the scaled analog waveform data using the specified sample index and count.
            </summary>
      <param name="waveform">
            The waveform to get the scaled data from.
            </param>
      <param name="sampleIndex">
            The start index.
            </param>
      <param name="count">
            The amount of scaled data to return.
            </param>
      <returns>
            The scaled data.
            </returns>
      <exception cref="T:System.ArgumentNullException">waveform (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            


            -or-
            

sampleIndex (parameter) is less than zero.
            


            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            



count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            

</exception>
    </member>
    <member name="M:NationalInstruments.WaveformScaleMode.GetScaledData(NationalInstruments.AnalogWaveform,System.Int32,System.Int32,System.Double[],System.Int32)">
      <summary>
            Returns the scaled analog waveform data using the specified sample index, count, and array index.
            </summary>
      <param name="waveform">
            The waveform to get the scaled data from.
            </param>
      <param name="sampleIndex">
            The start sample.
            </param>
      <param name="count">
            The amount of scaled data to copy into buffer (parameter).
            </param>
      <param name="buffer">
            The buffer to copy the scaled data into.
            </param>
      <param name="arrayIndex">
            The beginning index of buffer (parameter) to copy the scaled data into.
            </param>
      <exception cref="T:System.ArgumentNullException">waveform (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            
            -or-
            arrayIndex (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            -or-
            arrayIndex (parameter) plus count (parameter) is greater than the buffer (parameter) length.
            </exception>
    </member>
    <member name="M:NationalInstruments.WaveformScaleMode.GetScaledData``1(NationalInstruments.AnalogWaveform{``0},System.Int32,System.Int32,System.Double[],System.Int32)">
      <summary>
            Returns the scaled analog waveform data using the specified sample index, count, and array index.
            </summary>
      <param name="waveform">
            The waveform to get the scaled data from.
            </param>
      <param name="sampleIndex">
            The start sample.
            </param>
      <param name="count">
            The amount of scaled data to copy into buffer (parameter).
            </param>
      <param name="buffer">
            The buffer to copy the scaled data into.
            </param>
      <param name="arrayIndex">
            The beginning index of buffer (parameter) to copy the scaled data into.
            </param>
      <exception cref="T:System.ArgumentNullException">waveform (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            
            -or-
            arrayIndex (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            -or-
            arrayIndex (parameter) plus count (parameter) is greater than the buffer (parameter) length.
            </exception>
    </member>
    <member name="M:NationalInstruments.WaveformScaleMode.TransformData(System.Double[])">
      <summary>
            Returns the transformed data.
            </summary>
      <param name="data">
            The raw, untransformed data.
            </param>
      <returns>
            The transformed data.
            </returns>
    </member>
    <member name="M:NationalInstruments.WaveformScaleMode.CreateLinearMode(System.Double,System.Double)">
      <summary>
            Creates a WaveformScaleMode that scales data linearly.
            </summary>
      <param name="gain">
            The gain of the linear scale.
            </param>
      <param name="offset">
            The offset of the linear scale.
            </param>
      <returns>
            A WaveformScaleMode that scales data linearly.
            </returns>
    </member>
    <member name="P:NationalInstruments.WaveformScaleMode.None">
      <summary>
            Gets a WaveformScaleMode that does not scale data.
            </summary>
    </member>
    <member name="T:NationalInstruments.DigitalWaveformFailure">
      <summary>
            Provides a class that encapsulates a test failure between two digital states.
            </summary>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformFailure.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the DigitalWaveformFailure with the specified info and 
            context.
            </summary>
      <param name="info">
            The data needed to serialize or deserialize an object.
            </param>
      <param name="context">
            The source and destination of a given serialized stream.
            </param>
      <exception cref="T:System.ArgumentNullException">info (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformFailure.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Returns the data needed to serialize the DigitalWaveformFailure.
            </summary>
      <param name="info">
            A SerializationInfo object containing the information required to serialize the
            DigitalWaveformFailure.
            </param>
      <param name="context">
            A StreamingContext object.
            </param>
      <exception cref="T:System.ArgumentNullException">info (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveformFailure.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    <member name="P:NationalInstruments.DigitalWaveformFailure.SampleIndex">
      <summary>
            Gets the sample index into the compared test waveform where the test failure occurred.
            </summary>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformFailure.ExpectedSampleIndex">
      <summary>
            Gets the sample index into the expected test waveform where the test failure occurred.
            </summary>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformFailure.SignalIndex">
      <summary>
            Gets the signal index into the compared test waveform and the expected test waveform where the test failure occurred.
            </summary>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformFailure.ActualState">
      <summary>
            Gets the state from the compared waveform where the test failure occurred.</summary>
    </member>
    <member name="P:NationalInstruments.DigitalWaveformFailure.ExpectedState">
      <summary>
            Gets the state from the expected waveform where the test failure occurred.</summary>
    </member>
    <member name="T:NationalInstruments.AnalogWaveformSampleCollection">
      <summary>
            Represents a strongly typed collection of AnalogWaveformSample objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformSampleCollection.IndexOf(NationalInstruments.AnalogWaveformSample)">
      <summary>
            Searches for the AnalogWaveformSample and returns the zero-based index of the first
            occurrence.
            </summary>
      <param name="sample">
            The AnalogWaveformSample to locate.
            </param>
      <returns>
            The zero-based index of the first occurrence of sample (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformSampleCollection.CopyTo(NationalInstruments.AnalogWaveformSample[],System.Int32)">
      <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
      <param name="array">
            Destination array for the collection.
            </param>
      <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">index (parameter) is equal to or greater than the length of array (parameter).
            
            -or-
            
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than the lower bound of array (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformSampleCollection.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.AnalogWaveformSampleCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
    <member name="M:NationalInstruments.AnalogWaveformSampleCollection.GetEnumerator">
      <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
      <returns>
            The enumerator for the collection.
            </returns>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformSampleCollection.Item(System.Int32)">
      <summary>
            Gets the AnalogWaveformSample at the specified index. 
            </summary>
      <param name="sampleIndex">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleIndex (parameter) is less than zero.
            
            -or-
            

sampleIndex (parameter) is greater than or equal to count.
            


            -or-
            sampleIndex (parameter) is greater than or equal to count.
            </exception>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformSampleCollection.Count">
      <summary>
            Gets the number of samples in AnalogWaveformSampleCollection.
            </summary>
    </member>
    <member name="P:NationalInstruments.AnalogWaveformSampleCollection.System#Collections#ICollection#IsSynchronized" />
    <member name="P:NationalInstruments.AnalogWaveformSampleCollection.System#Collections#ICollection#SyncRoot" />
    <member name="T:NationalInstruments.Restricted.Categories" />
    <member name="F:NationalInstruments.Restricted.Categories.Action" />
    <member name="F:NationalInstruments.Restricted.Categories.Accessibility" />
    <member name="F:NationalInstruments.Restricted.Categories.Appearance" />
    <member name="F:NationalInstruments.Restricted.Categories.Behavior" />
    <member name="F:NationalInstruments.Restricted.Categories.Configurations" />
    <member name="F:NationalInstruments.Restricted.Categories.Data" />
    <member name="F:NationalInstruments.Restricted.Categories.Design" />
    <member name="F:NationalInstruments.Restricted.Categories.DragDrop" />
    <member name="F:NationalInstruments.Restricted.Categories.Focus" />
    <member name="F:NationalInstruments.Restricted.Categories.Format" />
    <member name="F:NationalInstruments.Restricted.Categories.Key" />
    <member name="F:NationalInstruments.Restricted.Categories.Layout" />
    <member name="F:NationalInstruments.Restricted.Categories.Mouse" />
    <member name="F:NationalInstruments.Restricted.Categories.Misc" />
    <member name="F:NationalInstruments.Restricted.Categories.PropertyChanged" />
    <member name="F:NationalInstruments.Restricted.Categories.WindowStyle" />
    <member name="F:NationalInstruments.Restricted.Categories.Arrow" />
    <member name="F:NationalInstruments.Restricted.Categories.Caption" />
    <member name="F:NationalInstruments.Restricted.Categories.Shape" />
    <member name="F:NationalInstruments.Restricted.Categories.Range" />
    <member name="T:NationalInstruments.DigitalWaveform">
      <summary>
            Provides a data type that encapsulates digital data and timing information.
            </summary>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of DigitalWaveform with the specified sample and signal
            count.
            </summary>
      <param name="sampleCount">
            The number of samples in the DigitalWaveform.
            </param>
      <param name="signalCount">
            The number of signals in the DigitalWaveform.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleCount (parameter) is less than zero.
            
            -or-
            signalCount (parameter) is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.#ctor(System.Int32,System.Int32,NationalInstruments.DigitalState)">
      <summary>
            Initializes a new instance of DigitalWaveform with the specified sample count, signal
            count, and default value.
            </summary>
      <param name="sampleCount">
            The number of samples in the DigitalWaveform.
            </param>
      <param name="signalCount">
            The number of signals in the DigitalWaveform.
            </param>
      <param name="defaultValue">
            The DigitalState to initialize the DigitalWaveform with.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleCount (parameter) is less than zero.
            
            -or-
            signalCount (parameter) is less than zero.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">defaultValue (parameter) is an invalid DigitalState value.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    <member name="M:NationalInstruments.DigitalWaveform.Clone">
      <summary>
            Creates a new object that is a deep copy of this instance.
            </summary>
      <returns>
            A new object that is a deep copy of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.System#ICloneable#Clone" />
    <member name="M:NationalInstruments.DigitalWaveform.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.CopyStates(NationalInstruments.DigitalWaveform,NationalInstruments.DigitalWaveform,System.Int32,System.Int32)">
      <summary>
            Copies the data of a source digital waveform to a destination digital waveform.
            </summary>
      <param name="sourceWaveform">
            The source DigitalWaveform.
            </param>
      <param name="destinationWaveform">
            The destination DigitalWaveform.
            </param>
      <param name="sampleCount">
            The number of samples to copy.
            </param>
      <param name="signalCount">
            The number of signals to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">
            The sourceWaveform (parameter) is null.
            
            -or-
            
            The destinationWaveform (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">sampleCount (parameter) is less than zero.
            
            -or-
            signalCount (parameter) is less than zero.
            
            -or-
            sampleCount (parameter) is greater than
            sourceWaveform (parameter) sample count.
            
            -or-
            sampleCount (parameter) is greater than
            destinationWaveform (parameter) sample count.
            
            -or-
            signalCount (parameter) is greater than
            sourceWaveform (parameter) signal count.
            
            -or-
            signalCount (parameter) is greater than
            destinationWaveform (parameter) signal count.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.CopyStates(NationalInstruments.DigitalWaveform,System.Int32,System.Int32,NationalInstruments.DigitalWaveform,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Copies the data of a source digital waveform to a destination digital waveform with the specified indexes.
            </summary>
      <param name="sourceWaveform">
            The source DigitalWaveform.
            </param>
      <param name="sourceSampleIndex">
            The source sample index.
            </param>
      <param name="sourceSignalIndex">
            The source signal index.
            </param>
      <param name="destinationWaveform">
            The destination DigitalWaveform.
            </param>
      <param name="destinationSampleIndex">
            The destination sample index.
            </param>
      <param name="destinationSignalIndex">
            The destination signal index.
            </param>
      <param name="sampleCount">
            The number of samples to copy.
            </param>
      <param name="signalCount">
            The number of signals to copy.
            </param>
      <exception cref="T:System.ArgumentNullException">
            The sourceWaveform (parameter) is null.
            
            -or-
            
            The destinationWaveform (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">sourceSampleIndex (parameter) is less than zero.
            
            -or-
            sourceSignalIndex (parameter) is less than zero.
            
            -or-
            destinationSampleIndex (parameter) is less than zero.
            
            -or-
            destinationSignalIndex (parameter) is less than zero.
            
            -or-
            sampleCount (parameter) is less than zero.
            
            -or-
            signalCount (parameter) is less than zero.
            
            -or-
            sourceSampleIndex (parameter) + sampleCount (parameter) is greater than
            sourceWaveform (parameter) sample count.
            
            -or-
            destinationSampleIndex (parameter) + sampleCount (parameter) is greater than
            destinationWaveform (parameter) sample count.
            
            -or-
            sourceSignalIndex (parameter) + signalCount (parameter) is greater than
            sourceWaveform (parameter) signal count.
            
            -or-
            destinationSignalIndex (parameter) + signalCount (parameter) is greater than
            destinationWaveform (parameter) signal count.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.Test(NationalInstruments.DigitalWaveform)">
      <summary>
            Tests the digital waveform against an expected digital waveform.
            </summary>
      <param name="expectedWaveform">
            The expected DigitalWaveform.
            </param>
      <returns>
            A DigitalWaveformTestResult containing the test results.
            </returns>
      <exception cref="T:System.ArgumentNullException">expectedWaveform (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The digital waveform and the expectedWaveform (parameter) signal counts are not equal.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.Test(System.Int32,NationalInstruments.DigitalWaveform,System.Int32,System.Int32)">
      <summary>
            Tests the digital waveform against an expected digital waveform using the specified start sample and expected start sample.
            </summary>
      <param name="startSample">
            The beginning sample to compare.
            </param>
      <param name="expectedWaveform">
            The expected DigitalWaveform.
            </param>
      <param name="expectedStartSample">
            The beginning sample of the expected DigitalWaveform to compare. 
            </param>
      <param name="sampleCount">
            The number of samples to compare.
            </param>
      <exception cref="T:System.ArgumentNullException">expectedWaveform (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startSample (parameter) is less than zero.
            
            -or-
            expectedStartSample (parameter) is less than zero.
            
            -or-
            sampleCount (parameter) is less than zero.
            
            -or-
            startSample (parameter) plus sampleCount (parameter) is greater than
            the digital waveform sample count.
            
            -or-
            expectedStartSample (parameter) plus sampleCount (parameter) is greater than
            the expectedWaveform (parameter) sample count.
            </exception>
      <exception cref="T:System.ArgumentException">
            The digital waveform and the expectedWaveform (parameter) signal counts are not equal.
            </exception>
      <returns>
            A DigitalWaveformTestResult containing the test results.
            </returns>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPorts(System.Byte[0:,0:])">
      <summary>
            Creates a DigitalWaveform array from a two-dimensional Byte array.
            </summary>
      <param name="samples">
            The two-dimensional Byte array of samples.
            </param>
      <returns>
            A DigitalWaveform array.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPorts(System.Byte[0:,0:],System.Byte[])">
      <summary>
            Creates a DigitalWaveform array from a two-dimensional Byte array with
            the specified mask array.
            </summary>
      <param name="samples">
            The two-dimensional Byte array of samples.
            </param>
      <param name="masks">
            The mask array used to specify which bits are used.
            </param>
      <returns>
            A DigitalWaveform array.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            
            -or-
            masks (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of rows in samples (parameter) is not equal to the length of masks (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPort(System.Byte[])">
      <summary>
            Creates a DigitalWaveform from a Byte array.
            </summary>
      <param name="samples">
            The Byte array of samples.
            </param>
      <returns>
            A DigitalWaveform.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPort(System.Byte[],System.Byte)">
      <summary>
            Creates a DigitalWaveform from a Byte array and a
            mask.
            </summary>
      <param name="samples">
            The Byte array of samples.
            </param>
      <param name="mask">
            The mask used to specify which bits are used.
            </param>
      <returns>
            A DigitalWaveform.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPorts(System.Int16[0:,0:])">
      <summary>
            Creates a DigitalWaveform array from a two-dimensional array of 16-bit integers.
            </summary>
      <param name="samples">
            The two-dimensional array of 16-bit integer samples.
            </param>
      <returns>
            A DigitalWaveform array.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPorts(System.Int16[0:,0:],System.Int16[])">
      <summary>
            Creates a DigitalWaveform array from a two-dimensional array of 16-bit integers with
            the specified mask array.
            </summary>
      <param name="samples">
            The two-dimensional array of 16-bit integer samples.
            </param>
      <param name="masks">
            The mask array used to specify which bits are used.
            </param>
      <returns>
            A DigitalWaveform array.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            
            -or-
            masks (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of rows in samples (parameter) is not equal to the length of masks (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPort(System.Int16[])">
      <summary>
            Creates a DigitalWaveform from an array of 16-bit integers.
            </summary>
      <param name="samples">
            The array of 16-bit integer samples.
            </param>
      <returns>
            A DigitalWaveform.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPort(System.Int16[],System.Int16)">
      <summary>
            Creates a DigitalWaveform from an array of 16-bit integers and a
            mask.
            </summary>
      <param name="samples">
            The array of 16-bit integer samples.
            </param>
      <param name="mask">
            The mask used to specify which bits are used.
            </param>
      <returns>
            A DigitalWaveform.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPorts(System.UInt16[0:,0:])">
      <summary>
            Creates a DigitalWaveform array from a two-dimensional array of 16-bit unsigned integers.
            </summary>
      <param name="samples">
            The two-dimensional array of 16-bit unsigned integer samples.
            </param>
      <returns>
            A DigitalWaveform array.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPorts(System.UInt16[0:,0:],System.UInt16[])">
      <summary>
            Creates a DigitalWaveform array from a two-dimensional array of 16-bit unsigned integers with
            the specified mask array.
            </summary>
      <param name="samples">
            The two-dimensional array of 16-bit unsigned integer samples.
            </param>
      <param name="masks">
            The mask array used to specify which bits are used.
            </param>
      <returns>
            A DigitalWaveform array.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            
            -or-
            masks (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of rows in samples (parameter) is not equal to the length of masks (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPort(System.UInt16[])">
      <summary>
            Creates a DigitalWaveform from an array of 16-bit unsigned integers.
            </summary>
      <param name="samples">
            The array of 16-bit unsigned integer samples.
            </param>
      <returns>
            A DigitalWaveform.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPort(System.UInt16[],System.UInt16)">
      <summary>
            Creates a DigitalWaveform from an array of 16-bit unsigned integers and a
            mask.
            </summary>
      <param name="samples">
            The array of 16-bit unsigned integer samples.
            </param>
      <param name="mask">
            The mask used to specify which bits are used.
            </param>
      <returns>
            A DigitalWaveform.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPorts(System.Int32[0:,0:])">
      <summary>
            Creates a DigitalWaveform array from a two-dimensional array of 32-bit integers.
            </summary>
      <param name="samples">
            The two-dimensional array of 32-bit integer samples.
            </param>
      <returns>
            A DigitalWaveform array.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPorts(System.Int32[0:,0:],System.Int32[])">
      <summary>
            Creates a DigitalWaveform array from a two-dimensional array of 32-bit integers with
            the specified mask array.
            </summary>
      <param name="samples">
            The two-dimensional array of 32-bit integer samples.
            </param>
      <param name="masks">
            The mask array used to specify which bits are used.
            </param>
      <returns>
            A DigitalWaveform array.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            
            -or-
            masks (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of rows in samples (parameter) is not equal to the length of masks (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPort(System.Int32[])">
      <summary>
            Creates a DigitalWaveform from an array of 32-bit integers.
            </summary>
      <param name="samples">
            The array of 32-bit integer samples.
            </param>
      <returns>
            A DigitalWaveform.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPort(System.Int32[],System.Int32)">
      <summary>
            Creates a DigitalWaveform from an array of 32-bit integers and a
            mask.
            </summary>
      <param name="samples">
            The array of 32-bit integer samples.
            </param>
      <param name="mask">
            The mask used to specify which bits are used.
            </param>
      <returns>
            A DigitalWaveform.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPorts(System.UInt32[0:,0:])">
      <summary>
            Creates a DigitalWaveform array from a two-dimensional array of 32-bit unsigned integers.
            </summary>
      <param name="samples">
            The two-dimensional array of 32-bit unsigned integer samples.
            </param>
      <returns>
            A DigitalWaveform array.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPorts(System.UInt32[0:,0:],System.UInt32[])">
      <summary>
            Creates a DigitalWaveform array from a two-dimensional array of 32-bit unsigned integers with
            the specified mask array.
            </summary>
      <param name="samples">
            The two-dimensional array of 32-bit unsigned integer samples.
            </param>
      <param name="masks">
            The mask array used to specify which bits are used.
            </param>
      <returns>
            A DigitalWaveform array.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            
            -or-
            masks (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of rows in samples (parameter) is not equal to the length of masks (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPort(System.UInt32[])">
      <summary>
            Creates a DigitalWaveform from an array of 32-bit unsigned integers.
            </summary>
      <param name="samples">
            The array of 32-bit unsigned integer samples.
            </param>
      <returns>
            A DigitalWaveform.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.FromPort(System.UInt32[],System.UInt32)">
      <summary>
            Creates a DigitalWaveform from an array of 32-bit unsigned integers and a
            mask.
            </summary>
      <param name="samples">
            The array of 32-bit unsigned integer samples.
            </param>
      <param name="mask">
            The mask used to specify which bits are used.
            </param>
      <returns>
            A DigitalWaveform.
            </returns>
      <exception cref="T:System.ArgumentNullException">samples (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.GetTimeStamps">
      <summary>
            Retrieves the time stamps from Timing.
            </summary>
      <returns>
            A DateTime array of time stamps.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is None.
            
            -or-
            
            The SampleIntervalMode is Regular, and
            HasTimeStamp is false.
            	</exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.GetTimeStamps(System.Int32,System.Int32)">
      <summary>
            Retrieves the time stamps from Timing using the 
            specified sample index and count.
            </summary>
      <param name="sampleIndex">
            The beginning index of the digital waveform from which to get the time stamps.
            </param>
      <param name="count">
            The number of time stamps to return.
            </param>
      <returns>
            A DateTime array of time stamps.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is None.
            
            -or-
            
            The SampleIntervalMode is Regular, and
            HasTimeStamp is false.
            	</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            


            -or-
            

sampleIndex (parameter) is less than zero.
            


            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            



count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            

</exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.GetTimeStamps(System.Int32,System.Int32,System.DateTime[],System.Int32)">
      <summary>
            Retrieves the time stamps from Timing using the 
            specified sample index, count, and array index.
            </summary>
      <param name="sampleIndex">
            The beginning index of the digital waveform from which to get the time stamps.
            </param>
      <param name="count">
            The number of time stamps to copy into buffer (parameter).
            </param>
      <param name="buffer">
            The buffer to copy the time stamps into.
            </param>
      <param name="arrayIndex">
            The beginning index of buffer (parameter) to copy the time stamps into.
            </param>
      <exception cref="T:System.ArgumentNullException">buffer (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The SampleIntervalMode is None.
            
            -or-
            
            The SampleIntervalMode is Regular, and
            HasTimeStamp is false.
            	</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) is less than zero.
            
            -or-
            arrayIndex (parameter) is less than zero.
            
            -or-
            sampleIndex (parameter) plus count (parameter) is greater than the sample
            count.
            -or-
            arrayIndex (parameter) plus count (parameter) is greater than the buffer (parameter) length.
            </exception>
    </member>
    <member name="M:NationalInstruments.DigitalWaveform.System#IServiceProvider#GetService(System.Type)" />
    <member name="P:NationalInstruments.DigitalWaveform.Signals">
      <summary>
            Gets the signals of the digital waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.DigitalWaveform.Samples">
      <summary>
            Gets the samples of the digital waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.DigitalWaveform.Timing">
      <summary>
            Gets or sets the timing information of the digital waveform.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            	The specified value is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">SampleIntervalMode is Irregular.
            
            -or-
            
            The time stamp values are greater than MaxValue.
            </exception>
    </member>
    <member name="P:NationalInstruments.DigitalWaveform.ExtendedProperties">
      <summary>
            Gets the extended properties for the digital waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.DigitalWaveform.ChannelName">
      <summary>
            Gets or sets the name of the device channel from which the digital waveform was acquired.
            </summary>
    </member>
  </members>
</doc>