//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1318
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace RRLab.PhysiologyWorkbench.Data {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("PhysiologyDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class PhysiologyDataSet : global::System.Data.DataSet {
        
        private UsersDataTable tableUsers;
        
        private CellsDataTable tableCells;
        
        private GenotypesDataTable tableGenotypes;
        
        private RecordingsDataTable tableRecordings;
        
        private Recordings_DataDataTable tableRecordings_Data;
        
        private Recordings_MetaDataDataTable tableRecordings_MetaData;
        
        private Recordings_ProtocolSettingsDataTable tableRecordings_ProtocolSettings;
        
        private Recordings_EquipmentSettingsDataTable tableRecordings_EquipmentSettings;
        
        private Recordings_AnnotationsDataTable tableRecordings_Annotations;
        
        private Cells_AnnotationsDataTable tableCells_Annotations;
        
        private global::System.Data.DataRelation relationFK_Users_Cells;
        
        private global::System.Data.DataRelation relationFK_Genotypes_Cells;
        
        private global::System.Data.DataRelation relationFK_Cells_Recordings;
        
        private global::System.Data.DataRelation relationFK_Recordings_Recording_Data;
        
        private global::System.Data.DataRelation relationFK_Recordings_Recording_MetaData;
        
        private global::System.Data.DataRelation relationFK_Recordings_Recordings_ProtocolSettings;
        
        private global::System.Data.DataRelation relationRecordings_Recordings_EquipmentSettings;
        
        private global::System.Data.DataRelation relationFK_Recordings_Recordings_Annotations;
        
        private global::System.Data.DataRelation relationFK_Users_Recordings_Annotations;
        
        private global::System.Data.DataRelation relationFK_Cells_Cells_Annotations;
        
        private global::System.Data.DataRelation relationFK_Users_Cells_Annotations;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PhysiologyDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
            this.InitExpressions();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected PhysiologyDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Users"] != null)) {
                    base.Tables.Add(new UsersDataTable(ds.Tables["Users"]));
                }
                if ((ds.Tables["Cells"] != null)) {
                    base.Tables.Add(new CellsDataTable(ds.Tables["Cells"]));
                }
                if ((ds.Tables["Genotypes"] != null)) {
                    base.Tables.Add(new GenotypesDataTable(ds.Tables["Genotypes"]));
                }
                if ((ds.Tables["Recordings"] != null)) {
                    base.Tables.Add(new RecordingsDataTable(ds.Tables["Recordings"]));
                }
                if ((ds.Tables["Recordings_Data"] != null)) {
                    base.Tables.Add(new Recordings_DataDataTable(ds.Tables["Recordings_Data"]));
                }
                if ((ds.Tables["Recordings_MetaData"] != null)) {
                    base.Tables.Add(new Recordings_MetaDataDataTable(ds.Tables["Recordings_MetaData"]));
                }
                if ((ds.Tables["Recordings_ProtocolSettings"] != null)) {
                    base.Tables.Add(new Recordings_ProtocolSettingsDataTable(ds.Tables["Recordings_ProtocolSettings"]));
                }
                if ((ds.Tables["Recordings_EquipmentSettings"] != null)) {
                    base.Tables.Add(new Recordings_EquipmentSettingsDataTable(ds.Tables["Recordings_EquipmentSettings"]));
                }
                if ((ds.Tables["Recordings_Annotations"] != null)) {
                    base.Tables.Add(new Recordings_AnnotationsDataTable(ds.Tables["Recordings_Annotations"]));
                }
                if ((ds.Tables["Cells_Annotations"] != null)) {
                    base.Tables.Add(new Cells_AnnotationsDataTable(ds.Tables["Cells_Annotations"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                this.InitExpressions();
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UsersDataTable Users {
            get {
                return this.tableUsers;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CellsDataTable Cells {
            get {
                return this.tableCells;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GenotypesDataTable Genotypes {
            get {
                return this.tableGenotypes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RecordingsDataTable Recordings {
            get {
                return this.tableRecordings;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Recordings_DataDataTable Recordings_Data {
            get {
                return this.tableRecordings_Data;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Recordings_MetaDataDataTable Recordings_MetaData {
            get {
                return this.tableRecordings_MetaData;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Recordings_ProtocolSettingsDataTable Recordings_ProtocolSettings {
            get {
                return this.tableRecordings_ProtocolSettings;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Recordings_EquipmentSettingsDataTable Recordings_EquipmentSettings {
            get {
                return this.tableRecordings_EquipmentSettings;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Recordings_AnnotationsDataTable Recordings_Annotations {
            get {
                return this.tableRecordings_Annotations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Cells_AnnotationsDataTable Cells_Annotations {
            get {
                return this.tableCells_Annotations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            PhysiologyDataSet cln = ((PhysiologyDataSet)(base.Clone()));
            cln.InitVars();
            cln.InitExpressions();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Users"] != null)) {
                    base.Tables.Add(new UsersDataTable(ds.Tables["Users"]));
                }
                if ((ds.Tables["Cells"] != null)) {
                    base.Tables.Add(new CellsDataTable(ds.Tables["Cells"]));
                }
                if ((ds.Tables["Genotypes"] != null)) {
                    base.Tables.Add(new GenotypesDataTable(ds.Tables["Genotypes"]));
                }
                if ((ds.Tables["Recordings"] != null)) {
                    base.Tables.Add(new RecordingsDataTable(ds.Tables["Recordings"]));
                }
                if ((ds.Tables["Recordings_Data"] != null)) {
                    base.Tables.Add(new Recordings_DataDataTable(ds.Tables["Recordings_Data"]));
                }
                if ((ds.Tables["Recordings_MetaData"] != null)) {
                    base.Tables.Add(new Recordings_MetaDataDataTable(ds.Tables["Recordings_MetaData"]));
                }
                if ((ds.Tables["Recordings_ProtocolSettings"] != null)) {
                    base.Tables.Add(new Recordings_ProtocolSettingsDataTable(ds.Tables["Recordings_ProtocolSettings"]));
                }
                if ((ds.Tables["Recordings_EquipmentSettings"] != null)) {
                    base.Tables.Add(new Recordings_EquipmentSettingsDataTable(ds.Tables["Recordings_EquipmentSettings"]));
                }
                if ((ds.Tables["Recordings_Annotations"] != null)) {
                    base.Tables.Add(new Recordings_AnnotationsDataTable(ds.Tables["Recordings_Annotations"]));
                }
                if ((ds.Tables["Cells_Annotations"] != null)) {
                    base.Tables.Add(new Cells_AnnotationsDataTable(ds.Tables["Cells_Annotations"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableUsers = ((UsersDataTable)(base.Tables["Users"]));
            if ((initTable == true)) {
                if ((this.tableUsers != null)) {
                    this.tableUsers.InitVars();
                }
            }
            this.tableCells = ((CellsDataTable)(base.Tables["Cells"]));
            if ((initTable == true)) {
                if ((this.tableCells != null)) {
                    this.tableCells.InitVars();
                }
            }
            this.tableGenotypes = ((GenotypesDataTable)(base.Tables["Genotypes"]));
            if ((initTable == true)) {
                if ((this.tableGenotypes != null)) {
                    this.tableGenotypes.InitVars();
                }
            }
            this.tableRecordings = ((RecordingsDataTable)(base.Tables["Recordings"]));
            if ((initTable == true)) {
                if ((this.tableRecordings != null)) {
                    this.tableRecordings.InitVars();
                }
            }
            this.tableRecordings_Data = ((Recordings_DataDataTable)(base.Tables["Recordings_Data"]));
            if ((initTable == true)) {
                if ((this.tableRecordings_Data != null)) {
                    this.tableRecordings_Data.InitVars();
                }
            }
            this.tableRecordings_MetaData = ((Recordings_MetaDataDataTable)(base.Tables["Recordings_MetaData"]));
            if ((initTable == true)) {
                if ((this.tableRecordings_MetaData != null)) {
                    this.tableRecordings_MetaData.InitVars();
                }
            }
            this.tableRecordings_ProtocolSettings = ((Recordings_ProtocolSettingsDataTable)(base.Tables["Recordings_ProtocolSettings"]));
            if ((initTable == true)) {
                if ((this.tableRecordings_ProtocolSettings != null)) {
                    this.tableRecordings_ProtocolSettings.InitVars();
                }
            }
            this.tableRecordings_EquipmentSettings = ((Recordings_EquipmentSettingsDataTable)(base.Tables["Recordings_EquipmentSettings"]));
            if ((initTable == true)) {
                if ((this.tableRecordings_EquipmentSettings != null)) {
                    this.tableRecordings_EquipmentSettings.InitVars();
                }
            }
            this.tableRecordings_Annotations = ((Recordings_AnnotationsDataTable)(base.Tables["Recordings_Annotations"]));
            if ((initTable == true)) {
                if ((this.tableRecordings_Annotations != null)) {
                    this.tableRecordings_Annotations.InitVars();
                }
            }
            this.tableCells_Annotations = ((Cells_AnnotationsDataTable)(base.Tables["Cells_Annotations"]));
            if ((initTable == true)) {
                if ((this.tableCells_Annotations != null)) {
                    this.tableCells_Annotations.InitVars();
                }
            }
            this.relationFK_Users_Cells = this.Relations["FK_Users_Cells"];
            this.relationFK_Genotypes_Cells = this.Relations["FK_Genotypes_Cells"];
            this.relationFK_Cells_Recordings = this.Relations["FK_Cells_Recordings"];
            this.relationFK_Recordings_Recording_Data = this.Relations["FK_Recordings_Recording_Data"];
            this.relationFK_Recordings_Recording_MetaData = this.Relations["FK_Recordings_Recording_MetaData"];
            this.relationFK_Recordings_Recordings_ProtocolSettings = this.Relations["FK_Recordings_Recordings_ProtocolSettings"];
            this.relationRecordings_Recordings_EquipmentSettings = this.Relations["Recordings_Recordings_EquipmentSettings"];
            this.relationFK_Recordings_Recordings_Annotations = this.Relations["FK_Recordings_Recordings_Annotations"];
            this.relationFK_Users_Recordings_Annotations = this.Relations["FK_Users_Recordings_Annotations"];
            this.relationFK_Cells_Cells_Annotations = this.Relations["FK_Cells_Cells_Annotations"];
            this.relationFK_Users_Cells_Annotations = this.Relations["FK_Users_Cells_Annotations"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "PhysiologyDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/PhysiologyDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableUsers = new UsersDataTable();
            base.Tables.Add(this.tableUsers);
            this.tableCells = new CellsDataTable(false);
            base.Tables.Add(this.tableCells);
            this.tableGenotypes = new GenotypesDataTable();
            base.Tables.Add(this.tableGenotypes);
            this.tableRecordings = new RecordingsDataTable();
            base.Tables.Add(this.tableRecordings);
            this.tableRecordings_Data = new Recordings_DataDataTable();
            base.Tables.Add(this.tableRecordings_Data);
            this.tableRecordings_MetaData = new Recordings_MetaDataDataTable();
            base.Tables.Add(this.tableRecordings_MetaData);
            this.tableRecordings_ProtocolSettings = new Recordings_ProtocolSettingsDataTable();
            base.Tables.Add(this.tableRecordings_ProtocolSettings);
            this.tableRecordings_EquipmentSettings = new Recordings_EquipmentSettingsDataTable();
            base.Tables.Add(this.tableRecordings_EquipmentSettings);
            this.tableRecordings_Annotations = new Recordings_AnnotationsDataTable();
            base.Tables.Add(this.tableRecordings_Annotations);
            this.tableCells_Annotations = new Cells_AnnotationsDataTable();
            base.Tables.Add(this.tableCells_Annotations);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_Users_Cells", new global::System.Data.DataColumn[] {
                        this.tableUsers.UserIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableCells.UserIDColumn});
            this.tableCells.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_Genotypes_Cells", new global::System.Data.DataColumn[] {
                        this.tableGenotypes.FlyStockIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableCells.FlyStockIDColumn});
            this.tableCells.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_Cells_Recordings", new global::System.Data.DataColumn[] {
                        this.tableCells.CellIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableRecordings.CellIDColumn});
            this.tableRecordings.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_Recordings_Recording_Data", new global::System.Data.DataColumn[] {
                        this.tableRecordings.RecordingIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableRecordings_Data.RecordingIDColumn});
            this.tableRecordings_Data.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_Recordings_Recording_MetaData", new global::System.Data.DataColumn[] {
                        this.tableRecordings.RecordingIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableRecordings_MetaData.RecordingIDColumn});
            this.tableRecordings_MetaData.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_Recordings_Recordings_ProtocolSettings", new global::System.Data.DataColumn[] {
                        this.tableRecordings.RecordingIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableRecordings_ProtocolSettings.RecordingIDColumn});
            this.tableRecordings_ProtocolSettings.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Recordings_Recordings_EquipmentSettings", new global::System.Data.DataColumn[] {
                        this.tableRecordings.RecordingIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableRecordings_EquipmentSettings.RecordingIDColumn});
            this.tableRecordings_EquipmentSettings.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_Recordings_Recordings_Annotations", new global::System.Data.DataColumn[] {
                        this.tableRecordings.RecordingIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableRecordings_Annotations.RecordingIDColumn});
            this.tableRecordings_Annotations.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_Users_Recordings_Annotations", new global::System.Data.DataColumn[] {
                        this.tableUsers.UserIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableRecordings_Annotations.UserIDColumn});
            this.tableRecordings_Annotations.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_Cells_Cells_Annotations", new global::System.Data.DataColumn[] {
                        this.tableCells.CellIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableCells_Annotations.CellIDColumn});
            this.tableCells_Annotations.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_Users_Cells_Annotations", new global::System.Data.DataColumn[] {
                        this.tableUsers.UserIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableCells_Annotations.UserIDColumn});
            this.tableCells_Annotations.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationFK_Users_Cells = new global::System.Data.DataRelation("FK_Users_Cells", new global::System.Data.DataColumn[] {
                        this.tableUsers.UserIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableCells.UserIDColumn}, false);
            this.Relations.Add(this.relationFK_Users_Cells);
            this.relationFK_Genotypes_Cells = new global::System.Data.DataRelation("FK_Genotypes_Cells", new global::System.Data.DataColumn[] {
                        this.tableGenotypes.FlyStockIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableCells.FlyStockIDColumn}, false);
            this.Relations.Add(this.relationFK_Genotypes_Cells);
            this.relationFK_Cells_Recordings = new global::System.Data.DataRelation("FK_Cells_Recordings", new global::System.Data.DataColumn[] {
                        this.tableCells.CellIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableRecordings.CellIDColumn}, false);
            this.Relations.Add(this.relationFK_Cells_Recordings);
            this.relationFK_Recordings_Recording_Data = new global::System.Data.DataRelation("FK_Recordings_Recording_Data", new global::System.Data.DataColumn[] {
                        this.tableRecordings.RecordingIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableRecordings_Data.RecordingIDColumn}, false);
            this.Relations.Add(this.relationFK_Recordings_Recording_Data);
            this.relationFK_Recordings_Recording_MetaData = new global::System.Data.DataRelation("FK_Recordings_Recording_MetaData", new global::System.Data.DataColumn[] {
                        this.tableRecordings.RecordingIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableRecordings_MetaData.RecordingIDColumn}, false);
            this.Relations.Add(this.relationFK_Recordings_Recording_MetaData);
            this.relationFK_Recordings_Recordings_ProtocolSettings = new global::System.Data.DataRelation("FK_Recordings_Recordings_ProtocolSettings", new global::System.Data.DataColumn[] {
                        this.tableRecordings.RecordingIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableRecordings_ProtocolSettings.RecordingIDColumn}, false);
            this.Relations.Add(this.relationFK_Recordings_Recordings_ProtocolSettings);
            this.relationRecordings_Recordings_EquipmentSettings = new global::System.Data.DataRelation("Recordings_Recordings_EquipmentSettings", new global::System.Data.DataColumn[] {
                        this.tableRecordings.RecordingIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableRecordings_EquipmentSettings.RecordingIDColumn}, false);
            this.Relations.Add(this.relationRecordings_Recordings_EquipmentSettings);
            this.relationFK_Recordings_Recordings_Annotations = new global::System.Data.DataRelation("FK_Recordings_Recordings_Annotations", new global::System.Data.DataColumn[] {
                        this.tableRecordings.RecordingIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableRecordings_Annotations.RecordingIDColumn}, false);
            this.Relations.Add(this.relationFK_Recordings_Recordings_Annotations);
            this.relationFK_Users_Recordings_Annotations = new global::System.Data.DataRelation("FK_Users_Recordings_Annotations", new global::System.Data.DataColumn[] {
                        this.tableUsers.UserIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableRecordings_Annotations.UserIDColumn}, false);
            this.Relations.Add(this.relationFK_Users_Recordings_Annotations);
            this.relationFK_Cells_Cells_Annotations = new global::System.Data.DataRelation("FK_Cells_Cells_Annotations", new global::System.Data.DataColumn[] {
                        this.tableCells.CellIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableCells_Annotations.CellIDColumn}, false);
            this.Relations.Add(this.relationFK_Cells_Cells_Annotations);
            this.relationFK_Users_Cells_Annotations = new global::System.Data.DataRelation("FK_Users_Cells_Annotations", new global::System.Data.DataColumn[] {
                        this.tableUsers.UserIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableCells_Annotations.UserIDColumn}, false);
            this.Relations.Add(this.relationFK_Users_Cells_Annotations);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUsers() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCells() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGenotypes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRecordings() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRecordings_Data() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRecordings_MetaData() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRecordings_ProtocolSettings() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRecordings_EquipmentSettings() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRecordings_Annotations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCells_Annotations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            PhysiologyDataSet ds = new PhysiologyDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitExpressions() {
            this.Cells.AppearanceScoreColumn.Expression = "(RoughAppearanceRating+LengthAppearanceRating+ShapeAppearanceRating)/3";
            this.Cells.NumberOfRecordingsColumn.Expression = "Count(Child(FK_Cells_Recordings).RecordingID)";
        }
        
        public delegate void UsersRowChangeEventHandler(object sender, UsersRowChangeEvent e);
        
        public delegate void CellsRowChangeEventHandler(object sender, CellsRowChangeEvent e);
        
        public delegate void GenotypesRowChangeEventHandler(object sender, GenotypesRowChangeEvent e);
        
        public delegate void RecordingsRowChangeEventHandler(object sender, RecordingsRowChangeEvent e);
        
        public delegate void Recordings_DataRowChangeEventHandler(object sender, Recordings_DataRowChangeEvent e);
        
        public delegate void Recordings_MetaDataRowChangeEventHandler(object sender, Recordings_MetaDataRowChangeEvent e);
        
        public delegate void Recordings_ProtocolSettingsRowChangeEventHandler(object sender, Recordings_ProtocolSettingsRowChangeEvent e);
        
        public delegate void Recordings_EquipmentSettingsRowChangeEventHandler(object sender, Recordings_EquipmentSettingsRowChangeEvent e);
        
        public delegate void Recordings_AnnotationsRowChangeEventHandler(object sender, Recordings_AnnotationsRowChangeEvent e);
        
        public delegate void Cells_AnnotationsRowChangeEventHandler(object sender, Cells_AnnotationsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UsersDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersDataTable() {
                this.TableName = "Users";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UsersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UsersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow this[int index] {
                get {
                    return ((UsersRow)(this.Rows[index]));
                }
            }
            
            public event UsersRowChangeEventHandler UsersRowChanging;
            
            public event UsersRowChangeEventHandler UsersRowChanged;
            
            public event UsersRowChangeEventHandler UsersRowDeleting;
            
            public event UsersRowChangeEventHandler UsersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUsersRow(UsersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow AddUsersRow(string Name) {
                UsersRow rowUsersRow = ((UsersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name};
                rowUsersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUsersRow);
                return rowUsersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow FindByUserID(short UserID) {
                return ((UsersRow)(this.Rows.Find(new object[] {
                            UserID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UsersDataTable cln = ((UsersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UsersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserID = base.Columns["UserID"];
                this.columnName = base.Columns["Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUserID}, true));
                this.columnUserID.AutoIncrement = true;
                this.columnUserID.AutoIncrementStep = -1;
                this.columnUserID.AllowDBNull = false;
                this.columnUserID.Unique = true;
                this.columnName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow NewUsersRow() {
                return ((UsersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UsersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UsersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UsersRowChanged != null)) {
                    this.UsersRowChanged(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UsersRowChanging != null)) {
                    this.UsersRowChanging(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UsersRowDeleted != null)) {
                    this.UsersRowDeleted(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UsersRowDeleting != null)) {
                    this.UsersRowDeleting(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUsersRow(UsersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PhysiologyDataSet ds = new PhysiologyDataSet();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UsersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CellsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCellID;
            
            private global::System.Data.DataColumn columnFlyStockID;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnCreated;
            
            private global::System.Data.DataColumn columnPipetteResistance;
            
            private global::System.Data.DataColumn columnSealResistance;
            
            private global::System.Data.DataColumn columnCellCapacitance;
            
            private global::System.Data.DataColumn columnSeriesResistance;
            
            private global::System.Data.DataColumn columnMembraneResistance;
            
            private global::System.Data.DataColumn columnMembranePotential;
            
            private global::System.Data.DataColumn columnBreakInTime;
            
            private global::System.Data.DataColumn columnRoughAppearanceRating;
            
            private global::System.Data.DataColumn columnLengthAppearanceRating;
            
            private global::System.Data.DataColumn columnShapeAppearanceRating;
            
            private global::System.Data.DataColumn columnAppearanceScore;
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnNumberOfRecordings;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CellsDataTable() : 
                    this(false) {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CellsDataTable(bool initExpressions) {
                this.TableName = "Cells";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CellsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CellsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CellIDColumn {
                get {
                    return this.columnCellID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlyStockIDColumn {
                get {
                    return this.columnFlyStockID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedColumn {
                get {
                    return this.columnCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PipetteResistanceColumn {
                get {
                    return this.columnPipetteResistance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SealResistanceColumn {
                get {
                    return this.columnSealResistance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CellCapacitanceColumn {
                get {
                    return this.columnCellCapacitance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SeriesResistanceColumn {
                get {
                    return this.columnSeriesResistance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MembraneResistanceColumn {
                get {
                    return this.columnMembraneResistance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MembranePotentialColumn {
                get {
                    return this.columnMembranePotential;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BreakInTimeColumn {
                get {
                    return this.columnBreakInTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RoughAppearanceRatingColumn {
                get {
                    return this.columnRoughAppearanceRating;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LengthAppearanceRatingColumn {
                get {
                    return this.columnLengthAppearanceRating;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShapeAppearanceRatingColumn {
                get {
                    return this.columnShapeAppearanceRating;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AppearanceScoreColumn {
                get {
                    return this.columnAppearanceScore;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumberOfRecordingsColumn {
                get {
                    return this.columnNumberOfRecordings;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CellsRow this[int index] {
                get {
                    return ((CellsRow)(this.Rows[index]));
                }
            }
            
            public event CellsRowChangeEventHandler CellsRowChanging;
            
            public event CellsRowChangeEventHandler CellsRowChanged;
            
            public event CellsRowChangeEventHandler CellsRowDeleting;
            
            public event CellsRowChangeEventHandler CellsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCellsRow(CellsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CellsRow AddCellsRow(
                        GenotypesRow parentGenotypesRowByFK_Genotypes_Cells, 
                        string Description, 
                        System.DateTime Created, 
                        float PipetteResistance, 
                        float SealResistance, 
                        float CellCapacitance, 
                        float SeriesResistance, 
                        float MembraneResistance, 
                        short MembranePotential, 
                        System.DateTime BreakInTime, 
                        ushort RoughAppearanceRating, 
                        ushort LengthAppearanceRating, 
                        ushort ShapeAppearanceRating, 
                        ushort AppearanceScore, 
                        UsersRow parentUsersRowByFK_Users_Cells, 
                        ushort NumberOfRecordings) {
                CellsRow rowCellsRow = ((CellsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        Description,
                        Created,
                        PipetteResistance,
                        SealResistance,
                        CellCapacitance,
                        SeriesResistance,
                        MembraneResistance,
                        MembranePotential,
                        BreakInTime,
                        RoughAppearanceRating,
                        LengthAppearanceRating,
                        ShapeAppearanceRating,
                        AppearanceScore,
                        null,
                        NumberOfRecordings};
                if ((parentGenotypesRowByFK_Genotypes_Cells != null)) {
                    columnValuesArray[1] = parentGenotypesRowByFK_Genotypes_Cells[0];
                }
                if ((parentUsersRowByFK_Users_Cells != null)) {
                    columnValuesArray[15] = parentUsersRowByFK_Users_Cells[0];
                }
                rowCellsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCellsRow);
                return rowCellsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CellsRow AddCellsRow(GenotypesRow parentGenotypesRowByFK_Genotypes_Cells, string Description, System.DateTime Created, float PipetteResistance, float SealResistance, float CellCapacitance, float SeriesResistance, float MembraneResistance, short MembranePotential, System.DateTime BreakInTime, ushort RoughAppearanceRating, ushort LengthAppearanceRating, ushort ShapeAppearanceRating, UsersRow parentUsersRowByFK_Users_Cells) {
                CellsRow rowCellsRow = ((CellsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        Description,
                        Created,
                        PipetteResistance,
                        SealResistance,
                        CellCapacitance,
                        SeriesResistance,
                        MembraneResistance,
                        MembranePotential,
                        BreakInTime,
                        RoughAppearanceRating,
                        LengthAppearanceRating,
                        ShapeAppearanceRating,
                        null,
                        null,
                        null};
                if ((parentGenotypesRowByFK_Genotypes_Cells != null)) {
                    columnValuesArray[1] = parentGenotypesRowByFK_Genotypes_Cells[0];
                }
                if ((parentUsersRowByFK_Users_Cells != null)) {
                    columnValuesArray[15] = parentUsersRowByFK_Users_Cells[0];
                }
                rowCellsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCellsRow);
                return rowCellsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CellsRow FindByCellID(int CellID) {
                return ((CellsRow)(this.Rows.Find(new object[] {
                            CellID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CellsDataTable cln = ((CellsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CellsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCellID = base.Columns["CellID"];
                this.columnFlyStockID = base.Columns["FlyStockID"];
                this.columnDescription = base.Columns["Description"];
                this.columnCreated = base.Columns["Created"];
                this.columnPipetteResistance = base.Columns["PipetteResistance"];
                this.columnSealResistance = base.Columns["SealResistance"];
                this.columnCellCapacitance = base.Columns["CellCapacitance"];
                this.columnSeriesResistance = base.Columns["SeriesResistance"];
                this.columnMembraneResistance = base.Columns["MembraneResistance"];
                this.columnMembranePotential = base.Columns["MembranePotential"];
                this.columnBreakInTime = base.Columns["BreakInTime"];
                this.columnRoughAppearanceRating = base.Columns["RoughAppearanceRating"];
                this.columnLengthAppearanceRating = base.Columns["LengthAppearanceRating"];
                this.columnShapeAppearanceRating = base.Columns["ShapeAppearanceRating"];
                this.columnAppearanceScore = base.Columns["AppearanceScore"];
                this.columnUserID = base.Columns["UserID"];
                this.columnNumberOfRecordings = base.Columns["NumberOfRecordings"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCellID = new global::System.Data.DataColumn("CellID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCellID);
                this.columnFlyStockID = new global::System.Data.DataColumn("FlyStockID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlyStockID);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnCreated = new global::System.Data.DataColumn("Created", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreated);
                this.columnPipetteResistance = new global::System.Data.DataColumn("PipetteResistance", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipetteResistance);
                this.columnSealResistance = new global::System.Data.DataColumn("SealResistance", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSealResistance);
                this.columnCellCapacitance = new global::System.Data.DataColumn("CellCapacitance", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCellCapacitance);
                this.columnSeriesResistance = new global::System.Data.DataColumn("SeriesResistance", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeriesResistance);
                this.columnMembraneResistance = new global::System.Data.DataColumn("MembraneResistance", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMembraneResistance);
                this.columnMembranePotential = new global::System.Data.DataColumn("MembranePotential", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMembranePotential);
                this.columnBreakInTime = new global::System.Data.DataColumn("BreakInTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreakInTime);
                this.columnRoughAppearanceRating = new global::System.Data.DataColumn("RoughAppearanceRating", typeof(ushort), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRoughAppearanceRating);
                this.columnLengthAppearanceRating = new global::System.Data.DataColumn("LengthAppearanceRating", typeof(ushort), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLengthAppearanceRating);
                this.columnShapeAppearanceRating = new global::System.Data.DataColumn("ShapeAppearanceRating", typeof(ushort), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShapeAppearanceRating);
                this.columnAppearanceScore = new global::System.Data.DataColumn("AppearanceScore", typeof(ushort), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAppearanceScore);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnNumberOfRecordings = new global::System.Data.DataColumn("NumberOfRecordings", typeof(ushort), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumberOfRecordings);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCellID}, true));
                this.columnCellID.AutoIncrement = true;
                this.columnCellID.AutoIncrementStep = -1;
                this.columnCellID.AllowDBNull = false;
                this.columnCellID.Unique = true;
                this.columnFlyStockID.AllowDBNull = false;
                this.columnCreated.AllowDBNull = false;
                this.columnCreated.Caption = "Date Created";
                this.columnCreated.DateTimeMode = global::System.Data.DataSetDateTime.Local;
                this.columnPipetteResistance.Caption = "Pipette Resistance (MOhm)";
                this.columnSealResistance.Caption = "Seal Resistance (GOhm)";
                this.columnCellCapacitance.Caption = "Cell Capacitance (pF)";
                this.columnSeriesResistance.Caption = "Series Resistance (MOhm)";
                this.columnMembraneResistance.Caption = "Membrane Resistance (MOhm)";
                this.columnMembranePotential.Caption = "Membrane Potential (mV)";
                this.columnBreakInTime.Caption = "Break-In Time";
                this.columnBreakInTime.DateTimeMode = global::System.Data.DataSetDateTime.Local;
                this.columnRoughAppearanceRating.Caption = "Roughness";
                this.columnLengthAppearanceRating.Caption = "Shortness";
                this.columnShapeAppearanceRating.Caption = "Blebbiness";
                this.columnAppearanceScore.ReadOnly = true;
                this.columnAppearanceScore.Caption = "Overall Appearance Rating";
                this.columnUserID.AllowDBNull = false;
                this.columnNumberOfRecordings.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CellsRow NewCellsRow() {
                return ((CellsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CellsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CellsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.AppearanceScoreColumn.Expression = "(RoughAppearanceRating+LengthAppearanceRating+ShapeAppearanceRating)/3";
                this.NumberOfRecordingsColumn.Expression = "Count(Child(FK_Cells_Recordings).RecordingID)";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CellsRowChanged != null)) {
                    this.CellsRowChanged(this, new CellsRowChangeEvent(((CellsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CellsRowChanging != null)) {
                    this.CellsRowChanging(this, new CellsRowChangeEvent(((CellsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CellsRowDeleted != null)) {
                    this.CellsRowDeleted(this, new CellsRowChangeEvent(((CellsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CellsRowDeleting != null)) {
                    this.CellsRowDeleting(this, new CellsRowChangeEvent(((CellsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCellsRow(CellsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PhysiologyDataSet ds = new PhysiologyDataSet();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CellsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GenotypesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFlyStockID;
            
            private global::System.Data.DataColumn columnGenotype;
            
            private global::System.Data.DataColumn columnNotes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GenotypesDataTable() {
                this.TableName = "Genotypes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GenotypesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GenotypesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlyStockIDColumn {
                get {
                    return this.columnFlyStockID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GenotypeColumn {
                get {
                    return this.columnGenotype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotesColumn {
                get {
                    return this.columnNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GenotypesRow this[int index] {
                get {
                    return ((GenotypesRow)(this.Rows[index]));
                }
            }
            
            public event GenotypesRowChangeEventHandler GenotypesRowChanging;
            
            public event GenotypesRowChangeEventHandler GenotypesRowChanged;
            
            public event GenotypesRowChangeEventHandler GenotypesRowDeleting;
            
            public event GenotypesRowChangeEventHandler GenotypesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGenotypesRow(GenotypesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GenotypesRow AddGenotypesRow(string Genotype, string Notes) {
                GenotypesRow rowGenotypesRow = ((GenotypesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Genotype,
                        Notes};
                rowGenotypesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGenotypesRow);
                return rowGenotypesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GenotypesRow FindByFlyStockID(int FlyStockID) {
                return ((GenotypesRow)(this.Rows.Find(new object[] {
                            FlyStockID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GenotypesDataTable cln = ((GenotypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GenotypesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFlyStockID = base.Columns["FlyStockID"];
                this.columnGenotype = base.Columns["Genotype"];
                this.columnNotes = base.Columns["Notes"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFlyStockID = new global::System.Data.DataColumn("FlyStockID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlyStockID);
                this.columnGenotype = new global::System.Data.DataColumn("Genotype", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGenotype);
                this.columnNotes = new global::System.Data.DataColumn("Notes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnFlyStockID}, true));
                this.columnFlyStockID.AutoIncrement = true;
                this.columnFlyStockID.AutoIncrementStep = -1;
                this.columnFlyStockID.AllowDBNull = false;
                this.columnFlyStockID.Unique = true;
                this.columnGenotype.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GenotypesRow NewGenotypesRow() {
                return ((GenotypesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GenotypesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GenotypesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GenotypesRowChanged != null)) {
                    this.GenotypesRowChanged(this, new GenotypesRowChangeEvent(((GenotypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GenotypesRowChanging != null)) {
                    this.GenotypesRowChanging(this, new GenotypesRowChangeEvent(((GenotypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GenotypesRowDeleted != null)) {
                    this.GenotypesRowDeleted(this, new GenotypesRowChangeEvent(((GenotypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GenotypesRowDeleting != null)) {
                    this.GenotypesRowDeleting(this, new GenotypesRowChangeEvent(((GenotypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGenotypesRow(GenotypesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PhysiologyDataSet ds = new PhysiologyDataSet();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GenotypesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RecordingsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRecordingID;
            
            private global::System.Data.DataColumn columnCellID;
            
            private global::System.Data.DataColumn columnTitle;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnRecorded;
            
            private global::System.Data.DataColumn columnHoldingPotential;
            
            private global::System.Data.DataColumn columnBathSolution;
            
            private global::System.Data.DataColumn columnPipetteSolution;
            
            private global::System.Data.DataColumn columnTimeSinceBreakIn;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingsDataTable() {
                this.TableName = "Recordings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RecordingsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RecordingsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecordingIDColumn {
                get {
                    return this.columnRecordingID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CellIDColumn {
                get {
                    return this.columnCellID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecordedColumn {
                get {
                    return this.columnRecorded;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HoldingPotentialColumn {
                get {
                    return this.columnHoldingPotential;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BathSolutionColumn {
                get {
                    return this.columnBathSolution;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PipetteSolutionColumn {
                get {
                    return this.columnPipetteSolution;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeSinceBreakInColumn {
                get {
                    return this.columnTimeSinceBreakIn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingsRow this[int index] {
                get {
                    return ((RecordingsRow)(this.Rows[index]));
                }
            }
            
            public event RecordingsRowChangeEventHandler RecordingsRowChanging;
            
            public event RecordingsRowChangeEventHandler RecordingsRowChanged;
            
            public event RecordingsRowChangeEventHandler RecordingsRowDeleting;
            
            public event RecordingsRowChangeEventHandler RecordingsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRecordingsRow(RecordingsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingsRow AddRecordingsRow(CellsRow parentCellsRowByFK_Cells_Recordings, string Title, string Description, System.DateTime Recorded, short HoldingPotential, string BathSolution, string PipetteSolution, System.TimeSpan TimeSinceBreakIn) {
                RecordingsRow rowRecordingsRow = ((RecordingsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        Title,
                        Description,
                        Recorded,
                        HoldingPotential,
                        BathSolution,
                        PipetteSolution,
                        TimeSinceBreakIn};
                if ((parentCellsRowByFK_Cells_Recordings != null)) {
                    columnValuesArray[1] = parentCellsRowByFK_Cells_Recordings[0];
                }
                rowRecordingsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRecordingsRow);
                return rowRecordingsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingsRow FindByRecordingID(long RecordingID) {
                return ((RecordingsRow)(this.Rows.Find(new object[] {
                            RecordingID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RecordingsDataTable cln = ((RecordingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RecordingsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRecordingID = base.Columns["RecordingID"];
                this.columnCellID = base.Columns["CellID"];
                this.columnTitle = base.Columns["Title"];
                this.columnDescription = base.Columns["Description"];
                this.columnRecorded = base.Columns["Recorded"];
                this.columnHoldingPotential = base.Columns["HoldingPotential"];
                this.columnBathSolution = base.Columns["BathSolution"];
                this.columnPipetteSolution = base.Columns["PipetteSolution"];
                this.columnTimeSinceBreakIn = base.Columns["TimeSinceBreakIn"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRecordingID = new global::System.Data.DataColumn("RecordingID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecordingID);
                this.columnCellID = new global::System.Data.DataColumn("CellID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCellID);
                this.columnTitle = new global::System.Data.DataColumn("Title", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnRecorded = new global::System.Data.DataColumn("Recorded", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecorded);
                this.columnHoldingPotential = new global::System.Data.DataColumn("HoldingPotential", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHoldingPotential);
                this.columnBathSolution = new global::System.Data.DataColumn("BathSolution", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBathSolution);
                this.columnPipetteSolution = new global::System.Data.DataColumn("PipetteSolution", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipetteSolution);
                this.columnTimeSinceBreakIn = new global::System.Data.DataColumn("TimeSinceBreakIn", typeof(global::System.TimeSpan), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeSinceBreakIn);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRecordingID}, true));
                this.columnRecordingID.AutoIncrement = true;
                this.columnRecordingID.AutoIncrementStep = -1;
                this.columnRecordingID.AllowDBNull = false;
                this.columnRecordingID.Unique = true;
                this.columnCellID.AllowDBNull = false;
                this.columnRecorded.AllowDBNull = false;
                this.columnRecorded.DateTimeMode = global::System.Data.DataSetDateTime.Local;
                this.columnHoldingPotential.Caption = "Holding Potential (mV)";
                this.columnBathSolution.AllowDBNull = false;
                this.columnBathSolution.Caption = "Bath Solution";
                this.columnPipetteSolution.Caption = "Pipette Solution";
                this.columnTimeSinceBreakIn.Caption = "Time Since Break-In";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingsRow NewRecordingsRow() {
                return ((RecordingsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RecordingsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RecordingsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RecordingsRowChanged != null)) {
                    this.RecordingsRowChanged(this, new RecordingsRowChangeEvent(((RecordingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RecordingsRowChanging != null)) {
                    this.RecordingsRowChanging(this, new RecordingsRowChangeEvent(((RecordingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RecordingsRowDeleted != null)) {
                    this.RecordingsRowDeleted(this, new RecordingsRowChangeEvent(((RecordingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RecordingsRowDeleting != null)) {
                    this.RecordingsRowDeleting(this, new RecordingsRowChangeEvent(((RecordingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRecordingsRow(RecordingsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PhysiologyDataSet ds = new PhysiologyDataSet();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RecordingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Recordings_DataDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDataPointID;
            
            private global::System.Data.DataColumn columnRecordingID;
            
            private global::System.Data.DataColumn columnDataName;
            
            private global::System.Data.DataColumn columnTime;
            
            private global::System.Data.DataColumn columnValue;
            
            private global::System.Data.DataColumn columnUnits;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_DataDataTable() {
                this.TableName = "Recordings_Data";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Recordings_DataDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Recordings_DataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataPointIDColumn {
                get {
                    return this.columnDataPointID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecordingIDColumn {
                get {
                    return this.columnRecordingID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataNameColumn {
                get {
                    return this.columnDataName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeColumn {
                get {
                    return this.columnTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitsColumn {
                get {
                    return this.columnUnits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_DataRow this[int index] {
                get {
                    return ((Recordings_DataRow)(this.Rows[index]));
                }
            }
            
            public event Recordings_DataRowChangeEventHandler Recordings_DataRowChanging;
            
            public event Recordings_DataRowChangeEventHandler Recordings_DataRowChanged;
            
            public event Recordings_DataRowChangeEventHandler Recordings_DataRowDeleting;
            
            public event Recordings_DataRowChangeEventHandler Recordings_DataRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRecordings_DataRow(Recordings_DataRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_DataRow AddRecordings_DataRow(RecordingsRow parentRecordingsRowByFK_Recordings_Recording_Data, string DataName, float Time, double Value, string Units) {
                Recordings_DataRow rowRecordings_DataRow = ((Recordings_DataRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        DataName,
                        Time,
                        Value,
                        Units};
                if ((parentRecordingsRowByFK_Recordings_Recording_Data != null)) {
                    columnValuesArray[1] = parentRecordingsRowByFK_Recordings_Recording_Data[0];
                }
                rowRecordings_DataRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRecordings_DataRow);
                return rowRecordings_DataRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_DataRow FindByDataPointID(long DataPointID) {
                return ((Recordings_DataRow)(this.Rows.Find(new object[] {
                            DataPointID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Recordings_DataDataTable cln = ((Recordings_DataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Recordings_DataDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDataPointID = base.Columns["DataPointID"];
                this.columnRecordingID = base.Columns["RecordingID"];
                this.columnDataName = base.Columns["DataName"];
                this.columnTime = base.Columns["Time"];
                this.columnValue = base.Columns["Value"];
                this.columnUnits = base.Columns["Units"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDataPointID = new global::System.Data.DataColumn("DataPointID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataPointID);
                this.columnRecordingID = new global::System.Data.DataColumn("RecordingID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecordingID);
                this.columnDataName = new global::System.Data.DataColumn("DataName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataName);
                this.columnTime = new global::System.Data.DataColumn("Time", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTime);
                this.columnValue = new global::System.Data.DataColumn("Value", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.columnUnits = new global::System.Data.DataColumn("Units", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnits);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDataPointID}, true));
                this.columnDataPointID.AutoIncrement = true;
                this.columnDataPointID.AutoIncrementStep = -1;
                this.columnDataPointID.AllowDBNull = false;
                this.columnDataPointID.Unique = true;
                this.columnRecordingID.AllowDBNull = false;
                this.columnDataName.AllowDBNull = false;
                this.columnTime.AllowDBNull = false;
                this.columnUnits.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_DataRow NewRecordings_DataRow() {
                return ((Recordings_DataRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Recordings_DataRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Recordings_DataRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Recordings_DataRowChanged != null)) {
                    this.Recordings_DataRowChanged(this, new Recordings_DataRowChangeEvent(((Recordings_DataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Recordings_DataRowChanging != null)) {
                    this.Recordings_DataRowChanging(this, new Recordings_DataRowChangeEvent(((Recordings_DataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Recordings_DataRowDeleted != null)) {
                    this.Recordings_DataRowDeleted(this, new Recordings_DataRowChangeEvent(((Recordings_DataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Recordings_DataRowDeleting != null)) {
                    this.Recordings_DataRowDeleting(this, new Recordings_DataRowChangeEvent(((Recordings_DataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRecordings_DataRow(Recordings_DataRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PhysiologyDataSet ds = new PhysiologyDataSet();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Recordings_DataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Recordings_MetaDataDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMetaDataID;
            
            private global::System.Data.DataColumn columnRecordingID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_MetaDataDataTable() {
                this.TableName = "Recordings_MetaData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Recordings_MetaDataDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Recordings_MetaDataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MetaDataIDColumn {
                get {
                    return this.columnMetaDataID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecordingIDColumn {
                get {
                    return this.columnRecordingID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_MetaDataRow this[int index] {
                get {
                    return ((Recordings_MetaDataRow)(this.Rows[index]));
                }
            }
            
            public event Recordings_MetaDataRowChangeEventHandler Recordings_MetaDataRowChanging;
            
            public event Recordings_MetaDataRowChangeEventHandler Recordings_MetaDataRowChanged;
            
            public event Recordings_MetaDataRowChangeEventHandler Recordings_MetaDataRowDeleting;
            
            public event Recordings_MetaDataRowChangeEventHandler Recordings_MetaDataRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRecordings_MetaDataRow(Recordings_MetaDataRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_MetaDataRow AddRecordings_MetaDataRow(RecordingsRow parentRecordingsRowByFK_Recordings_Recording_MetaData, string Name, string Value) {
                Recordings_MetaDataRow rowRecordings_MetaDataRow = ((Recordings_MetaDataRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        Name,
                        Value};
                if ((parentRecordingsRowByFK_Recordings_Recording_MetaData != null)) {
                    columnValuesArray[1] = parentRecordingsRowByFK_Recordings_Recording_MetaData[0];
                }
                rowRecordings_MetaDataRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRecordings_MetaDataRow);
                return rowRecordings_MetaDataRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_MetaDataRow FindByMetaDataID(long MetaDataID) {
                return ((Recordings_MetaDataRow)(this.Rows.Find(new object[] {
                            MetaDataID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Recordings_MetaDataDataTable cln = ((Recordings_MetaDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Recordings_MetaDataDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMetaDataID = base.Columns["MetaDataID"];
                this.columnRecordingID = base.Columns["RecordingID"];
                this.columnName = base.Columns["Name"];
                this.columnValue = base.Columns["Value"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMetaDataID = new global::System.Data.DataColumn("MetaDataID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMetaDataID);
                this.columnRecordingID = new global::System.Data.DataColumn("RecordingID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecordingID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnValue = new global::System.Data.DataColumn("Value", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMetaDataID}, true));
                this.columnMetaDataID.AutoIncrement = true;
                this.columnMetaDataID.AutoIncrementStep = -1;
                this.columnMetaDataID.AllowDBNull = false;
                this.columnMetaDataID.Unique = true;
                this.columnRecordingID.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnValue.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_MetaDataRow NewRecordings_MetaDataRow() {
                return ((Recordings_MetaDataRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Recordings_MetaDataRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Recordings_MetaDataRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Recordings_MetaDataRowChanged != null)) {
                    this.Recordings_MetaDataRowChanged(this, new Recordings_MetaDataRowChangeEvent(((Recordings_MetaDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Recordings_MetaDataRowChanging != null)) {
                    this.Recordings_MetaDataRowChanging(this, new Recordings_MetaDataRowChangeEvent(((Recordings_MetaDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Recordings_MetaDataRowDeleted != null)) {
                    this.Recordings_MetaDataRowDeleted(this, new Recordings_MetaDataRowChangeEvent(((Recordings_MetaDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Recordings_MetaDataRowDeleting != null)) {
                    this.Recordings_MetaDataRowDeleting(this, new Recordings_MetaDataRowChangeEvent(((Recordings_MetaDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRecordings_MetaDataRow(Recordings_MetaDataRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PhysiologyDataSet ds = new PhysiologyDataSet();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Recordings_MetaDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Recordings_ProtocolSettingsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProtocolSettingsID;
            
            private global::System.Data.DataColumn columnRecordingID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_ProtocolSettingsDataTable() {
                this.TableName = "Recordings_ProtocolSettings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Recordings_ProtocolSettingsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Recordings_ProtocolSettingsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProtocolSettingsIDColumn {
                get {
                    return this.columnProtocolSettingsID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecordingIDColumn {
                get {
                    return this.columnRecordingID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_ProtocolSettingsRow this[int index] {
                get {
                    return ((Recordings_ProtocolSettingsRow)(this.Rows[index]));
                }
            }
            
            public event Recordings_ProtocolSettingsRowChangeEventHandler Recordings_ProtocolSettingsRowChanging;
            
            public event Recordings_ProtocolSettingsRowChangeEventHandler Recordings_ProtocolSettingsRowChanged;
            
            public event Recordings_ProtocolSettingsRowChangeEventHandler Recordings_ProtocolSettingsRowDeleting;
            
            public event Recordings_ProtocolSettingsRowChangeEventHandler Recordings_ProtocolSettingsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRecordings_ProtocolSettingsRow(Recordings_ProtocolSettingsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_ProtocolSettingsRow AddRecordings_ProtocolSettingsRow(RecordingsRow parentRecordingsRowByFK_Recordings_Recordings_ProtocolSettings, string Name, string Value) {
                Recordings_ProtocolSettingsRow rowRecordings_ProtocolSettingsRow = ((Recordings_ProtocolSettingsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        Name,
                        Value};
                if ((parentRecordingsRowByFK_Recordings_Recordings_ProtocolSettings != null)) {
                    columnValuesArray[1] = parentRecordingsRowByFK_Recordings_Recordings_ProtocolSettings[0];
                }
                rowRecordings_ProtocolSettingsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRecordings_ProtocolSettingsRow);
                return rowRecordings_ProtocolSettingsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_ProtocolSettingsRow FindByProtocolSettingsID(long ProtocolSettingsID) {
                return ((Recordings_ProtocolSettingsRow)(this.Rows.Find(new object[] {
                            ProtocolSettingsID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Recordings_ProtocolSettingsDataTable cln = ((Recordings_ProtocolSettingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Recordings_ProtocolSettingsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProtocolSettingsID = base.Columns["ProtocolSettingsID"];
                this.columnRecordingID = base.Columns["RecordingID"];
                this.columnName = base.Columns["Name"];
                this.columnValue = base.Columns["Value"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProtocolSettingsID = new global::System.Data.DataColumn("ProtocolSettingsID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProtocolSettingsID);
                this.columnRecordingID = new global::System.Data.DataColumn("RecordingID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecordingID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnValue = new global::System.Data.DataColumn("Value", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProtocolSettingsID}, true));
                this.columnProtocolSettingsID.AutoIncrement = true;
                this.columnProtocolSettingsID.AutoIncrementStep = -1;
                this.columnProtocolSettingsID.AllowDBNull = false;
                this.columnProtocolSettingsID.Unique = true;
                this.columnRecordingID.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnValue.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_ProtocolSettingsRow NewRecordings_ProtocolSettingsRow() {
                return ((Recordings_ProtocolSettingsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Recordings_ProtocolSettingsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Recordings_ProtocolSettingsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Recordings_ProtocolSettingsRowChanged != null)) {
                    this.Recordings_ProtocolSettingsRowChanged(this, new Recordings_ProtocolSettingsRowChangeEvent(((Recordings_ProtocolSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Recordings_ProtocolSettingsRowChanging != null)) {
                    this.Recordings_ProtocolSettingsRowChanging(this, new Recordings_ProtocolSettingsRowChangeEvent(((Recordings_ProtocolSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Recordings_ProtocolSettingsRowDeleted != null)) {
                    this.Recordings_ProtocolSettingsRowDeleted(this, new Recordings_ProtocolSettingsRowChangeEvent(((Recordings_ProtocolSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Recordings_ProtocolSettingsRowDeleting != null)) {
                    this.Recordings_ProtocolSettingsRowDeleting(this, new Recordings_ProtocolSettingsRowChangeEvent(((Recordings_ProtocolSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRecordings_ProtocolSettingsRow(Recordings_ProtocolSettingsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PhysiologyDataSet ds = new PhysiologyDataSet();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Recordings_ProtocolSettingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Recordings_EquipmentSettingsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEquipmentSettingsID;
            
            private global::System.Data.DataColumn columnRecordingID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_EquipmentSettingsDataTable() {
                this.TableName = "Recordings_EquipmentSettings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Recordings_EquipmentSettingsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Recordings_EquipmentSettingsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EquipmentSettingsIDColumn {
                get {
                    return this.columnEquipmentSettingsID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecordingIDColumn {
                get {
                    return this.columnRecordingID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_EquipmentSettingsRow this[int index] {
                get {
                    return ((Recordings_EquipmentSettingsRow)(this.Rows[index]));
                }
            }
            
            public event Recordings_EquipmentSettingsRowChangeEventHandler Recordings_EquipmentSettingsRowChanging;
            
            public event Recordings_EquipmentSettingsRowChangeEventHandler Recordings_EquipmentSettingsRowChanged;
            
            public event Recordings_EquipmentSettingsRowChangeEventHandler Recordings_EquipmentSettingsRowDeleting;
            
            public event Recordings_EquipmentSettingsRowChangeEventHandler Recordings_EquipmentSettingsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRecordings_EquipmentSettingsRow(Recordings_EquipmentSettingsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_EquipmentSettingsRow AddRecordings_EquipmentSettingsRow(RecordingsRow parentRecordingsRowByRecordings_Recordings_EquipmentSettings, string Name, string Value) {
                Recordings_EquipmentSettingsRow rowRecordings_EquipmentSettingsRow = ((Recordings_EquipmentSettingsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        Name,
                        Value};
                if ((parentRecordingsRowByRecordings_Recordings_EquipmentSettings != null)) {
                    columnValuesArray[1] = parentRecordingsRowByRecordings_Recordings_EquipmentSettings[0];
                }
                rowRecordings_EquipmentSettingsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRecordings_EquipmentSettingsRow);
                return rowRecordings_EquipmentSettingsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_EquipmentSettingsRow FindByEquipmentSettingsID(long EquipmentSettingsID) {
                return ((Recordings_EquipmentSettingsRow)(this.Rows.Find(new object[] {
                            EquipmentSettingsID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Recordings_EquipmentSettingsDataTable cln = ((Recordings_EquipmentSettingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Recordings_EquipmentSettingsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEquipmentSettingsID = base.Columns["EquipmentSettingsID"];
                this.columnRecordingID = base.Columns["RecordingID"];
                this.columnName = base.Columns["Name"];
                this.columnValue = base.Columns["Value"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEquipmentSettingsID = new global::System.Data.DataColumn("EquipmentSettingsID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEquipmentSettingsID);
                this.columnRecordingID = new global::System.Data.DataColumn("RecordingID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecordingID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnValue = new global::System.Data.DataColumn("Value", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEquipmentSettingsID}, true));
                this.columnEquipmentSettingsID.AutoIncrement = true;
                this.columnEquipmentSettingsID.AutoIncrementStep = -1;
                this.columnEquipmentSettingsID.AllowDBNull = false;
                this.columnEquipmentSettingsID.Unique = true;
                this.columnRecordingID.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnValue.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_EquipmentSettingsRow NewRecordings_EquipmentSettingsRow() {
                return ((Recordings_EquipmentSettingsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Recordings_EquipmentSettingsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Recordings_EquipmentSettingsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Recordings_EquipmentSettingsRowChanged != null)) {
                    this.Recordings_EquipmentSettingsRowChanged(this, new Recordings_EquipmentSettingsRowChangeEvent(((Recordings_EquipmentSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Recordings_EquipmentSettingsRowChanging != null)) {
                    this.Recordings_EquipmentSettingsRowChanging(this, new Recordings_EquipmentSettingsRowChangeEvent(((Recordings_EquipmentSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Recordings_EquipmentSettingsRowDeleted != null)) {
                    this.Recordings_EquipmentSettingsRowDeleted(this, new Recordings_EquipmentSettingsRowChangeEvent(((Recordings_EquipmentSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Recordings_EquipmentSettingsRowDeleting != null)) {
                    this.Recordings_EquipmentSettingsRowDeleting(this, new Recordings_EquipmentSettingsRowChangeEvent(((Recordings_EquipmentSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRecordings_EquipmentSettingsRow(Recordings_EquipmentSettingsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PhysiologyDataSet ds = new PhysiologyDataSet();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Recordings_EquipmentSettingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Recordings_AnnotationsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAnnotationID;
            
            private global::System.Data.DataColumn columnRecordingID;
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnEntered;
            
            private global::System.Data.DataColumn columnText;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_AnnotationsDataTable() {
                this.TableName = "Recordings_Annotations";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Recordings_AnnotationsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Recordings_AnnotationsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AnnotationIDColumn {
                get {
                    return this.columnAnnotationID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecordingIDColumn {
                get {
                    return this.columnRecordingID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EnteredColumn {
                get {
                    return this.columnEntered;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TextColumn {
                get {
                    return this.columnText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_AnnotationsRow this[int index] {
                get {
                    return ((Recordings_AnnotationsRow)(this.Rows[index]));
                }
            }
            
            public event Recordings_AnnotationsRowChangeEventHandler Recordings_AnnotationsRowChanging;
            
            public event Recordings_AnnotationsRowChangeEventHandler Recordings_AnnotationsRowChanged;
            
            public event Recordings_AnnotationsRowChangeEventHandler Recordings_AnnotationsRowDeleting;
            
            public event Recordings_AnnotationsRowChangeEventHandler Recordings_AnnotationsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRecordings_AnnotationsRow(Recordings_AnnotationsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_AnnotationsRow AddRecordings_AnnotationsRow(RecordingsRow parentRecordingsRowByFK_Recordings_Recordings_Annotations, UsersRow parentUsersRowByFK_Users_Recordings_Annotations, System.DateTime Entered, string Text) {
                Recordings_AnnotationsRow rowRecordings_AnnotationsRow = ((Recordings_AnnotationsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null,
                        Entered,
                        Text};
                if ((parentRecordingsRowByFK_Recordings_Recordings_Annotations != null)) {
                    columnValuesArray[1] = parentRecordingsRowByFK_Recordings_Recordings_Annotations[0];
                }
                if ((parentUsersRowByFK_Users_Recordings_Annotations != null)) {
                    columnValuesArray[2] = parentUsersRowByFK_Users_Recordings_Annotations[0];
                }
                rowRecordings_AnnotationsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRecordings_AnnotationsRow);
                return rowRecordings_AnnotationsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_AnnotationsRow FindByAnnotationID(long AnnotationID) {
                return ((Recordings_AnnotationsRow)(this.Rows.Find(new object[] {
                            AnnotationID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Recordings_AnnotationsDataTable cln = ((Recordings_AnnotationsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Recordings_AnnotationsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAnnotationID = base.Columns["AnnotationID"];
                this.columnRecordingID = base.Columns["RecordingID"];
                this.columnUserID = base.Columns["UserID"];
                this.columnEntered = base.Columns["Entered"];
                this.columnText = base.Columns["Text"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAnnotationID = new global::System.Data.DataColumn("AnnotationID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAnnotationID);
                this.columnRecordingID = new global::System.Data.DataColumn("RecordingID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecordingID);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnEntered = new global::System.Data.DataColumn("Entered", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntered);
                this.columnText = new global::System.Data.DataColumn("Text", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnText);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAnnotationID}, true));
                this.columnAnnotationID.AutoIncrement = true;
                this.columnAnnotationID.AutoIncrementStep = -1;
                this.columnAnnotationID.AllowDBNull = false;
                this.columnAnnotationID.Unique = true;
                this.columnRecordingID.AllowDBNull = false;
                this.columnEntered.AllowDBNull = false;
                this.columnEntered.DateTimeMode = global::System.Data.DataSetDateTime.Local;
                this.columnText.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_AnnotationsRow NewRecordings_AnnotationsRow() {
                return ((Recordings_AnnotationsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Recordings_AnnotationsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Recordings_AnnotationsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Recordings_AnnotationsRowChanged != null)) {
                    this.Recordings_AnnotationsRowChanged(this, new Recordings_AnnotationsRowChangeEvent(((Recordings_AnnotationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Recordings_AnnotationsRowChanging != null)) {
                    this.Recordings_AnnotationsRowChanging(this, new Recordings_AnnotationsRowChangeEvent(((Recordings_AnnotationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Recordings_AnnotationsRowDeleted != null)) {
                    this.Recordings_AnnotationsRowDeleted(this, new Recordings_AnnotationsRowChangeEvent(((Recordings_AnnotationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Recordings_AnnotationsRowDeleting != null)) {
                    this.Recordings_AnnotationsRowDeleting(this, new Recordings_AnnotationsRowChangeEvent(((Recordings_AnnotationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRecordings_AnnotationsRow(Recordings_AnnotationsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PhysiologyDataSet ds = new PhysiologyDataSet();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Recordings_AnnotationsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Cells_AnnotationsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAnnotationID;
            
            private global::System.Data.DataColumn columnCellID;
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnEntered;
            
            private global::System.Data.DataColumn columnText;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Cells_AnnotationsDataTable() {
                this.TableName = "Cells_Annotations";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Cells_AnnotationsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Cells_AnnotationsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AnnotationIDColumn {
                get {
                    return this.columnAnnotationID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CellIDColumn {
                get {
                    return this.columnCellID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EnteredColumn {
                get {
                    return this.columnEntered;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TextColumn {
                get {
                    return this.columnText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Cells_AnnotationsRow this[int index] {
                get {
                    return ((Cells_AnnotationsRow)(this.Rows[index]));
                }
            }
            
            public event Cells_AnnotationsRowChangeEventHandler Cells_AnnotationsRowChanging;
            
            public event Cells_AnnotationsRowChangeEventHandler Cells_AnnotationsRowChanged;
            
            public event Cells_AnnotationsRowChangeEventHandler Cells_AnnotationsRowDeleting;
            
            public event Cells_AnnotationsRowChangeEventHandler Cells_AnnotationsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCells_AnnotationsRow(Cells_AnnotationsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Cells_AnnotationsRow AddCells_AnnotationsRow(CellsRow parentCellsRowByFK_Cells_Cells_Annotations, UsersRow parentUsersRowByFK_Users_Cells_Annotations, System.DateTime Entered, string Text) {
                Cells_AnnotationsRow rowCells_AnnotationsRow = ((Cells_AnnotationsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null,
                        Entered,
                        Text};
                if ((parentCellsRowByFK_Cells_Cells_Annotations != null)) {
                    columnValuesArray[1] = parentCellsRowByFK_Cells_Cells_Annotations[0];
                }
                if ((parentUsersRowByFK_Users_Cells_Annotations != null)) {
                    columnValuesArray[2] = parentUsersRowByFK_Users_Cells_Annotations[0];
                }
                rowCells_AnnotationsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCells_AnnotationsRow);
                return rowCells_AnnotationsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Cells_AnnotationsDataTable cln = ((Cells_AnnotationsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Cells_AnnotationsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAnnotationID = base.Columns["AnnotationID"];
                this.columnCellID = base.Columns["CellID"];
                this.columnUserID = base.Columns["UserID"];
                this.columnEntered = base.Columns["Entered"];
                this.columnText = base.Columns["Text"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAnnotationID = new global::System.Data.DataColumn("AnnotationID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAnnotationID);
                this.columnCellID = new global::System.Data.DataColumn("CellID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCellID);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnEntered = new global::System.Data.DataColumn("Entered", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntered);
                this.columnText = new global::System.Data.DataColumn("Text", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnText);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAnnotationID}, false));
                this.columnAnnotationID.AutoIncrement = true;
                this.columnAnnotationID.AutoIncrementStep = -1;
                this.columnAnnotationID.AllowDBNull = false;
                this.columnAnnotationID.Unique = true;
                this.columnCellID.AllowDBNull = false;
                this.columnUserID.AllowDBNull = false;
                this.columnEntered.AllowDBNull = false;
                this.columnEntered.DateTimeMode = global::System.Data.DataSetDateTime.Local;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Cells_AnnotationsRow NewCells_AnnotationsRow() {
                return ((Cells_AnnotationsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Cells_AnnotationsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Cells_AnnotationsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Cells_AnnotationsRowChanged != null)) {
                    this.Cells_AnnotationsRowChanged(this, new Cells_AnnotationsRowChangeEvent(((Cells_AnnotationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Cells_AnnotationsRowChanging != null)) {
                    this.Cells_AnnotationsRowChanging(this, new Cells_AnnotationsRowChangeEvent(((Cells_AnnotationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Cells_AnnotationsRowDeleted != null)) {
                    this.Cells_AnnotationsRowDeleted(this, new Cells_AnnotationsRowChangeEvent(((Cells_AnnotationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Cells_AnnotationsRowDeleting != null)) {
                    this.Cells_AnnotationsRowDeleting(this, new Cells_AnnotationsRowChangeEvent(((Cells_AnnotationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCells_AnnotationsRow(Cells_AnnotationsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PhysiologyDataSet ds = new PhysiologyDataSet();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Cells_AnnotationsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UsersRow : global::System.Data.DataRow {
            
            private UsersDataTable tableUsers;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UsersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUsers = ((UsersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short UserID {
                get {
                    return ((short)(this[this.tableUsers.UserIDColumn]));
                }
                set {
                    this[this.tableUsers.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableUsers.NameColumn]));
                }
                set {
                    this[this.tableUsers.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Cells_AnnotationsRow[] GetCells_AnnotationsRows() {
                if ((this.Table.ChildRelations["FK_Users_Cells_Annotations"] == null)) {
                    return new Cells_AnnotationsRow[0];
                }
                else {
                    return ((Cells_AnnotationsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Users_Cells_Annotations"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_AnnotationsRow[] GetRecordings_AnnotationsRows() {
                if ((this.Table.ChildRelations["FK_Users_Recordings_Annotations"] == null)) {
                    return new Recordings_AnnotationsRow[0];
                }
                else {
                    return ((Recordings_AnnotationsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Users_Recordings_Annotations"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CellsRow[] GetCellsRows() {
                if ((this.Table.ChildRelations["FK_Users_Cells"] == null)) {
                    return new CellsRow[0];
                }
                else {
                    return ((CellsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Users_Cells"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CellsRow : global::System.Data.DataRow {
            
            private CellsDataTable tableCells;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CellsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCells = ((CellsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CellID {
                get {
                    return ((int)(this[this.tableCells.CellIDColumn]));
                }
                set {
                    this[this.tableCells.CellIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FlyStockID {
                get {
                    return ((int)(this[this.tableCells.FlyStockIDColumn]));
                }
                set {
                    this[this.tableCells.FlyStockIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableCells.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'Cells\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCells.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Created {
                get {
                    return ((global::System.DateTime)(this[this.tableCells.CreatedColumn]));
                }
                set {
                    this[this.tableCells.CreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float PipetteResistance {
                get {
                    try {
                        return ((float)(this[this.tableCells.PipetteResistanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PipetteResistance\' in table \'Cells\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCells.PipetteResistanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float SealResistance {
                get {
                    try {
                        return ((float)(this[this.tableCells.SealResistanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SealResistance\' in table \'Cells\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCells.SealResistanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float CellCapacitance {
                get {
                    try {
                        return ((float)(this[this.tableCells.CellCapacitanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CellCapacitance\' in table \'Cells\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCells.CellCapacitanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float SeriesResistance {
                get {
                    try {
                        return ((float)(this[this.tableCells.SeriesResistanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SeriesResistance\' in table \'Cells\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCells.SeriesResistanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float MembraneResistance {
                get {
                    try {
                        return ((float)(this[this.tableCells.MembraneResistanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MembraneResistance\' in table \'Cells\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCells.MembraneResistanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short MembranePotential {
                get {
                    try {
                        return ((short)(this[this.tableCells.MembranePotentialColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MembranePotential\' in table \'Cells\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCells.MembranePotentialColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime BreakInTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCells.BreakInTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BreakInTime\' in table \'Cells\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCells.BreakInTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort RoughAppearanceRating {
                get {
                    try {
                        return ((ushort)(this[this.tableCells.RoughAppearanceRatingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RoughAppearanceRating\' in table \'Cells\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCells.RoughAppearanceRatingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort LengthAppearanceRating {
                get {
                    try {
                        return ((ushort)(this[this.tableCells.LengthAppearanceRatingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LengthAppearanceRating\' in table \'Cells\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCells.LengthAppearanceRatingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort ShapeAppearanceRating {
                get {
                    try {
                        return ((ushort)(this[this.tableCells.ShapeAppearanceRatingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShapeAppearanceRating\' in table \'Cells\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCells.ShapeAppearanceRatingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort AppearanceScore {
                get {
                    try {
                        return ((ushort)(this[this.tableCells.AppearanceScoreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AppearanceScore\' in table \'Cells\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCells.AppearanceScoreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short UserID {
                get {
                    return ((short)(this[this.tableCells.UserIDColumn]));
                }
                set {
                    this[this.tableCells.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort NumberOfRecordings {
                get {
                    try {
                        return ((ushort)(this[this.tableCells.NumberOfRecordingsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NumberOfRecordings\' in table \'Cells\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCells.NumberOfRecordingsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow UsersRow {
                get {
                    return ((UsersRow)(this.GetParentRow(this.Table.ParentRelations["FK_Users_Cells"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Users_Cells"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GenotypesRow GenotypesRow {
                get {
                    return ((GenotypesRow)(this.GetParentRow(this.Table.ParentRelations["FK_Genotypes_Cells"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Genotypes_Cells"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableCells.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableCells.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipetteResistanceNull() {
                return this.IsNull(this.tableCells.PipetteResistanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipetteResistanceNull() {
                this[this.tableCells.PipetteResistanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSealResistanceNull() {
                return this.IsNull(this.tableCells.SealResistanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSealResistanceNull() {
                this[this.tableCells.SealResistanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCellCapacitanceNull() {
                return this.IsNull(this.tableCells.CellCapacitanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCellCapacitanceNull() {
                this[this.tableCells.CellCapacitanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeriesResistanceNull() {
                return this.IsNull(this.tableCells.SeriesResistanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeriesResistanceNull() {
                this[this.tableCells.SeriesResistanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMembraneResistanceNull() {
                return this.IsNull(this.tableCells.MembraneResistanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMembraneResistanceNull() {
                this[this.tableCells.MembraneResistanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMembranePotentialNull() {
                return this.IsNull(this.tableCells.MembranePotentialColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMembranePotentialNull() {
                this[this.tableCells.MembranePotentialColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreakInTimeNull() {
                return this.IsNull(this.tableCells.BreakInTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreakInTimeNull() {
                this[this.tableCells.BreakInTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRoughAppearanceRatingNull() {
                return this.IsNull(this.tableCells.RoughAppearanceRatingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRoughAppearanceRatingNull() {
                this[this.tableCells.RoughAppearanceRatingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLengthAppearanceRatingNull() {
                return this.IsNull(this.tableCells.LengthAppearanceRatingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLengthAppearanceRatingNull() {
                this[this.tableCells.LengthAppearanceRatingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShapeAppearanceRatingNull() {
                return this.IsNull(this.tableCells.ShapeAppearanceRatingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShapeAppearanceRatingNull() {
                this[this.tableCells.ShapeAppearanceRatingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAppearanceScoreNull() {
                return this.IsNull(this.tableCells.AppearanceScoreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAppearanceScoreNull() {
                this[this.tableCells.AppearanceScoreColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumberOfRecordingsNull() {
                return this.IsNull(this.tableCells.NumberOfRecordingsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumberOfRecordingsNull() {
                this[this.tableCells.NumberOfRecordingsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Cells_AnnotationsRow[] GetCells_AnnotationsRows() {
                if ((this.Table.ChildRelations["FK_Cells_Cells_Annotations"] == null)) {
                    return new Cells_AnnotationsRow[0];
                }
                else {
                    return ((Cells_AnnotationsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Cells_Cells_Annotations"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingsRow[] GetRecordingsRows() {
                if ((this.Table.ChildRelations["FK_Cells_Recordings"] == null)) {
                    return new RecordingsRow[0];
                }
                else {
                    return ((RecordingsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Cells_Recordings"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GenotypesRow : global::System.Data.DataRow {
            
            private GenotypesDataTable tableGenotypes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GenotypesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGenotypes = ((GenotypesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FlyStockID {
                get {
                    return ((int)(this[this.tableGenotypes.FlyStockIDColumn]));
                }
                set {
                    this[this.tableGenotypes.FlyStockIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Genotype {
                get {
                    return ((string)(this[this.tableGenotypes.GenotypeColumn]));
                }
                set {
                    this[this.tableGenotypes.GenotypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Notes {
                get {
                    try {
                        return ((string)(this[this.tableGenotypes.NotesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Notes\' in table \'Genotypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGenotypes.NotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotesNull() {
                return this.IsNull(this.tableGenotypes.NotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotesNull() {
                this[this.tableGenotypes.NotesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CellsRow[] GetCellsRows() {
                if ((this.Table.ChildRelations["FK_Genotypes_Cells"] == null)) {
                    return new CellsRow[0];
                }
                else {
                    return ((CellsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Genotypes_Cells"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RecordingsRow : global::System.Data.DataRow {
            
            private RecordingsDataTable tableRecordings;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RecordingsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRecordings = ((RecordingsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RecordingID {
                get {
                    return ((long)(this[this.tableRecordings.RecordingIDColumn]));
                }
                set {
                    this[this.tableRecordings.RecordingIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CellID {
                get {
                    return ((int)(this[this.tableRecordings.CellIDColumn]));
                }
                set {
                    this[this.tableRecordings.CellIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Title {
                get {
                    try {
                        return ((string)(this[this.tableRecordings.TitleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Title\' in table \'Recordings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecordings.TitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableRecordings.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'Recordings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecordings.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Recorded {
                get {
                    return ((global::System.DateTime)(this[this.tableRecordings.RecordedColumn]));
                }
                set {
                    this[this.tableRecordings.RecordedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short HoldingPotential {
                get {
                    try {
                        return ((short)(this[this.tableRecordings.HoldingPotentialColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HoldingPotential\' in table \'Recordings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecordings.HoldingPotentialColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BathSolution {
                get {
                    return ((string)(this[this.tableRecordings.BathSolutionColumn]));
                }
                set {
                    this[this.tableRecordings.BathSolutionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PipetteSolution {
                get {
                    try {
                        return ((string)(this[this.tableRecordings.PipetteSolutionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PipetteSolution\' in table \'Recordings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecordings.PipetteSolutionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.TimeSpan TimeSinceBreakIn {
                get {
                    try {
                        return ((global::System.TimeSpan)(this[this.tableRecordings.TimeSinceBreakInColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimeSinceBreakIn\' in table \'Recordings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecordings.TimeSinceBreakInColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CellsRow CellsRow {
                get {
                    return ((CellsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Cells_Recordings"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Cells_Recordings"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTitleNull() {
                return this.IsNull(this.tableRecordings.TitleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTitleNull() {
                this[this.tableRecordings.TitleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableRecordings.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableRecordings.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHoldingPotentialNull() {
                return this.IsNull(this.tableRecordings.HoldingPotentialColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHoldingPotentialNull() {
                this[this.tableRecordings.HoldingPotentialColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipetteSolutionNull() {
                return this.IsNull(this.tableRecordings.PipetteSolutionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipetteSolutionNull() {
                this[this.tableRecordings.PipetteSolutionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeSinceBreakInNull() {
                return this.IsNull(this.tableRecordings.TimeSinceBreakInColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeSinceBreakInNull() {
                this[this.tableRecordings.TimeSinceBreakInColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_AnnotationsRow[] GetRecordings_AnnotationsRows() {
                if ((this.Table.ChildRelations["FK_Recordings_Recordings_Annotations"] == null)) {
                    return new Recordings_AnnotationsRow[0];
                }
                else {
                    return ((Recordings_AnnotationsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Recordings_Recordings_Annotations"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_EquipmentSettingsRow[] GetRecordings_EquipmentSettingsRows() {
                if ((this.Table.ChildRelations["Recordings_Recordings_EquipmentSettings"] == null)) {
                    return new Recordings_EquipmentSettingsRow[0];
                }
                else {
                    return ((Recordings_EquipmentSettingsRow[])(base.GetChildRows(this.Table.ChildRelations["Recordings_Recordings_EquipmentSettings"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_ProtocolSettingsRow[] GetRecordings_ProtocolSettingsRows() {
                if ((this.Table.ChildRelations["FK_Recordings_Recordings_ProtocolSettings"] == null)) {
                    return new Recordings_ProtocolSettingsRow[0];
                }
                else {
                    return ((Recordings_ProtocolSettingsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Recordings_Recordings_ProtocolSettings"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_MetaDataRow[] GetRecordings_MetaDataRows() {
                if ((this.Table.ChildRelations["FK_Recordings_Recording_MetaData"] == null)) {
                    return new Recordings_MetaDataRow[0];
                }
                else {
                    return ((Recordings_MetaDataRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Recordings_Recording_MetaData"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_DataRow[] GetRecordings_DataRows() {
                if ((this.Table.ChildRelations["FK_Recordings_Recording_Data"] == null)) {
                    return new Recordings_DataRow[0];
                }
                else {
                    return ((Recordings_DataRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Recordings_Recording_Data"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Recordings_DataRow : global::System.Data.DataRow {
            
            private Recordings_DataDataTable tableRecordings_Data;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Recordings_DataRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRecordings_Data = ((Recordings_DataDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long DataPointID {
                get {
                    return ((long)(this[this.tableRecordings_Data.DataPointIDColumn]));
                }
                set {
                    this[this.tableRecordings_Data.DataPointIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RecordingID {
                get {
                    return ((long)(this[this.tableRecordings_Data.RecordingIDColumn]));
                }
                set {
                    this[this.tableRecordings_Data.RecordingIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DataName {
                get {
                    return ((string)(this[this.tableRecordings_Data.DataNameColumn]));
                }
                set {
                    this[this.tableRecordings_Data.DataNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float Time {
                get {
                    return ((float)(this[this.tableRecordings_Data.TimeColumn]));
                }
                set {
                    this[this.tableRecordings_Data.TimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Value {
                get {
                    try {
                        return ((double)(this[this.tableRecordings_Data.ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value\' in table \'Recordings_Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecordings_Data.ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Units {
                get {
                    return ((string)(this[this.tableRecordings_Data.UnitsColumn]));
                }
                set {
                    this[this.tableRecordings_Data.UnitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingsRow RecordingsRow {
                get {
                    return ((RecordingsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Recordings_Recording_Data"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Recordings_Recording_Data"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableRecordings_Data.ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableRecordings_Data.ValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Recordings_MetaDataRow : global::System.Data.DataRow {
            
            private Recordings_MetaDataDataTable tableRecordings_MetaData;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Recordings_MetaDataRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRecordings_MetaData = ((Recordings_MetaDataDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long MetaDataID {
                get {
                    return ((long)(this[this.tableRecordings_MetaData.MetaDataIDColumn]));
                }
                set {
                    this[this.tableRecordings_MetaData.MetaDataIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RecordingID {
                get {
                    return ((long)(this[this.tableRecordings_MetaData.RecordingIDColumn]));
                }
                set {
                    this[this.tableRecordings_MetaData.RecordingIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableRecordings_MetaData.NameColumn]));
                }
                set {
                    this[this.tableRecordings_MetaData.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    return ((string)(this[this.tableRecordings_MetaData.ValueColumn]));
                }
                set {
                    this[this.tableRecordings_MetaData.ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingsRow RecordingsRow {
                get {
                    return ((RecordingsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Recordings_Recording_MetaData"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Recordings_Recording_MetaData"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Recordings_ProtocolSettingsRow : global::System.Data.DataRow {
            
            private Recordings_ProtocolSettingsDataTable tableRecordings_ProtocolSettings;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Recordings_ProtocolSettingsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRecordings_ProtocolSettings = ((Recordings_ProtocolSettingsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ProtocolSettingsID {
                get {
                    return ((long)(this[this.tableRecordings_ProtocolSettings.ProtocolSettingsIDColumn]));
                }
                set {
                    this[this.tableRecordings_ProtocolSettings.ProtocolSettingsIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RecordingID {
                get {
                    return ((long)(this[this.tableRecordings_ProtocolSettings.RecordingIDColumn]));
                }
                set {
                    this[this.tableRecordings_ProtocolSettings.RecordingIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableRecordings_ProtocolSettings.NameColumn]));
                }
                set {
                    this[this.tableRecordings_ProtocolSettings.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    return ((string)(this[this.tableRecordings_ProtocolSettings.ValueColumn]));
                }
                set {
                    this[this.tableRecordings_ProtocolSettings.ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingsRow RecordingsRow {
                get {
                    return ((RecordingsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Recordings_Recordings_ProtocolSettings"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Recordings_Recordings_ProtocolSettings"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Recordings_EquipmentSettingsRow : global::System.Data.DataRow {
            
            private Recordings_EquipmentSettingsDataTable tableRecordings_EquipmentSettings;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Recordings_EquipmentSettingsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRecordings_EquipmentSettings = ((Recordings_EquipmentSettingsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long EquipmentSettingsID {
                get {
                    return ((long)(this[this.tableRecordings_EquipmentSettings.EquipmentSettingsIDColumn]));
                }
                set {
                    this[this.tableRecordings_EquipmentSettings.EquipmentSettingsIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RecordingID {
                get {
                    return ((long)(this[this.tableRecordings_EquipmentSettings.RecordingIDColumn]));
                }
                set {
                    this[this.tableRecordings_EquipmentSettings.RecordingIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableRecordings_EquipmentSettings.NameColumn]));
                }
                set {
                    this[this.tableRecordings_EquipmentSettings.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    return ((string)(this[this.tableRecordings_EquipmentSettings.ValueColumn]));
                }
                set {
                    this[this.tableRecordings_EquipmentSettings.ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingsRow RecordingsRow {
                get {
                    return ((RecordingsRow)(this.GetParentRow(this.Table.ParentRelations["Recordings_Recordings_EquipmentSettings"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Recordings_Recordings_EquipmentSettings"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Recordings_AnnotationsRow : global::System.Data.DataRow {
            
            private Recordings_AnnotationsDataTable tableRecordings_Annotations;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Recordings_AnnotationsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRecordings_Annotations = ((Recordings_AnnotationsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long AnnotationID {
                get {
                    return ((long)(this[this.tableRecordings_Annotations.AnnotationIDColumn]));
                }
                set {
                    this[this.tableRecordings_Annotations.AnnotationIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RecordingID {
                get {
                    return ((long)(this[this.tableRecordings_Annotations.RecordingIDColumn]));
                }
                set {
                    this[this.tableRecordings_Annotations.RecordingIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short UserID {
                get {
                    try {
                        return ((short)(this[this.tableRecordings_Annotations.UserIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserID\' in table \'Recordings_Annotations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecordings_Annotations.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Entered {
                get {
                    return ((global::System.DateTime)(this[this.tableRecordings_Annotations.EnteredColumn]));
                }
                set {
                    this[this.tableRecordings_Annotations.EnteredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text {
                get {
                    return ((string)(this[this.tableRecordings_Annotations.TextColumn]));
                }
                set {
                    this[this.tableRecordings_Annotations.TextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingsRow RecordingsRow {
                get {
                    return ((RecordingsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Recordings_Recordings_Annotations"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Recordings_Recordings_Annotations"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow UsersRow {
                get {
                    return ((UsersRow)(this.GetParentRow(this.Table.ParentRelations["FK_Users_Recordings_Annotations"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Users_Recordings_Annotations"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserIDNull() {
                return this.IsNull(this.tableRecordings_Annotations.UserIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserIDNull() {
                this[this.tableRecordings_Annotations.UserIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Cells_AnnotationsRow : global::System.Data.DataRow {
            
            private Cells_AnnotationsDataTable tableCells_Annotations;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Cells_AnnotationsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCells_Annotations = ((Cells_AnnotationsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long AnnotationID {
                get {
                    return ((long)(this[this.tableCells_Annotations.AnnotationIDColumn]));
                }
                set {
                    this[this.tableCells_Annotations.AnnotationIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CellID {
                get {
                    return ((int)(this[this.tableCells_Annotations.CellIDColumn]));
                }
                set {
                    this[this.tableCells_Annotations.CellIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short UserID {
                get {
                    return ((short)(this[this.tableCells_Annotations.UserIDColumn]));
                }
                set {
                    this[this.tableCells_Annotations.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Entered {
                get {
                    return ((global::System.DateTime)(this[this.tableCells_Annotations.EnteredColumn]));
                }
                set {
                    this[this.tableCells_Annotations.EnteredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text {
                get {
                    try {
                        return ((string)(this[this.tableCells_Annotations.TextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Text\' in table \'Cells_Annotations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCells_Annotations.TextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CellsRow CellsRow {
                get {
                    return ((CellsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Cells_Cells_Annotations"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Cells_Cells_Annotations"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow UsersRow {
                get {
                    return ((UsersRow)(this.GetParentRow(this.Table.ParentRelations["FK_Users_Cells_Annotations"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Users_Cells_Annotations"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTextNull() {
                return this.IsNull(this.tableCells_Annotations.TextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTextNull() {
                this[this.tableCells_Annotations.TextColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UsersRowChangeEvent : global::System.EventArgs {
            
            private UsersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRowChangeEvent(UsersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CellsRowChangeEvent : global::System.EventArgs {
            
            private CellsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CellsRowChangeEvent(CellsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CellsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GenotypesRowChangeEvent : global::System.EventArgs {
            
            private GenotypesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GenotypesRowChangeEvent(GenotypesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GenotypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RecordingsRowChangeEvent : global::System.EventArgs {
            
            private RecordingsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingsRowChangeEvent(RecordingsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Recordings_DataRowChangeEvent : global::System.EventArgs {
            
            private Recordings_DataRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_DataRowChangeEvent(Recordings_DataRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_DataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Recordings_MetaDataRowChangeEvent : global::System.EventArgs {
            
            private Recordings_MetaDataRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_MetaDataRowChangeEvent(Recordings_MetaDataRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_MetaDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Recordings_ProtocolSettingsRowChangeEvent : global::System.EventArgs {
            
            private Recordings_ProtocolSettingsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_ProtocolSettingsRowChangeEvent(Recordings_ProtocolSettingsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_ProtocolSettingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Recordings_EquipmentSettingsRowChangeEvent : global::System.EventArgs {
            
            private Recordings_EquipmentSettingsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_EquipmentSettingsRowChangeEvent(Recordings_EquipmentSettingsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_EquipmentSettingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Recordings_AnnotationsRowChangeEvent : global::System.EventArgs {
            
            private Recordings_AnnotationsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_AnnotationsRowChangeEvent(Recordings_AnnotationsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recordings_AnnotationsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Cells_AnnotationsRowChangeEvent : global::System.EventArgs {
            
            private Cells_AnnotationsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Cells_AnnotationsRowChangeEvent(Cells_AnnotationsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Cells_AnnotationsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591