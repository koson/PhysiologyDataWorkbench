//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.312
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace RRLab.PhysiologyDataWorkshop.Experiments.MacroscopicBump {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("MacroscopicRecordingsDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class MacroscopicRecordingsDataSet : System.Data.DataSet {
        
        private MacroscopicRecordingsDataTable tableMacroscopicRecordings;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MacroscopicRecordingsDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
            this.InitExpressions();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected MacroscopicRecordingsDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["MacroscopicRecordings"] != null)) {
                    base.Tables.Add(new MacroscopicRecordingsDataTable(ds.Tables["MacroscopicRecordings"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                this.InitExpressions();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MacroscopicRecordingsDataTable MacroscopicRecordings {
            get {
                return this.tableMacroscopicRecordings;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            MacroscopicRecordingsDataSet cln = ((MacroscopicRecordingsDataSet)(base.Clone()));
            cln.InitVars();
            cln.InitExpressions();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["MacroscopicRecordings"] != null)) {
                    base.Tables.Add(new MacroscopicRecordingsDataTable(ds.Tables["MacroscopicRecordings"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableMacroscopicRecordings = ((MacroscopicRecordingsDataTable)(base.Tables["MacroscopicRecordings"]));
            if ((initTable == true)) {
                if ((this.tableMacroscopicRecordings != null)) {
                    this.tableMacroscopicRecordings.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "MacroscopicRecordingsDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/MacroscopicRecordingsDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableMacroscopicRecordings = new MacroscopicRecordingsDataTable(false);
            base.Tables.Add(this.tableMacroscopicRecordings);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMacroscopicRecordings() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            MacroscopicRecordingsDataSet ds = new MacroscopicRecordingsDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitExpressions() {
            this.MacroscopicRecordings.ResponseHalfWidthColumn.Expression = "FastActivationTime+FastInactivationTime";
        }
        
        public delegate void MacroscopicRecordingsRowChangeEventHandler(object sender, MacroscopicRecordingsRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MacroscopicRecordingsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCellID;
            
            private System.Data.DataColumn columnGenotype;
            
            private System.Data.DataColumn columnAnalysisDate;
            
            private System.Data.DataColumn columnRecorded;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnTitle;
            
            private System.Data.DataColumn columnRelativeLogIntensity;
            
            private System.Data.DataColumn columnCalciumConcentration;
            
            private System.Data.DataColumn columnAmplitude;
            
            private System.Data.DataColumn columnChargeIntegral;
            
            private System.Data.DataColumn columnSlowActivationTime;
            
            private System.Data.DataColumn columnFastActivationTime;
            
            private System.Data.DataColumn columnFastInactivationTime;
            
            private System.Data.DataColumn columnSlowInactivationTime;
            
            private System.Data.DataColumn columnResponseHalfWidth;
            
            private System.Data.DataColumn columnCellDescription;
            
            private System.Data.DataColumn columnRecordingDescription;
            
            private System.Data.DataColumn columnHoldingPotential;
            
            private System.Data.DataColumn columnPipetteResistance;
            
            private System.Data.DataColumn columnSealResistance;
            
            private System.Data.DataColumn columnCellCapacitance;
            
            private System.Data.DataColumn columnSeriesResistance;
            
            private System.Data.DataColumn columnMembraneResistance;
            
            private System.Data.DataColumn columnMembranePotential;
            
            private System.Data.DataColumn columnBreakInTime;
            
            private System.Data.DataColumn columnTimeSinceBreakIn;
            
            private System.Data.DataColumn columnRoughAppearanceRating;
            
            private System.Data.DataColumn columnLengthAppearanceRating;
            
            private System.Data.DataColumn columnShapeAppearanceRating;
            
            private System.Data.DataColumn columnBathSolution;
            
            private System.Data.DataColumn columnPipetteSolution;
            
            private System.Data.DataColumn columnComments;
            
            private System.Data.DataColumn columnTimeOfPeak;
            
            private System.Data.DataColumn columnLatencyTime;
            
            private System.Data.DataColumn columnRecordingID;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MacroscopicRecordingsDataTable() : 
                    this(false) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MacroscopicRecordingsDataTable(bool initExpressions) {
                this.TableName = "MacroscopicRecordings";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MacroscopicRecordingsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MacroscopicRecordingsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CellIDColumn {
                get {
                    return this.columnCellID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GenotypeColumn {
                get {
                    return this.columnGenotype;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AnalysisDateColumn {
                get {
                    return this.columnAnalysisDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RecordedColumn {
                get {
                    return this.columnRecorded;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RelativeLogIntensityColumn {
                get {
                    return this.columnRelativeLogIntensity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CalciumConcentrationColumn {
                get {
                    return this.columnCalciumConcentration;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AmplitudeColumn {
                get {
                    return this.columnAmplitude;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ChargeIntegralColumn {
                get {
                    return this.columnChargeIntegral;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SlowActivationTimeColumn {
                get {
                    return this.columnSlowActivationTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FastActivationTimeColumn {
                get {
                    return this.columnFastActivationTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FastInactivationTimeColumn {
                get {
                    return this.columnFastInactivationTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SlowInactivationTimeColumn {
                get {
                    return this.columnSlowInactivationTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ResponseHalfWidthColumn {
                get {
                    return this.columnResponseHalfWidth;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CellDescriptionColumn {
                get {
                    return this.columnCellDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RecordingDescriptionColumn {
                get {
                    return this.columnRecordingDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HoldingPotentialColumn {
                get {
                    return this.columnHoldingPotential;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PipetteResistanceColumn {
                get {
                    return this.columnPipetteResistance;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SealResistanceColumn {
                get {
                    return this.columnSealResistance;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CellCapacitanceColumn {
                get {
                    return this.columnCellCapacitance;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SeriesResistanceColumn {
                get {
                    return this.columnSeriesResistance;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MembraneResistanceColumn {
                get {
                    return this.columnMembraneResistance;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MembranePotentialColumn {
                get {
                    return this.columnMembranePotential;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BreakInTimeColumn {
                get {
                    return this.columnBreakInTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeSinceBreakInColumn {
                get {
                    return this.columnTimeSinceBreakIn;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RoughAppearanceRatingColumn {
                get {
                    return this.columnRoughAppearanceRating;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LengthAppearanceRatingColumn {
                get {
                    return this.columnLengthAppearanceRating;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ShapeAppearanceRatingColumn {
                get {
                    return this.columnShapeAppearanceRating;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BathSolutionColumn {
                get {
                    return this.columnBathSolution;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PipetteSolutionColumn {
                get {
                    return this.columnPipetteSolution;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeOfPeakColumn {
                get {
                    return this.columnTimeOfPeak;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LatencyTimeColumn {
                get {
                    return this.columnLatencyTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RecordingIDColumn {
                get {
                    return this.columnRecordingID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MacroscopicRecordingsRow this[int index] {
                get {
                    return ((MacroscopicRecordingsRow)(this.Rows[index]));
                }
            }
            
            public event MacroscopicRecordingsRowChangeEventHandler MacroscopicRecordingsRowChanging;
            
            public event MacroscopicRecordingsRowChangeEventHandler MacroscopicRecordingsRowChanged;
            
            public event MacroscopicRecordingsRowChangeEventHandler MacroscopicRecordingsRowDeleting;
            
            public event MacroscopicRecordingsRowChangeEventHandler MacroscopicRecordingsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMacroscopicRecordingsRow(MacroscopicRecordingsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MacroscopicRecordingsRow AddMacroscopicRecordingsRow(
                        string Genotype, 
                        System.DateTime AnalysisDate, 
                        System.DateTime Recorded, 
                        string Name, 
                        string Title, 
                        float RelativeLogIntensity, 
                        float CalciumConcentration, 
                        double Amplitude, 
                        double ChargeIntegral, 
                        float SlowActivationTime, 
                        float FastActivationTime, 
                        float FastInactivationTime, 
                        float SlowInactivationTime, 
                        float ResponseHalfWidth, 
                        string CellDescription, 
                        string RecordingDescription, 
                        short HoldingPotential, 
                        float PipetteResistance, 
                        float SealResistance, 
                        float CellCapacitance, 
                        float SeriesResistance, 
                        float MembraneResistance, 
                        float MembranePotential, 
                        System.DateTime BreakInTime, 
                        System.TimeSpan TimeSinceBreakIn, 
                        ushort RoughAppearanceRating, 
                        ushort LengthAppearanceRating, 
                        ushort ShapeAppearanceRating, 
                        string BathSolution, 
                        string PipetteSolution, 
                        string Comments, 
                        double TimeOfPeak, 
                        float LatencyTime, 
                        long RecordingID) {
                MacroscopicRecordingsRow rowMacroscopicRecordingsRow = ((MacroscopicRecordingsRow)(this.NewRow()));
                rowMacroscopicRecordingsRow.ItemArray = new object[] {
                        null,
                        Genotype,
                        AnalysisDate,
                        Recorded,
                        Name,
                        Title,
                        RelativeLogIntensity,
                        CalciumConcentration,
                        Amplitude,
                        ChargeIntegral,
                        SlowActivationTime,
                        FastActivationTime,
                        FastInactivationTime,
                        SlowInactivationTime,
                        ResponseHalfWidth,
                        CellDescription,
                        RecordingDescription,
                        HoldingPotential,
                        PipetteResistance,
                        SealResistance,
                        CellCapacitance,
                        SeriesResistance,
                        MembraneResistance,
                        MembranePotential,
                        BreakInTime,
                        TimeSinceBreakIn,
                        RoughAppearanceRating,
                        LengthAppearanceRating,
                        ShapeAppearanceRating,
                        BathSolution,
                        PipetteSolution,
                        Comments,
                        TimeOfPeak,
                        LatencyTime,
                        RecordingID};
                this.Rows.Add(rowMacroscopicRecordingsRow);
                return rowMacroscopicRecordingsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MacroscopicRecordingsRow FindByRecordingID(long RecordingID) {
                return ((MacroscopicRecordingsRow)(this.Rows.Find(new object[] {
                            RecordingID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MacroscopicRecordingsDataTable cln = ((MacroscopicRecordingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MacroscopicRecordingsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCellID = base.Columns["CellID"];
                this.columnGenotype = base.Columns["Genotype"];
                this.columnAnalysisDate = base.Columns["AnalysisDate"];
                this.columnRecorded = base.Columns["Recorded"];
                this.columnName = base.Columns["Name"];
                this.columnTitle = base.Columns["Title"];
                this.columnRelativeLogIntensity = base.Columns["RelativeLogIntensity"];
                this.columnCalciumConcentration = base.Columns["CalciumConcentration"];
                this.columnAmplitude = base.Columns["Amplitude"];
                this.columnChargeIntegral = base.Columns["ChargeIntegral"];
                this.columnSlowActivationTime = base.Columns["SlowActivationTime"];
                this.columnFastActivationTime = base.Columns["FastActivationTime"];
                this.columnFastInactivationTime = base.Columns["FastInactivationTime"];
                this.columnSlowInactivationTime = base.Columns["SlowInactivationTime"];
                this.columnResponseHalfWidth = base.Columns["ResponseHalfWidth"];
                this.columnCellDescription = base.Columns["CellDescription"];
                this.columnRecordingDescription = base.Columns["RecordingDescription"];
                this.columnHoldingPotential = base.Columns["HoldingPotential"];
                this.columnPipetteResistance = base.Columns["PipetteResistance"];
                this.columnSealResistance = base.Columns["SealResistance"];
                this.columnCellCapacitance = base.Columns["CellCapacitance"];
                this.columnSeriesResistance = base.Columns["SeriesResistance"];
                this.columnMembraneResistance = base.Columns["MembraneResistance"];
                this.columnMembranePotential = base.Columns["MembranePotential"];
                this.columnBreakInTime = base.Columns["BreakInTime"];
                this.columnTimeSinceBreakIn = base.Columns["TimeSinceBreakIn"];
                this.columnRoughAppearanceRating = base.Columns["RoughAppearanceRating"];
                this.columnLengthAppearanceRating = base.Columns["LengthAppearanceRating"];
                this.columnShapeAppearanceRating = base.Columns["ShapeAppearanceRating"];
                this.columnBathSolution = base.Columns["BathSolution"];
                this.columnPipetteSolution = base.Columns["PipetteSolution"];
                this.columnComments = base.Columns["Comments"];
                this.columnTimeOfPeak = base.Columns["TimeOfPeak"];
                this.columnLatencyTime = base.Columns["LatencyTime"];
                this.columnRecordingID = base.Columns["RecordingID"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCellID = new System.Data.DataColumn("CellID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCellID);
                this.columnGenotype = new System.Data.DataColumn("Genotype", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGenotype);
                this.columnAnalysisDate = new System.Data.DataColumn("AnalysisDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAnalysisDate);
                this.columnRecorded = new System.Data.DataColumn("Recorded", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecorded);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnTitle = new System.Data.DataColumn("Title", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.columnRelativeLogIntensity = new System.Data.DataColumn("RelativeLogIntensity", typeof(float), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRelativeLogIntensity);
                this.columnCalciumConcentration = new System.Data.DataColumn("CalciumConcentration", typeof(float), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCalciumConcentration);
                this.columnAmplitude = new System.Data.DataColumn("Amplitude", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmplitude);
                this.columnChargeIntegral = new System.Data.DataColumn("ChargeIntegral", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnChargeIntegral);
                this.columnSlowActivationTime = new System.Data.DataColumn("SlowActivationTime", typeof(float), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSlowActivationTime);
                this.columnFastActivationTime = new System.Data.DataColumn("FastActivationTime", typeof(float), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFastActivationTime);
                this.columnFastInactivationTime = new System.Data.DataColumn("FastInactivationTime", typeof(float), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFastInactivationTime);
                this.columnSlowInactivationTime = new System.Data.DataColumn("SlowInactivationTime", typeof(float), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSlowInactivationTime);
                this.columnResponseHalfWidth = new System.Data.DataColumn("ResponseHalfWidth", typeof(float), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnResponseHalfWidth);
                this.columnCellDescription = new System.Data.DataColumn("CellDescription", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCellDescription);
                this.columnRecordingDescription = new System.Data.DataColumn("RecordingDescription", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecordingDescription);
                this.columnHoldingPotential = new System.Data.DataColumn("HoldingPotential", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHoldingPotential);
                this.columnPipetteResistance = new System.Data.DataColumn("PipetteResistance", typeof(float), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipetteResistance);
                this.columnSealResistance = new System.Data.DataColumn("SealResistance", typeof(float), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSealResistance);
                this.columnCellCapacitance = new System.Data.DataColumn("CellCapacitance", typeof(float), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCellCapacitance);
                this.columnSeriesResistance = new System.Data.DataColumn("SeriesResistance", typeof(float), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeriesResistance);
                this.columnMembraneResistance = new System.Data.DataColumn("MembraneResistance", typeof(float), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMembraneResistance);
                this.columnMembranePotential = new System.Data.DataColumn("MembranePotential", typeof(float), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMembranePotential);
                this.columnBreakInTime = new System.Data.DataColumn("BreakInTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreakInTime);
                this.columnTimeSinceBreakIn = new System.Data.DataColumn("TimeSinceBreakIn", typeof(System.TimeSpan), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeSinceBreakIn);
                this.columnRoughAppearanceRating = new System.Data.DataColumn("RoughAppearanceRating", typeof(ushort), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRoughAppearanceRating);
                this.columnLengthAppearanceRating = new System.Data.DataColumn("LengthAppearanceRating", typeof(ushort), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLengthAppearanceRating);
                this.columnShapeAppearanceRating = new System.Data.DataColumn("ShapeAppearanceRating", typeof(ushort), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnShapeAppearanceRating);
                this.columnBathSolution = new System.Data.DataColumn("BathSolution", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBathSolution);
                this.columnPipetteSolution = new System.Data.DataColumn("PipetteSolution", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipetteSolution);
                this.columnComments = new System.Data.DataColumn("Comments", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnTimeOfPeak = new System.Data.DataColumn("TimeOfPeak", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeOfPeak);
                this.columnLatencyTime = new System.Data.DataColumn("LatencyTime", typeof(float), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLatencyTime);
                this.columnRecordingID = new System.Data.DataColumn("RecordingID", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecordingID);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnRecordingID}, true));
                this.columnCellID.AutoIncrement = true;
                this.columnCellID.ReadOnly = true;
                this.columnGenotype.ReadOnly = true;
                this.columnGenotype.MaxLength = 200;
                this.columnAnalysisDate.AllowDBNull = false;
                this.columnRecorded.ReadOnly = true;
                this.columnName.ReadOnly = true;
                this.columnName.MaxLength = 200;
                this.columnTitle.ReadOnly = true;
                this.columnTitle.MaxLength = 200;
                this.columnRelativeLogIntensity.AllowDBNull = false;
                this.columnCalciumConcentration.AllowDBNull = false;
                this.columnResponseHalfWidth.ReadOnly = true;
                this.columnResponseHalfWidth.Caption = "Response Half-Width (ms)";
                this.columnCellDescription.ReadOnly = true;
                this.columnCellDescription.MaxLength = 1000;
                this.columnRecordingDescription.ReadOnly = true;
                this.columnRecordingDescription.MaxLength = 1000;
                this.columnHoldingPotential.ReadOnly = true;
                this.columnPipetteResistance.ReadOnly = true;
                this.columnSealResistance.ReadOnly = true;
                this.columnCellCapacitance.ReadOnly = true;
                this.columnSeriesResistance.ReadOnly = true;
                this.columnMembraneResistance.ReadOnly = true;
                this.columnMembranePotential.ReadOnly = true;
                this.columnBreakInTime.ReadOnly = true;
                this.columnTimeSinceBreakIn.ReadOnly = true;
                this.columnRoughAppearanceRating.ReadOnly = true;
                this.columnLengthAppearanceRating.ReadOnly = true;
                this.columnShapeAppearanceRating.ReadOnly = true;
                this.columnBathSolution.ReadOnly = true;
                this.columnBathSolution.MaxLength = 500;
                this.columnPipetteSolution.ReadOnly = true;
                this.columnPipetteSolution.MaxLength = 500;
                this.columnComments.MaxLength = 65535;
                this.columnRecordingID.AllowDBNull = false;
                this.columnRecordingID.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MacroscopicRecordingsRow NewMacroscopicRecordingsRow() {
                return ((MacroscopicRecordingsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MacroscopicRecordingsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MacroscopicRecordingsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.ResponseHalfWidthColumn.Expression = "FastActivationTime+FastInactivationTime";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MacroscopicRecordingsRowChanged != null)) {
                    this.MacroscopicRecordingsRowChanged(this, new MacroscopicRecordingsRowChangeEvent(((MacroscopicRecordingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MacroscopicRecordingsRowChanging != null)) {
                    this.MacroscopicRecordingsRowChanging(this, new MacroscopicRecordingsRowChangeEvent(((MacroscopicRecordingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MacroscopicRecordingsRowDeleted != null)) {
                    this.MacroscopicRecordingsRowDeleted(this, new MacroscopicRecordingsRowChangeEvent(((MacroscopicRecordingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MacroscopicRecordingsRowDeleting != null)) {
                    this.MacroscopicRecordingsRowDeleting(this, new MacroscopicRecordingsRowChangeEvent(((MacroscopicRecordingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMacroscopicRecordingsRow(MacroscopicRecordingsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MacroscopicRecordingsDataSet ds = new MacroscopicRecordingsDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MacroscopicRecordingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MacroscopicRecordingsRow : System.Data.DataRow {
            
            private MacroscopicRecordingsDataTable tableMacroscopicRecordings;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MacroscopicRecordingsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMacroscopicRecordings = ((MacroscopicRecordingsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CellID {
                get {
                    try {
                        return ((int)(this[this.tableMacroscopicRecordings.CellIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CellID\' in table \'MacroscopicRecordings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMacroscopicRecordings.CellIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Genotype {
                get {
                    try {
                        return ((string)(this[this.tableMacroscopicRecordings.GenotypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Genotype\' in table \'MacroscopicRecordings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMacroscopicRecordings.GenotypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AnalysisDate {
                get {
                    return ((System.DateTime)(this[this.tableMacroscopicRecordings.AnalysisDateColumn]));
                }
                set {
                    this[this.tableMacroscopicRecordings.AnalysisDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Recorded {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableMacroscopicRecordings.RecordedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Recorded\' in table \'MacroscopicRecordings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMacroscopicRecordings.RecordedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableMacroscopicRecordings.NameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Name\' in table \'MacroscopicRecordings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMacroscopicRecordings.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Title {
                get {
                    try {
                        return ((string)(this[this.tableMacroscopicRecordings.TitleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Title\' in table \'MacroscopicRecordings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMacroscopicRecordings.TitleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float RelativeLogIntensity {
                get {
                    return ((float)(this[this.tableMacroscopicRecordings.RelativeLogIntensityColumn]));
                }
                set {
                    this[this.tableMacroscopicRecordings.RelativeLogIntensityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float CalciumConcentration {
                get {
                    return ((float)(this[this.tableMacroscopicRecordings.CalciumConcentrationColumn]));
                }
                set {
                    this[this.tableMacroscopicRecordings.CalciumConcentrationColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Amplitude {
                get {
                    try {
                        return ((double)(this[this.tableMacroscopicRecordings.AmplitudeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Amplitude\' in table \'MacroscopicRecordings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMacroscopicRecordings.AmplitudeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ChargeIntegral {
                get {
                    try {
                        return ((double)(this[this.tableMacroscopicRecordings.ChargeIntegralColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ChargeIntegral\' in table \'MacroscopicRecordings\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableMacroscopicRecordings.ChargeIntegralColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float SlowActivationTime {
                get {
                    try {
                        return ((float)(this[this.tableMacroscopicRecordings.SlowActivationTimeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SlowActivationTime\' in table \'MacroscopicRecordings\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableMacroscopicRecordings.SlowActivationTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float FastActivationTime {
                get {
                    try {
                        return ((float)(this[this.tableMacroscopicRecordings.FastActivationTimeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FastActivationTime\' in table \'MacroscopicRecordings\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableMacroscopicRecordings.FastActivationTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float FastInactivationTime {
                get {
                    try {
                        return ((float)(this[this.tableMacroscopicRecordings.FastInactivationTimeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FastInactivationTime\' in table \'MacroscopicRecordings\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableMacroscopicRecordings.FastInactivationTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float SlowInactivationTime {
                get {
                    try {
                        return ((float)(this[this.tableMacroscopicRecordings.SlowInactivationTimeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SlowInactivationTime\' in table \'MacroscopicRecordings\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableMacroscopicRecordings.SlowInactivationTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float ResponseHalfWidth {
                get {
                    try {
                        return ((float)(this[this.tableMacroscopicRecordings.ResponseHalfWidthColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ResponseHalfWidth\' in table \'MacroscopicRecordings\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableMacroscopicRecordings.ResponseHalfWidthColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CellDescription {
                get {
                    try {
                        return ((string)(this[this.tableMacroscopicRecordings.CellDescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CellDescription\' in table \'MacroscopicRecordings\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableMacroscopicRecordings.CellDescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RecordingDescription {
                get {
                    try {
                        return ((string)(this[this.tableMacroscopicRecordings.RecordingDescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RecordingDescription\' in table \'MacroscopicRecordings\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableMacroscopicRecordings.RecordingDescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short HoldingPotential {
                get {
                    try {
                        return ((short)(this[this.tableMacroscopicRecordings.HoldingPotentialColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HoldingPotential\' in table \'MacroscopicRecordings\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableMacroscopicRecordings.HoldingPotentialColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float PipetteResistance {
                get {
                    try {
                        return ((float)(this[this.tableMacroscopicRecordings.PipetteResistanceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PipetteResistance\' in table \'MacroscopicRecordings\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableMacroscopicRecordings.PipetteResistanceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float SealResistance {
                get {
                    try {
                        return ((float)(this[this.tableMacroscopicRecordings.SealResistanceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SealResistance\' in table \'MacroscopicRecordings\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableMacroscopicRecordings.SealResistanceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float CellCapacitance {
                get {
                    try {
                        return ((float)(this[this.tableMacroscopicRecordings.CellCapacitanceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CellCapacitance\' in table \'MacroscopicRecordings\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableMacroscopicRecordings.CellCapacitanceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float SeriesResistance {
                get {
                    try {
                        return ((float)(this[this.tableMacroscopicRecordings.SeriesResistanceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SeriesResistance\' in table \'MacroscopicRecordings\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableMacroscopicRecordings.SeriesResistanceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float MembraneResistance {
                get {
                    try {
                        return ((float)(this[this.tableMacroscopicRecordings.MembraneResistanceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MembraneResistance\' in table \'MacroscopicRecordings\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableMacroscopicRecordings.MembraneResistanceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float MembranePotential {
                get {
                    try {
                        return ((float)(this[this.tableMacroscopicRecordings.MembranePotentialColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MembranePotential\' in table \'MacroscopicRecordings\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableMacroscopicRecordings.MembranePotentialColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime BreakInTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableMacroscopicRecordings.BreakInTimeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BreakInTime\' in table \'MacroscopicRecordings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMacroscopicRecordings.BreakInTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.TimeSpan TimeSinceBreakIn {
                get {
                    try {
                        return ((System.TimeSpan)(this[this.tableMacroscopicRecordings.TimeSinceBreakInColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TimeSinceBreakIn\' in table \'MacroscopicRecordings\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableMacroscopicRecordings.TimeSinceBreakInColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort RoughAppearanceRating {
                get {
                    try {
                        return ((ushort)(this[this.tableMacroscopicRecordings.RoughAppearanceRatingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RoughAppearanceRating\' in table \'MacroscopicRecordings\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableMacroscopicRecordings.RoughAppearanceRatingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort LengthAppearanceRating {
                get {
                    try {
                        return ((ushort)(this[this.tableMacroscopicRecordings.LengthAppearanceRatingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LengthAppearanceRating\' in table \'MacroscopicRecordings\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableMacroscopicRecordings.LengthAppearanceRatingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort ShapeAppearanceRating {
                get {
                    try {
                        return ((ushort)(this[this.tableMacroscopicRecordings.ShapeAppearanceRatingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ShapeAppearanceRating\' in table \'MacroscopicRecordings\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableMacroscopicRecordings.ShapeAppearanceRatingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BathSolution {
                get {
                    try {
                        return ((string)(this[this.tableMacroscopicRecordings.BathSolutionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BathSolution\' in table \'MacroscopicRecordings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMacroscopicRecordings.BathSolutionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PipetteSolution {
                get {
                    try {
                        return ((string)(this[this.tableMacroscopicRecordings.PipetteSolutionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PipetteSolution\' in table \'MacroscopicRecordings\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableMacroscopicRecordings.PipetteSolutionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableMacroscopicRecordings.CommentsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Comments\' in table \'MacroscopicRecordings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMacroscopicRecordings.CommentsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TimeOfPeak {
                get {
                    try {
                        return ((double)(this[this.tableMacroscopicRecordings.TimeOfPeakColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TimeOfPeak\' in table \'MacroscopicRecordings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMacroscopicRecordings.TimeOfPeakColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float LatencyTime {
                get {
                    try {
                        return ((float)(this[this.tableMacroscopicRecordings.LatencyTimeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LatencyTime\' in table \'MacroscopicRecordings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMacroscopicRecordings.LatencyTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RecordingID {
                get {
                    return ((long)(this[this.tableMacroscopicRecordings.RecordingIDColumn]));
                }
                set {
                    this[this.tableMacroscopicRecordings.RecordingIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCellIDNull() {
                return this.IsNull(this.tableMacroscopicRecordings.CellIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCellIDNull() {
                this[this.tableMacroscopicRecordings.CellIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGenotypeNull() {
                return this.IsNull(this.tableMacroscopicRecordings.GenotypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGenotypeNull() {
                this[this.tableMacroscopicRecordings.GenotypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecordedNull() {
                return this.IsNull(this.tableMacroscopicRecordings.RecordedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecordedNull() {
                this[this.tableMacroscopicRecordings.RecordedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableMacroscopicRecordings.NameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableMacroscopicRecordings.NameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTitleNull() {
                return this.IsNull(this.tableMacroscopicRecordings.TitleColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTitleNull() {
                this[this.tableMacroscopicRecordings.TitleColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmplitudeNull() {
                return this.IsNull(this.tableMacroscopicRecordings.AmplitudeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmplitudeNull() {
                this[this.tableMacroscopicRecordings.AmplitudeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChargeIntegralNull() {
                return this.IsNull(this.tableMacroscopicRecordings.ChargeIntegralColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChargeIntegralNull() {
                this[this.tableMacroscopicRecordings.ChargeIntegralColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSlowActivationTimeNull() {
                return this.IsNull(this.tableMacroscopicRecordings.SlowActivationTimeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSlowActivationTimeNull() {
                this[this.tableMacroscopicRecordings.SlowActivationTimeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFastActivationTimeNull() {
                return this.IsNull(this.tableMacroscopicRecordings.FastActivationTimeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFastActivationTimeNull() {
                this[this.tableMacroscopicRecordings.FastActivationTimeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFastInactivationTimeNull() {
                return this.IsNull(this.tableMacroscopicRecordings.FastInactivationTimeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFastInactivationTimeNull() {
                this[this.tableMacroscopicRecordings.FastInactivationTimeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSlowInactivationTimeNull() {
                return this.IsNull(this.tableMacroscopicRecordings.SlowInactivationTimeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSlowInactivationTimeNull() {
                this[this.tableMacroscopicRecordings.SlowInactivationTimeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResponseHalfWidthNull() {
                return this.IsNull(this.tableMacroscopicRecordings.ResponseHalfWidthColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResponseHalfWidthNull() {
                this[this.tableMacroscopicRecordings.ResponseHalfWidthColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCellDescriptionNull() {
                return this.IsNull(this.tableMacroscopicRecordings.CellDescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCellDescriptionNull() {
                this[this.tableMacroscopicRecordings.CellDescriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecordingDescriptionNull() {
                return this.IsNull(this.tableMacroscopicRecordings.RecordingDescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecordingDescriptionNull() {
                this[this.tableMacroscopicRecordings.RecordingDescriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHoldingPotentialNull() {
                return this.IsNull(this.tableMacroscopicRecordings.HoldingPotentialColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHoldingPotentialNull() {
                this[this.tableMacroscopicRecordings.HoldingPotentialColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipetteResistanceNull() {
                return this.IsNull(this.tableMacroscopicRecordings.PipetteResistanceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipetteResistanceNull() {
                this[this.tableMacroscopicRecordings.PipetteResistanceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSealResistanceNull() {
                return this.IsNull(this.tableMacroscopicRecordings.SealResistanceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSealResistanceNull() {
                this[this.tableMacroscopicRecordings.SealResistanceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCellCapacitanceNull() {
                return this.IsNull(this.tableMacroscopicRecordings.CellCapacitanceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCellCapacitanceNull() {
                this[this.tableMacroscopicRecordings.CellCapacitanceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeriesResistanceNull() {
                return this.IsNull(this.tableMacroscopicRecordings.SeriesResistanceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeriesResistanceNull() {
                this[this.tableMacroscopicRecordings.SeriesResistanceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMembraneResistanceNull() {
                return this.IsNull(this.tableMacroscopicRecordings.MembraneResistanceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMembraneResistanceNull() {
                this[this.tableMacroscopicRecordings.MembraneResistanceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMembranePotentialNull() {
                return this.IsNull(this.tableMacroscopicRecordings.MembranePotentialColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMembranePotentialNull() {
                this[this.tableMacroscopicRecordings.MembranePotentialColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreakInTimeNull() {
                return this.IsNull(this.tableMacroscopicRecordings.BreakInTimeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreakInTimeNull() {
                this[this.tableMacroscopicRecordings.BreakInTimeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeSinceBreakInNull() {
                return this.IsNull(this.tableMacroscopicRecordings.TimeSinceBreakInColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeSinceBreakInNull() {
                this[this.tableMacroscopicRecordings.TimeSinceBreakInColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRoughAppearanceRatingNull() {
                return this.IsNull(this.tableMacroscopicRecordings.RoughAppearanceRatingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRoughAppearanceRatingNull() {
                this[this.tableMacroscopicRecordings.RoughAppearanceRatingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLengthAppearanceRatingNull() {
                return this.IsNull(this.tableMacroscopicRecordings.LengthAppearanceRatingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLengthAppearanceRatingNull() {
                this[this.tableMacroscopicRecordings.LengthAppearanceRatingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShapeAppearanceRatingNull() {
                return this.IsNull(this.tableMacroscopicRecordings.ShapeAppearanceRatingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShapeAppearanceRatingNull() {
                this[this.tableMacroscopicRecordings.ShapeAppearanceRatingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBathSolutionNull() {
                return this.IsNull(this.tableMacroscopicRecordings.BathSolutionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBathSolutionNull() {
                this[this.tableMacroscopicRecordings.BathSolutionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipetteSolutionNull() {
                return this.IsNull(this.tableMacroscopicRecordings.PipetteSolutionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipetteSolutionNull() {
                this[this.tableMacroscopicRecordings.PipetteSolutionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableMacroscopicRecordings.CommentsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tableMacroscopicRecordings.CommentsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeOfPeakNull() {
                return this.IsNull(this.tableMacroscopicRecordings.TimeOfPeakColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeOfPeakNull() {
                this[this.tableMacroscopicRecordings.TimeOfPeakColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLatencyTimeNull() {
                return this.IsNull(this.tableMacroscopicRecordings.LatencyTimeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLatencyTimeNull() {
                this[this.tableMacroscopicRecordings.LatencyTimeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MacroscopicRecordingsRowChangeEvent : System.EventArgs {
            
            private MacroscopicRecordingsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MacroscopicRecordingsRowChangeEvent(MacroscopicRecordingsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MacroscopicRecordingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace RRLab.PhysiologyDataWorkshop.Experiments.MacroscopicBump.MacroscopicRecordingsDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MacroscopicRecordingsTableAdapter : System.ComponentModel.Component {
        
        private MySql.Data.MySqlClient.MySqlDataAdapter _adapter;
        
        private MySql.Data.MySqlClient.MySqlConnection _connection;
        
        private MySql.Data.MySqlClient.MySqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MacroscopicRecordingsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private MySql.Data.MySqlClient.MySqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal MySql.Data.MySqlClient.MySqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((MySql.Data.MySqlClient.MySqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected MySql.Data.MySqlClient.MySqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new MySql.Data.MySqlClient.MySqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MacroscopicRecordings";
            tableMapping.ColumnMappings.Add("CellID", "CellID");
            tableMapping.ColumnMappings.Add("Genotype", "Genotype");
            tableMapping.ColumnMappings.Add("AnalysisDate", "AnalysisDate");
            tableMapping.ColumnMappings.Add("Recorded", "Recorded");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("Title", "Title");
            tableMapping.ColumnMappings.Add("RelativeLogIntensity", "RelativeLogIntensity");
            tableMapping.ColumnMappings.Add("CalciumConcentration", "CalciumConcentration");
            tableMapping.ColumnMappings.Add("Amplitude", "Amplitude");
            tableMapping.ColumnMappings.Add("ChargeIntegral", "ChargeIntegral");
            tableMapping.ColumnMappings.Add("SlowActivationTime", "SlowActivationTime");
            tableMapping.ColumnMappings.Add("FastActivationTime", "FastActivationTime");
            tableMapping.ColumnMappings.Add("FastInactivationTime", "FastInactivationTime");
            tableMapping.ColumnMappings.Add("SlowInactivationTime", "SlowInactivationTime");
            tableMapping.ColumnMappings.Add("CellDescription", "CellDescription");
            tableMapping.ColumnMappings.Add("RecordingDescription", "RecordingDescription");
            tableMapping.ColumnMappings.Add("HoldingPotential", "HoldingPotential");
            tableMapping.ColumnMappings.Add("PipetteResistance", "PipetteResistance");
            tableMapping.ColumnMappings.Add("SealResistance", "SealResistance");
            tableMapping.ColumnMappings.Add("CellCapacitance", "CellCapacitance");
            tableMapping.ColumnMappings.Add("SeriesResistance", "SeriesResistance");
            tableMapping.ColumnMappings.Add("MembraneResistance", "MembraneResistance");
            tableMapping.ColumnMappings.Add("MembranePotential", "MembranePotential");
            tableMapping.ColumnMappings.Add("BreakInTime", "BreakInTime");
            tableMapping.ColumnMappings.Add("RoughAppearanceRating", "RoughAppearanceRating");
            tableMapping.ColumnMappings.Add("LengthAppearanceRating", "LengthAppearanceRating");
            tableMapping.ColumnMappings.Add("ShapeAppearanceRating", "ShapeAppearanceRating");
            tableMapping.ColumnMappings.Add("BathSolution", "BathSolution");
            tableMapping.ColumnMappings.Add("PipetteSolution", "PipetteSolution");
            tableMapping.ColumnMappings.Add("Comments", "Comments");
            tableMapping.ColumnMappings.Add("LatencyTime", "LatencyTime");
            tableMapping.ColumnMappings.Add("RecordingID", "RecordingID");
            tableMapping.ColumnMappings.Add("TimeSinceBreakIn", "TimeSinceBreakIn");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new MySql.Data.MySqlClient.MySqlConnection();
            this._connection.ConnectionString = global::RRLab.PhysiologyDataWorkshop.Properties.Settings.Default.physiology_dataConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new MySql.Data.MySqlClient.MySqlCommand[1];
            this._commandCollection[0] = new MySql.Data.MySqlClient.MySqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT        cells.CellID, expt_macro.RecordingID, genotypes.Genotype, expt_macro.AnalysisDate, recordings.Recorded, users.Name, recordings.Title, expt_macro.RelativeLogIntensity, 
                         expt_macro.CalciumConcentration, expt_macro.Amplitude, expt_macro.TimeOfPeak, expt_macro.ChargeIntegral, expt_macro.LatencyTime, expt_macro.SlowActivationTime, expt_macro.FastActivationTime, 
                         expt_macro.FastInactivationTime, expt_macro.SlowInactivationTime, cells.Description AS CellDescription, recordings.Description AS RecordingDescription, 
                         recordings.HoldingPotential, cells.PipetteResistance, cells.SealResistance, cells.CellCapacitance, cells.SeriesResistance, cells.MembraneResistance, 
                         cells.MembranePotential, cells.BreakInTime, timediff(cells.BreakInTime, recordings.Recorded) AS TimeSinceBreakIn, cells.RoughAppearanceRating, 
                         cells.LengthAppearanceRating, cells.ShapeAppearanceRating, recordings.BathSolution, recordings.PipetteSolution, expt_macro.Comments
FROM            expt_macro, cells, recordings, users, genotypes
WHERE        (expt_macro.RecordingID = recordings.RecordingID) AND (recordings.CellID = cells.CellID) AND (cells.FlyStockID = genotypes.FlyStockID) AND 
                         (cells.UserID = users.UserID)";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MacroscopicRecordingsDataSet.MacroscopicRecordingsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MacroscopicRecordingsDataSet.MacroscopicRecordingsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MacroscopicRecordingsDataSet.MacroscopicRecordingsDataTable dataTable = new MacroscopicRecordingsDataSet.MacroscopicRecordingsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591