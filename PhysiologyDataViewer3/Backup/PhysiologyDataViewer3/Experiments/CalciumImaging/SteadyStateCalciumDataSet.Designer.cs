//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.312
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace RRLab.PhysiologyDataWorkshop.Experiments.CalciumImaging {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("SteadyStateCalciumDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class SteadyStateCalciumDataSet : System.Data.DataSet {
        
        private SteadyStateCalciumExperimentsDataTable tableSteadyStateCalciumExperiments;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SteadyStateCalciumDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
            this.InitExpressions();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected SteadyStateCalciumDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["SteadyStateCalciumExperiments"] != null)) {
                    base.Tables.Add(new SteadyStateCalciumExperimentsDataTable(ds.Tables["SteadyStateCalciumExperiments"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                this.InitExpressions();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SteadyStateCalciumExperimentsDataTable SteadyStateCalciumExperiments {
            get {
                return this.tableSteadyStateCalciumExperiments;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            SteadyStateCalciumDataSet cln = ((SteadyStateCalciumDataSet)(base.Clone()));
            cln.InitVars();
            cln.InitExpressions();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["SteadyStateCalciumExperiments"] != null)) {
                    base.Tables.Add(new SteadyStateCalciumExperimentsDataTable(ds.Tables["SteadyStateCalciumExperiments"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSteadyStateCalciumExperiments = ((SteadyStateCalciumExperimentsDataTable)(base.Tables["SteadyStateCalciumExperiments"]));
            if ((initTable == true)) {
                if ((this.tableSteadyStateCalciumExperiments != null)) {
                    this.tableSteadyStateCalciumExperiments.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "SteadyStateCalciumDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/SteadyStateCalciumDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSteadyStateCalciumExperiments = new SteadyStateCalciumExperimentsDataTable(false);
            base.Tables.Add(this.tableSteadyStateCalciumExperiments);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSteadyStateCalciumExperiments() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            SteadyStateCalciumDataSet ds = new SteadyStateCalciumDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitExpressions() {
            this.SteadyStateCalciumExperiments.FluorescenceFoldIncreaseColumn.Expression = "HighAverageFluorescence/LowAverageFluorescence";
            this.SteadyStateCalciumExperiments.FluorescenceDynamicRangeColumn.Expression = "HighAverageFluorescence-LowAverageFluorescence";
        }
        
        public delegate void SteadyStateCalciumExperimentsRowChangeEventHandler(object sender, SteadyStateCalciumExperimentsRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SteadyStateCalciumExperimentsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCellID;
            
            private System.Data.DataColumn columnAnalyzed;
            
            private System.Data.DataColumn columnRecorded;
            
            private System.Data.DataColumn columnExperimenter;
            
            private System.Data.DataColumn columnGenotype;
            
            private System.Data.DataColumn columnCalciumConcentration;
            
            private System.Data.DataColumn columnIsDarkAdapted;
            
            private System.Data.DataColumn columnSignalRecordingID;
            
            private System.Data.DataColumn columnHighRecordingID;
            
            private System.Data.DataColumn columnLowRecordingID;
            
            private System.Data.DataColumn columnProcessedSignalRecordingID;
            
            private System.Data.DataColumn columnSignalInitialFluorescence;
            
            private System.Data.DataColumn columnSignalPeakFluorescence;
            
            private System.Data.DataColumn columnSignalAverageFluorescence;
            
            private System.Data.DataColumn columnSignalFluorescenceError;
            
            private System.Data.DataColumn columnHighAverageFluorescence;
            
            private System.Data.DataColumn columnHighFluorescenceError;
            
            private System.Data.DataColumn columnLowAverageFluorescence;
            
            private System.Data.DataColumn columnLowFluorescenceError;
            
            private System.Data.DataColumn columnFluorescenceFoldIncrease;
            
            private System.Data.DataColumn columnFluorescenceDynamicRange;
            
            private System.Data.DataColumn columnSteadyStateCalcium;
            
            private System.Data.DataColumn columnSteadyStateCalciumError;
            
            private System.Data.DataColumn columnInitialCalcium;
            
            private System.Data.DataColumn columnInitialCalciumError;
            
            private System.Data.DataColumn columnPeakCalcium;
            
            private System.Data.DataColumn columnPeakCalciumError;
            
            private System.Data.DataColumn columnTimeToPeak;
            
            private System.Data.DataColumn columnTimeToSteadyState;
            
            private System.Data.DataColumn columnComments;
            
            private System.Data.DataColumn columnPipetteResistance;
            
            private System.Data.DataColumn columnSealResistance;
            
            private System.Data.DataColumn columnCellCapacitance;
            
            private System.Data.DataColumn columnMembraneResistance;
            
            private System.Data.DataColumn columnSeriesResistance;
            
            private System.Data.DataColumn columnHoldingPotential;
            
            private System.Data.DataColumn columnPipetteSolution;
            
            private System.Data.DataColumn columnBathSolution;
            
            private System.Data.DataColumn columnHighBathSolution;
            
            private System.Data.DataColumn columnLowBathSolution;
            
            private System.Data.DataColumn columnRoughAppearanceRating;
            
            private System.Data.DataColumn columnLengthAppearanceRating;
            
            private System.Data.DataColumn columnShapeAppearanceRating;
            
            private System.Data.DataColumn columnBreakInTime;
            
            private System.Data.DataColumn columnTimeSinceBreakIn;
            
            private System.Data.DataColumn columnHighMeasurementDelay;
            
            private System.Data.DataColumn columnLowMeasurementDelay;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SteadyStateCalciumExperimentsDataTable() : 
                    this(false) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SteadyStateCalciumExperimentsDataTable(bool initExpressions) {
                this.TableName = "SteadyStateCalciumExperiments";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SteadyStateCalciumExperimentsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SteadyStateCalciumExperimentsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CellIDColumn {
                get {
                    return this.columnCellID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AnalyzedColumn {
                get {
                    return this.columnAnalyzed;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RecordedColumn {
                get {
                    return this.columnRecorded;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ExperimenterColumn {
                get {
                    return this.columnExperimenter;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GenotypeColumn {
                get {
                    return this.columnGenotype;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CalciumConcentrationColumn {
                get {
                    return this.columnCalciumConcentration;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsDarkAdaptedColumn {
                get {
                    return this.columnIsDarkAdapted;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SignalRecordingIDColumn {
                get {
                    return this.columnSignalRecordingID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HighRecordingIDColumn {
                get {
                    return this.columnHighRecordingID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LowRecordingIDColumn {
                get {
                    return this.columnLowRecordingID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProcessedSignalRecordingIDColumn {
                get {
                    return this.columnProcessedSignalRecordingID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SignalInitialFluorescenceColumn {
                get {
                    return this.columnSignalInitialFluorescence;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SignalPeakFluorescenceColumn {
                get {
                    return this.columnSignalPeakFluorescence;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SignalAverageFluorescenceColumn {
                get {
                    return this.columnSignalAverageFluorescence;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SignalFluorescenceErrorColumn {
                get {
                    return this.columnSignalFluorescenceError;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HighAverageFluorescenceColumn {
                get {
                    return this.columnHighAverageFluorescence;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HighFluorescenceErrorColumn {
                get {
                    return this.columnHighFluorescenceError;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LowAverageFluorescenceColumn {
                get {
                    return this.columnLowAverageFluorescence;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LowFluorescenceErrorColumn {
                get {
                    return this.columnLowFluorescenceError;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FluorescenceFoldIncreaseColumn {
                get {
                    return this.columnFluorescenceFoldIncrease;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FluorescenceDynamicRangeColumn {
                get {
                    return this.columnFluorescenceDynamicRange;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SteadyStateCalciumColumn {
                get {
                    return this.columnSteadyStateCalcium;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SteadyStateCalciumErrorColumn {
                get {
                    return this.columnSteadyStateCalciumError;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn InitialCalciumColumn {
                get {
                    return this.columnInitialCalcium;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn InitialCalciumErrorColumn {
                get {
                    return this.columnInitialCalciumError;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PeakCalciumColumn {
                get {
                    return this.columnPeakCalcium;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PeakCalciumErrorColumn {
                get {
                    return this.columnPeakCalciumError;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeToPeakColumn {
                get {
                    return this.columnTimeToPeak;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeToSteadyStateColumn {
                get {
                    return this.columnTimeToSteadyState;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PipetteResistanceColumn {
                get {
                    return this.columnPipetteResistance;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SealResistanceColumn {
                get {
                    return this.columnSealResistance;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CellCapacitanceColumn {
                get {
                    return this.columnCellCapacitance;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MembraneResistanceColumn {
                get {
                    return this.columnMembraneResistance;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SeriesResistanceColumn {
                get {
                    return this.columnSeriesResistance;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HoldingPotentialColumn {
                get {
                    return this.columnHoldingPotential;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PipetteSolutionColumn {
                get {
                    return this.columnPipetteSolution;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BathSolutionColumn {
                get {
                    return this.columnBathSolution;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HighBathSolutionColumn {
                get {
                    return this.columnHighBathSolution;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LowBathSolutionColumn {
                get {
                    return this.columnLowBathSolution;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RoughAppearanceRatingColumn {
                get {
                    return this.columnRoughAppearanceRating;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LengthAppearanceRatingColumn {
                get {
                    return this.columnLengthAppearanceRating;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ShapeAppearanceRatingColumn {
                get {
                    return this.columnShapeAppearanceRating;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BreakInTimeColumn {
                get {
                    return this.columnBreakInTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeSinceBreakInColumn {
                get {
                    return this.columnTimeSinceBreakIn;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HighMeasurementDelayColumn {
                get {
                    return this.columnHighMeasurementDelay;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LowMeasurementDelayColumn {
                get {
                    return this.columnLowMeasurementDelay;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SteadyStateCalciumExperimentsRow this[int index] {
                get {
                    return ((SteadyStateCalciumExperimentsRow)(this.Rows[index]));
                }
            }
            
            public event SteadyStateCalciumExperimentsRowChangeEventHandler SteadyStateCalciumExperimentsRowChanging;
            
            public event SteadyStateCalciumExperimentsRowChangeEventHandler SteadyStateCalciumExperimentsRowChanged;
            
            public event SteadyStateCalciumExperimentsRowChangeEventHandler SteadyStateCalciumExperimentsRowDeleting;
            
            public event SteadyStateCalciumExperimentsRowChangeEventHandler SteadyStateCalciumExperimentsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSteadyStateCalciumExperimentsRow(SteadyStateCalciumExperimentsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SteadyStateCalciumExperimentsRow AddSteadyStateCalciumExperimentsRow(
                        int CellID, 
                        System.DateTime Analyzed, 
                        System.DateTime Recorded, 
                        string Experimenter, 
                        string Genotype, 
                        float CalciumConcentration, 
                        bool IsDarkAdapted, 
                        long SignalRecordingID, 
                        long HighRecordingID, 
                        long LowRecordingID, 
                        long ProcessedSignalRecordingID, 
                        double SignalInitialFluorescence, 
                        double SignalPeakFluorescence, 
                        double SignalAverageFluorescence, 
                        double SignalFluorescenceError, 
                        double HighAverageFluorescence, 
                        double HighFluorescenceError, 
                        double LowAverageFluorescence, 
                        double LowFluorescenceError, 
                        double FluorescenceFoldIncrease, 
                        double FluorescenceDynamicRange, 
                        double SteadyStateCalcium, 
                        double SteadyStateCalciumError, 
                        double InitialCalcium, 
                        double InitialCalciumError, 
                        double PeakCalcium, 
                        double PeakCalciumError, 
                        float TimeToPeak, 
                        float TimeToSteadyState, 
                        string Comments, 
                        float PipetteResistance, 
                        float SealResistance, 
                        float CellCapacitance, 
                        float MembraneResistance, 
                        float SeriesResistance, 
                        short HoldingPotential, 
                        string PipetteSolution, 
                        string BathSolution, 
                        string HighBathSolution, 
                        string LowBathSolution, 
                        ushort RoughAppearanceRating, 
                        ushort LengthAppearanceRating, 
                        ushort ShapeAppearanceRating, 
                        System.DateTime BreakInTime, 
                        System.TimeSpan TimeSinceBreakIn, 
                        System.TimeSpan HighMeasurementDelay, 
                        System.TimeSpan LowMeasurementDelay) {
                SteadyStateCalciumExperimentsRow rowSteadyStateCalciumExperimentsRow = ((SteadyStateCalciumExperimentsRow)(this.NewRow()));
                rowSteadyStateCalciumExperimentsRow.ItemArray = new object[] {
                        CellID,
                        Analyzed,
                        Recorded,
                        Experimenter,
                        Genotype,
                        CalciumConcentration,
                        IsDarkAdapted,
                        SignalRecordingID,
                        HighRecordingID,
                        LowRecordingID,
                        ProcessedSignalRecordingID,
                        SignalInitialFluorescence,
                        SignalPeakFluorescence,
                        SignalAverageFluorescence,
                        SignalFluorescenceError,
                        HighAverageFluorescence,
                        HighFluorescenceError,
                        LowAverageFluorescence,
                        LowFluorescenceError,
                        FluorescenceFoldIncrease,
                        FluorescenceDynamicRange,
                        SteadyStateCalcium,
                        SteadyStateCalciumError,
                        InitialCalcium,
                        InitialCalciumError,
                        PeakCalcium,
                        PeakCalciumError,
                        TimeToPeak,
                        TimeToSteadyState,
                        Comments,
                        PipetteResistance,
                        SealResistance,
                        CellCapacitance,
                        MembraneResistance,
                        SeriesResistance,
                        HoldingPotential,
                        PipetteSolution,
                        BathSolution,
                        HighBathSolution,
                        LowBathSolution,
                        RoughAppearanceRating,
                        LengthAppearanceRating,
                        ShapeAppearanceRating,
                        BreakInTime,
                        TimeSinceBreakIn,
                        HighMeasurementDelay,
                        LowMeasurementDelay};
                this.Rows.Add(rowSteadyStateCalciumExperimentsRow);
                return rowSteadyStateCalciumExperimentsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SteadyStateCalciumExperimentsRow FindByCellID(int CellID) {
                return ((SteadyStateCalciumExperimentsRow)(this.Rows.Find(new object[] {
                            CellID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SteadyStateCalciumExperimentsDataTable cln = ((SteadyStateCalciumExperimentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SteadyStateCalciumExperimentsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCellID = base.Columns["CellID"];
                this.columnAnalyzed = base.Columns["Analyzed"];
                this.columnRecorded = base.Columns["Recorded"];
                this.columnExperimenter = base.Columns["Experimenter"];
                this.columnGenotype = base.Columns["Genotype"];
                this.columnCalciumConcentration = base.Columns["CalciumConcentration"];
                this.columnIsDarkAdapted = base.Columns["IsDarkAdapted"];
                this.columnSignalRecordingID = base.Columns["SignalRecordingID"];
                this.columnHighRecordingID = base.Columns["HighRecordingID"];
                this.columnLowRecordingID = base.Columns["LowRecordingID"];
                this.columnProcessedSignalRecordingID = base.Columns["ProcessedSignalRecordingID"];
                this.columnSignalInitialFluorescence = base.Columns["SignalInitialFluorescence"];
                this.columnSignalPeakFluorescence = base.Columns["SignalPeakFluorescence"];
                this.columnSignalAverageFluorescence = base.Columns["SignalAverageFluorescence"];
                this.columnSignalFluorescenceError = base.Columns["SignalFluorescenceError"];
                this.columnHighAverageFluorescence = base.Columns["HighAverageFluorescence"];
                this.columnHighFluorescenceError = base.Columns["HighFluorescenceError"];
                this.columnLowAverageFluorescence = base.Columns["LowAverageFluorescence"];
                this.columnLowFluorescenceError = base.Columns["LowFluorescenceError"];
                this.columnFluorescenceFoldIncrease = base.Columns["FluorescenceFoldIncrease"];
                this.columnFluorescenceDynamicRange = base.Columns["FluorescenceDynamicRange"];
                this.columnSteadyStateCalcium = base.Columns["SteadyStateCalcium"];
                this.columnSteadyStateCalciumError = base.Columns["SteadyStateCalciumError"];
                this.columnInitialCalcium = base.Columns["InitialCalcium"];
                this.columnInitialCalciumError = base.Columns["InitialCalciumError"];
                this.columnPeakCalcium = base.Columns["PeakCalcium"];
                this.columnPeakCalciumError = base.Columns["PeakCalciumError"];
                this.columnTimeToPeak = base.Columns["TimeToPeak"];
                this.columnTimeToSteadyState = base.Columns["TimeToSteadyState"];
                this.columnComments = base.Columns["Comments"];
                this.columnPipetteResistance = base.Columns["PipetteResistance"];
                this.columnSealResistance = base.Columns["SealResistance"];
                this.columnCellCapacitance = base.Columns["CellCapacitance"];
                this.columnMembraneResistance = base.Columns["MembraneResistance"];
                this.columnSeriesResistance = base.Columns["SeriesResistance"];
                this.columnHoldingPotential = base.Columns["HoldingPotential"];
                this.columnPipetteSolution = base.Columns["PipetteSolution"];
                this.columnBathSolution = base.Columns["BathSolution"];
                this.columnHighBathSolution = base.Columns["HighBathSolution"];
                this.columnLowBathSolution = base.Columns["LowBathSolution"];
                this.columnRoughAppearanceRating = base.Columns["RoughAppearanceRating"];
                this.columnLengthAppearanceRating = base.Columns["LengthAppearanceRating"];
                this.columnShapeAppearanceRating = base.Columns["ShapeAppearanceRating"];
                this.columnBreakInTime = base.Columns["BreakInTime"];
                this.columnTimeSinceBreakIn = base.Columns["TimeSinceBreakIn"];
                this.columnHighMeasurementDelay = base.Columns["HighMeasurementDelay"];
                this.columnLowMeasurementDelay = base.Columns["LowMeasurementDelay"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCellID = new System.Data.DataColumn("CellID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCellID);
                this.columnAnalyzed = new System.Data.DataColumn("Analyzed", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAnalyzed);
                this.columnRecorded = new System.Data.DataColumn("Recorded", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecorded);
                this.columnExperimenter = new System.Data.DataColumn("Experimenter", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnExperimenter);
                this.columnGenotype = new System.Data.DataColumn("Genotype", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGenotype);
                this.columnCalciumConcentration = new System.Data.DataColumn("CalciumConcentration", typeof(float), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCalciumConcentration);
                this.columnIsDarkAdapted = new System.Data.DataColumn("IsDarkAdapted", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDarkAdapted);
                this.columnSignalRecordingID = new System.Data.DataColumn("SignalRecordingID", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSignalRecordingID);
                this.columnHighRecordingID = new System.Data.DataColumn("HighRecordingID", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHighRecordingID);
                this.columnLowRecordingID = new System.Data.DataColumn("LowRecordingID", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLowRecordingID);
                this.columnProcessedSignalRecordingID = new System.Data.DataColumn("ProcessedSignalRecordingID", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcessedSignalRecordingID);
                this.columnSignalInitialFluorescence = new System.Data.DataColumn("SignalInitialFluorescence", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSignalInitialFluorescence);
                this.columnSignalPeakFluorescence = new System.Data.DataColumn("SignalPeakFluorescence", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSignalPeakFluorescence);
                this.columnSignalAverageFluorescence = new System.Data.DataColumn("SignalAverageFluorescence", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSignalAverageFluorescence);
                this.columnSignalFluorescenceError = new System.Data.DataColumn("SignalFluorescenceError", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSignalFluorescenceError);
                this.columnHighAverageFluorescence = new System.Data.DataColumn("HighAverageFluorescence", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHighAverageFluorescence);
                this.columnHighFluorescenceError = new System.Data.DataColumn("HighFluorescenceError", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHighFluorescenceError);
                this.columnLowAverageFluorescence = new System.Data.DataColumn("LowAverageFluorescence", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLowAverageFluorescence);
                this.columnLowFluorescenceError = new System.Data.DataColumn("LowFluorescenceError", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLowFluorescenceError);
                this.columnFluorescenceFoldIncrease = new System.Data.DataColumn("FluorescenceFoldIncrease", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFluorescenceFoldIncrease);
                this.columnFluorescenceDynamicRange = new System.Data.DataColumn("FluorescenceDynamicRange", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFluorescenceDynamicRange);
                this.columnSteadyStateCalcium = new System.Data.DataColumn("SteadyStateCalcium", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSteadyStateCalcium);
                this.columnSteadyStateCalciumError = new System.Data.DataColumn("SteadyStateCalciumError", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSteadyStateCalciumError);
                this.columnInitialCalcium = new System.Data.DataColumn("InitialCalcium", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnInitialCalcium);
                this.columnInitialCalciumError = new System.Data.DataColumn("InitialCalciumError", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnInitialCalciumError);
                this.columnPeakCalcium = new System.Data.DataColumn("PeakCalcium", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeakCalcium);
                this.columnPeakCalciumError = new System.Data.DataColumn("PeakCalciumError", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeakCalciumError);
                this.columnTimeToPeak = new System.Data.DataColumn("TimeToPeak", typeof(float), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeToPeak);
                this.columnTimeToSteadyState = new System.Data.DataColumn("TimeToSteadyState", typeof(float), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeToSteadyState);
                this.columnComments = new System.Data.DataColumn("Comments", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnPipetteResistance = new System.Data.DataColumn("PipetteResistance", typeof(float), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipetteResistance);
                this.columnSealResistance = new System.Data.DataColumn("SealResistance", typeof(float), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSealResistance);
                this.columnCellCapacitance = new System.Data.DataColumn("CellCapacitance", typeof(float), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCellCapacitance);
                this.columnMembraneResistance = new System.Data.DataColumn("MembraneResistance", typeof(float), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMembraneResistance);
                this.columnSeriesResistance = new System.Data.DataColumn("SeriesResistance", typeof(float), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeriesResistance);
                this.columnHoldingPotential = new System.Data.DataColumn("HoldingPotential", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHoldingPotential);
                this.columnPipetteSolution = new System.Data.DataColumn("PipetteSolution", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipetteSolution);
                this.columnBathSolution = new System.Data.DataColumn("BathSolution", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBathSolution);
                this.columnHighBathSolution = new System.Data.DataColumn("HighBathSolution", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHighBathSolution);
                this.columnLowBathSolution = new System.Data.DataColumn("LowBathSolution", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLowBathSolution);
                this.columnRoughAppearanceRating = new System.Data.DataColumn("RoughAppearanceRating", typeof(ushort), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRoughAppearanceRating);
                this.columnLengthAppearanceRating = new System.Data.DataColumn("LengthAppearanceRating", typeof(ushort), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLengthAppearanceRating);
                this.columnShapeAppearanceRating = new System.Data.DataColumn("ShapeAppearanceRating", typeof(ushort), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnShapeAppearanceRating);
                this.columnBreakInTime = new System.Data.DataColumn("BreakInTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreakInTime);
                this.columnTimeSinceBreakIn = new System.Data.DataColumn("TimeSinceBreakIn", typeof(System.TimeSpan), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeSinceBreakIn);
                this.columnHighMeasurementDelay = new System.Data.DataColumn("HighMeasurementDelay", typeof(System.TimeSpan), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHighMeasurementDelay);
                this.columnLowMeasurementDelay = new System.Data.DataColumn("LowMeasurementDelay", typeof(System.TimeSpan), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLowMeasurementDelay);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCellID}, true));
                this.columnCellID.AllowDBNull = false;
                this.columnCellID.Unique = true;
                this.columnAnalyzed.AllowDBNull = false;
                this.columnRecorded.ReadOnly = true;
                this.columnExperimenter.ReadOnly = true;
                this.columnGenotype.ReadOnly = true;
                this.columnCalciumConcentration.AllowDBNull = false;
                this.columnCalciumConcentration.Caption = "Calcium Concentration (uM)";
                this.columnIsDarkAdapted.Caption = "Is Dark Adapted?";
                this.columnSignalRecordingID.AllowDBNull = false;
                this.columnHighRecordingID.AllowDBNull = false;
                this.columnSignalPeakFluorescence.Caption = "Signal Peak Fluorescence (V)";
                this.columnSignalAverageFluorescence.Caption = "Signal Average Fluorescence (V)";
                this.columnSignalFluorescenceError.Caption = "Signal Fluorescence Error (V)";
                this.columnHighAverageFluorescence.Caption = "High Average Fluorescence (V)";
                this.columnHighFluorescenceError.Caption = "High Fluorescence Error (V)";
                this.columnLowAverageFluorescence.Caption = "Low Average Fluorescence (V)";
                this.columnLowFluorescenceError.Caption = "Low Fluorescence Error (V)";
                this.columnFluorescenceFoldIncrease.ReadOnly = true;
                this.columnFluorescenceFoldIncrease.Caption = "Fluorescence Fold Increase";
                this.columnFluorescenceDynamicRange.ReadOnly = true;
                this.columnFluorescenceDynamicRange.Caption = "Fluorescence Dynamic Range (V)";
                this.columnSteadyStateCalcium.Caption = "Steady-State Calcium (uM)";
                this.columnSteadyStateCalciumError.Caption = "Steady-State Calcium Error (uM)";
                this.columnInitialCalcium.Caption = "Initial Calcium (uM)";
                this.columnInitialCalciumError.Caption = "Initial Calcium Error (uM)";
                this.columnPeakCalcium.Caption = "Peak Calcium (uM)";
                this.columnPeakCalciumError.Caption = "Peak Calcium Error (uM)";
                this.columnTimeToPeak.Caption = "Time To Peak (ms)";
                this.columnTimeToSteadyState.Caption = "Time To Steady-State (ms)";
                this.columnPipetteResistance.ReadOnly = true;
                this.columnPipetteResistance.Caption = "Pipette Resistance (MOhm)";
                this.columnSealResistance.ReadOnly = true;
                this.columnSealResistance.Caption = "Seal Resistance (GOhm)";
                this.columnCellCapacitance.ReadOnly = true;
                this.columnCellCapacitance.Caption = "Cell Capacitance (pF)";
                this.columnMembraneResistance.ReadOnly = true;
                this.columnMembraneResistance.Caption = "Membrane Resistance (MOhm)";
                this.columnSeriesResistance.ReadOnly = true;
                this.columnSeriesResistance.Caption = "Series Resistance (MOhm)";
                this.columnHoldingPotential.ReadOnly = true;
                this.columnHoldingPotential.Caption = "Holding Potential (mV)";
                this.columnPipetteSolution.ReadOnly = true;
                this.columnPipetteSolution.Caption = "Pipette Solution";
                this.columnBathSolution.ReadOnly = true;
                this.columnBathSolution.Caption = "Bath Solution";
                this.columnHighBathSolution.ReadOnly = true;
                this.columnHighBathSolution.Caption = "High Bath Solution";
                this.columnLowBathSolution.ReadOnly = true;
                this.columnLowBathSolution.Caption = "Low Bath Solution";
                this.columnRoughAppearanceRating.ReadOnly = true;
                this.columnRoughAppearanceRating.Caption = "Rough Appearance Rating (smooth->rough)";
                this.columnLengthAppearanceRating.ReadOnly = true;
                this.columnLengthAppearanceRating.Caption = "Length Appearance Rating (long->short)";
                this.columnShapeAppearanceRating.ReadOnly = true;
                this.columnShapeAppearanceRating.Caption = "Shape Appearance Rating (flat->bulging)";
                this.columnBreakInTime.ReadOnly = true;
                this.columnBreakInTime.Caption = "Break-In Time";
                this.columnTimeSinceBreakIn.ReadOnly = true;
                this.columnTimeSinceBreakIn.Caption = "Time Since Break-In";
                this.columnHighMeasurementDelay.ReadOnly = true;
                this.columnHighMeasurementDelay.Caption = "High Measurement Delay";
                this.columnLowMeasurementDelay.ReadOnly = true;
                this.columnLowMeasurementDelay.Caption = "Low Measurement Delay";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SteadyStateCalciumExperimentsRow NewSteadyStateCalciumExperimentsRow() {
                return ((SteadyStateCalciumExperimentsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SteadyStateCalciumExperimentsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SteadyStateCalciumExperimentsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.FluorescenceFoldIncreaseColumn.Expression = "HighAverageFluorescence/LowAverageFluorescence";
                this.FluorescenceDynamicRangeColumn.Expression = "HighAverageFluorescence-LowAverageFluorescence";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SteadyStateCalciumExperimentsRowChanged != null)) {
                    this.SteadyStateCalciumExperimentsRowChanged(this, new SteadyStateCalciumExperimentsRowChangeEvent(((SteadyStateCalciumExperimentsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SteadyStateCalciumExperimentsRowChanging != null)) {
                    this.SteadyStateCalciumExperimentsRowChanging(this, new SteadyStateCalciumExperimentsRowChangeEvent(((SteadyStateCalciumExperimentsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SteadyStateCalciumExperimentsRowDeleted != null)) {
                    this.SteadyStateCalciumExperimentsRowDeleted(this, new SteadyStateCalciumExperimentsRowChangeEvent(((SteadyStateCalciumExperimentsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SteadyStateCalciumExperimentsRowDeleting != null)) {
                    this.SteadyStateCalciumExperimentsRowDeleting(this, new SteadyStateCalciumExperimentsRowChangeEvent(((SteadyStateCalciumExperimentsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSteadyStateCalciumExperimentsRow(SteadyStateCalciumExperimentsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                SteadyStateCalciumDataSet ds = new SteadyStateCalciumDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SteadyStateCalciumExperimentsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SteadyStateCalciumExperimentsRow : System.Data.DataRow {
            
            private SteadyStateCalciumExperimentsDataTable tableSteadyStateCalciumExperiments;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SteadyStateCalciumExperimentsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSteadyStateCalciumExperiments = ((SteadyStateCalciumExperimentsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CellID {
                get {
                    return ((int)(this[this.tableSteadyStateCalciumExperiments.CellIDColumn]));
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.CellIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Analyzed {
                get {
                    return ((System.DateTime)(this[this.tableSteadyStateCalciumExperiments.AnalyzedColumn]));
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.AnalyzedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Recorded {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableSteadyStateCalciumExperiments.RecordedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Recorded\' in table \'SteadyStateCalciumExperiments\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.RecordedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Experimenter {
                get {
                    try {
                        return ((string)(this[this.tableSteadyStateCalciumExperiments.ExperimenterColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Experimenter\' in table \'SteadyStateCalciumExperiments\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.ExperimenterColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Genotype {
                get {
                    try {
                        return ((string)(this[this.tableSteadyStateCalciumExperiments.GenotypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Genotype\' in table \'SteadyStateCalciumExperiments\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.GenotypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float CalciumConcentration {
                get {
                    return ((float)(this[this.tableSteadyStateCalciumExperiments.CalciumConcentrationColumn]));
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.CalciumConcentrationColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDarkAdapted {
                get {
                    try {
                        return ((bool)(this[this.tableSteadyStateCalciumExperiments.IsDarkAdaptedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IsDarkAdapted\' in table \'SteadyStateCalciumExperiments\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.IsDarkAdaptedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long SignalRecordingID {
                get {
                    return ((long)(this[this.tableSteadyStateCalciumExperiments.SignalRecordingIDColumn]));
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.SignalRecordingIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long HighRecordingID {
                get {
                    return ((long)(this[this.tableSteadyStateCalciumExperiments.HighRecordingIDColumn]));
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.HighRecordingIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long LowRecordingID {
                get {
                    try {
                        return ((long)(this[this.tableSteadyStateCalciumExperiments.LowRecordingIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LowRecordingID\' in table \'SteadyStateCalciumExperiments\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.LowRecordingIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ProcessedSignalRecordingID {
                get {
                    try {
                        return ((long)(this[this.tableSteadyStateCalciumExperiments.ProcessedSignalRecordingIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProcessedSignalRecordingID\' in table \'SteadyStateCalciumExp" +
                                "eriments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.ProcessedSignalRecordingIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SignalInitialFluorescence {
                get {
                    try {
                        return ((double)(this[this.tableSteadyStateCalciumExperiments.SignalInitialFluorescenceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SignalInitialFluorescence\' in table \'SteadyStateCalciumExpe" +
                                "riments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.SignalInitialFluorescenceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SignalPeakFluorescence {
                get {
                    try {
                        return ((double)(this[this.tableSteadyStateCalciumExperiments.SignalPeakFluorescenceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SignalPeakFluorescence\' in table \'SteadyStateCalciumExperim" +
                                "ents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.SignalPeakFluorescenceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SignalAverageFluorescence {
                get {
                    try {
                        return ((double)(this[this.tableSteadyStateCalciumExperiments.SignalAverageFluorescenceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SignalAverageFluorescence\' in table \'SteadyStateCalciumExpe" +
                                "riments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.SignalAverageFluorescenceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SignalFluorescenceError {
                get {
                    try {
                        return ((double)(this[this.tableSteadyStateCalciumExperiments.SignalFluorescenceErrorColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SignalFluorescenceError\' in table \'SteadyStateCalciumExperi" +
                                "ments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.SignalFluorescenceErrorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double HighAverageFluorescence {
                get {
                    try {
                        return ((double)(this[this.tableSteadyStateCalciumExperiments.HighAverageFluorescenceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HighAverageFluorescence\' in table \'SteadyStateCalciumExperi" +
                                "ments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.HighAverageFluorescenceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double HighFluorescenceError {
                get {
                    try {
                        return ((double)(this[this.tableSteadyStateCalciumExperiments.HighFluorescenceErrorColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HighFluorescenceError\' in table \'SteadyStateCalciumExperime" +
                                "nts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.HighFluorescenceErrorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LowAverageFluorescence {
                get {
                    try {
                        return ((double)(this[this.tableSteadyStateCalciumExperiments.LowAverageFluorescenceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LowAverageFluorescence\' in table \'SteadyStateCalciumExperim" +
                                "ents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.LowAverageFluorescenceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LowFluorescenceError {
                get {
                    try {
                        return ((double)(this[this.tableSteadyStateCalciumExperiments.LowFluorescenceErrorColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LowFluorescenceError\' in table \'SteadyStateCalciumExperimen" +
                                "ts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.LowFluorescenceErrorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FluorescenceFoldIncrease {
                get {
                    try {
                        return ((double)(this[this.tableSteadyStateCalciumExperiments.FluorescenceFoldIncreaseColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FluorescenceFoldIncrease\' in table \'SteadyStateCalciumExper" +
                                "iments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.FluorescenceFoldIncreaseColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FluorescenceDynamicRange {
                get {
                    try {
                        return ((double)(this[this.tableSteadyStateCalciumExperiments.FluorescenceDynamicRangeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FluorescenceDynamicRange\' in table \'SteadyStateCalciumExper" +
                                "iments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.FluorescenceDynamicRangeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SteadyStateCalcium {
                get {
                    try {
                        return ((double)(this[this.tableSteadyStateCalciumExperiments.SteadyStateCalciumColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SteadyStateCalcium\' in table \'SteadyStateCalciumExperiments" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.SteadyStateCalciumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SteadyStateCalciumError {
                get {
                    try {
                        return ((double)(this[this.tableSteadyStateCalciumExperiments.SteadyStateCalciumErrorColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SteadyStateCalciumError\' in table \'SteadyStateCalciumExperi" +
                                "ments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.SteadyStateCalciumErrorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double InitialCalcium {
                get {
                    try {
                        return ((double)(this[this.tableSteadyStateCalciumExperiments.InitialCalciumColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'InitialCalcium\' in table \'SteadyStateCalciumExperiments\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.InitialCalciumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double InitialCalciumError {
                get {
                    try {
                        return ((double)(this[this.tableSteadyStateCalciumExperiments.InitialCalciumErrorColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'InitialCalciumError\' in table \'SteadyStateCalciumExperiment" +
                                "s\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.InitialCalciumErrorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PeakCalcium {
                get {
                    try {
                        return ((double)(this[this.tableSteadyStateCalciumExperiments.PeakCalciumColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PeakCalcium\' in table \'SteadyStateCalciumExperiments\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.PeakCalciumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PeakCalciumError {
                get {
                    try {
                        return ((double)(this[this.tableSteadyStateCalciumExperiments.PeakCalciumErrorColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PeakCalciumError\' in table \'SteadyStateCalciumExperiments\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.PeakCalciumErrorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float TimeToPeak {
                get {
                    try {
                        return ((float)(this[this.tableSteadyStateCalciumExperiments.TimeToPeakColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TimeToPeak\' in table \'SteadyStateCalciumExperiments\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.TimeToPeakColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float TimeToSteadyState {
                get {
                    try {
                        return ((float)(this[this.tableSteadyStateCalciumExperiments.TimeToSteadyStateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TimeToSteadyState\' in table \'SteadyStateCalciumExperiments\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.TimeToSteadyStateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableSteadyStateCalciumExperiments.CommentsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Comments\' in table \'SteadyStateCalciumExperiments\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.CommentsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float PipetteResistance {
                get {
                    try {
                        return ((float)(this[this.tableSteadyStateCalciumExperiments.PipetteResistanceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PipetteResistance\' in table \'SteadyStateCalciumExperiments\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.PipetteResistanceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float SealResistance {
                get {
                    try {
                        return ((float)(this[this.tableSteadyStateCalciumExperiments.SealResistanceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SealResistance\' in table \'SteadyStateCalciumExperiments\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.SealResistanceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float CellCapacitance {
                get {
                    try {
                        return ((float)(this[this.tableSteadyStateCalciumExperiments.CellCapacitanceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CellCapacitance\' in table \'SteadyStateCalciumExperiments\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.CellCapacitanceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float MembraneResistance {
                get {
                    try {
                        return ((float)(this[this.tableSteadyStateCalciumExperiments.MembraneResistanceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MembraneResistance\' in table \'SteadyStateCalciumExperiments" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.MembraneResistanceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float SeriesResistance {
                get {
                    try {
                        return ((float)(this[this.tableSteadyStateCalciumExperiments.SeriesResistanceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SeriesResistance\' in table \'SteadyStateCalciumExperiments\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.SeriesResistanceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short HoldingPotential {
                get {
                    try {
                        return ((short)(this[this.tableSteadyStateCalciumExperiments.HoldingPotentialColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HoldingPotential\' in table \'SteadyStateCalciumExperiments\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.HoldingPotentialColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PipetteSolution {
                get {
                    try {
                        return ((string)(this[this.tableSteadyStateCalciumExperiments.PipetteSolutionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PipetteSolution\' in table \'SteadyStateCalciumExperiments\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.PipetteSolutionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BathSolution {
                get {
                    try {
                        return ((string)(this[this.tableSteadyStateCalciumExperiments.BathSolutionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BathSolution\' in table \'SteadyStateCalciumExperiments\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.BathSolutionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HighBathSolution {
                get {
                    try {
                        return ((string)(this[this.tableSteadyStateCalciumExperiments.HighBathSolutionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HighBathSolution\' in table \'SteadyStateCalciumExperiments\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.HighBathSolutionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LowBathSolution {
                get {
                    try {
                        return ((string)(this[this.tableSteadyStateCalciumExperiments.LowBathSolutionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LowBathSolution\' in table \'SteadyStateCalciumExperiments\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.LowBathSolutionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort RoughAppearanceRating {
                get {
                    try {
                        return ((ushort)(this[this.tableSteadyStateCalciumExperiments.RoughAppearanceRatingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RoughAppearanceRating\' in table \'SteadyStateCalciumExperime" +
                                "nts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.RoughAppearanceRatingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort LengthAppearanceRating {
                get {
                    try {
                        return ((ushort)(this[this.tableSteadyStateCalciumExperiments.LengthAppearanceRatingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LengthAppearanceRating\' in table \'SteadyStateCalciumExperim" +
                                "ents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.LengthAppearanceRatingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort ShapeAppearanceRating {
                get {
                    try {
                        return ((ushort)(this[this.tableSteadyStateCalciumExperiments.ShapeAppearanceRatingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ShapeAppearanceRating\' in table \'SteadyStateCalciumExperime" +
                                "nts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.ShapeAppearanceRatingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime BreakInTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableSteadyStateCalciumExperiments.BreakInTimeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BreakInTime\' in table \'SteadyStateCalciumExperiments\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.BreakInTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.TimeSpan TimeSinceBreakIn {
                get {
                    try {
                        return ((System.TimeSpan)(this[this.tableSteadyStateCalciumExperiments.TimeSinceBreakInColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TimeSinceBreakIn\' in table \'SteadyStateCalciumExperiments\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.TimeSinceBreakInColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.TimeSpan HighMeasurementDelay {
                get {
                    try {
                        return ((System.TimeSpan)(this[this.tableSteadyStateCalciumExperiments.HighMeasurementDelayColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HighMeasurementDelay\' in table \'SteadyStateCalciumExperimen" +
                                "ts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.HighMeasurementDelayColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.TimeSpan LowMeasurementDelay {
                get {
                    try {
                        return ((System.TimeSpan)(this[this.tableSteadyStateCalciumExperiments.LowMeasurementDelayColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LowMeasurementDelay\' in table \'SteadyStateCalciumExperiment" +
                                "s\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSteadyStateCalciumExperiments.LowMeasurementDelayColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecordedNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.RecordedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecordedNull() {
                this[this.tableSteadyStateCalciumExperiments.RecordedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExperimenterNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.ExperimenterColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExperimenterNull() {
                this[this.tableSteadyStateCalciumExperiments.ExperimenterColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGenotypeNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.GenotypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGenotypeNull() {
                this[this.tableSteadyStateCalciumExperiments.GenotypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDarkAdaptedNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.IsDarkAdaptedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDarkAdaptedNull() {
                this[this.tableSteadyStateCalciumExperiments.IsDarkAdaptedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLowRecordingIDNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.LowRecordingIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLowRecordingIDNull() {
                this[this.tableSteadyStateCalciumExperiments.LowRecordingIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProcessedSignalRecordingIDNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.ProcessedSignalRecordingIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProcessedSignalRecordingIDNull() {
                this[this.tableSteadyStateCalciumExperiments.ProcessedSignalRecordingIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSignalInitialFluorescenceNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.SignalInitialFluorescenceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSignalInitialFluorescenceNull() {
                this[this.tableSteadyStateCalciumExperiments.SignalInitialFluorescenceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSignalPeakFluorescenceNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.SignalPeakFluorescenceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSignalPeakFluorescenceNull() {
                this[this.tableSteadyStateCalciumExperiments.SignalPeakFluorescenceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSignalAverageFluorescenceNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.SignalAverageFluorescenceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSignalAverageFluorescenceNull() {
                this[this.tableSteadyStateCalciumExperiments.SignalAverageFluorescenceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSignalFluorescenceErrorNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.SignalFluorescenceErrorColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSignalFluorescenceErrorNull() {
                this[this.tableSteadyStateCalciumExperiments.SignalFluorescenceErrorColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHighAverageFluorescenceNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.HighAverageFluorescenceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHighAverageFluorescenceNull() {
                this[this.tableSteadyStateCalciumExperiments.HighAverageFluorescenceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHighFluorescenceErrorNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.HighFluorescenceErrorColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHighFluorescenceErrorNull() {
                this[this.tableSteadyStateCalciumExperiments.HighFluorescenceErrorColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLowAverageFluorescenceNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.LowAverageFluorescenceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLowAverageFluorescenceNull() {
                this[this.tableSteadyStateCalciumExperiments.LowAverageFluorescenceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLowFluorescenceErrorNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.LowFluorescenceErrorColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLowFluorescenceErrorNull() {
                this[this.tableSteadyStateCalciumExperiments.LowFluorescenceErrorColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFluorescenceFoldIncreaseNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.FluorescenceFoldIncreaseColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFluorescenceFoldIncreaseNull() {
                this[this.tableSteadyStateCalciumExperiments.FluorescenceFoldIncreaseColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFluorescenceDynamicRangeNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.FluorescenceDynamicRangeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFluorescenceDynamicRangeNull() {
                this[this.tableSteadyStateCalciumExperiments.FluorescenceDynamicRangeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSteadyStateCalciumNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.SteadyStateCalciumColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSteadyStateCalciumNull() {
                this[this.tableSteadyStateCalciumExperiments.SteadyStateCalciumColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSteadyStateCalciumErrorNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.SteadyStateCalciumErrorColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSteadyStateCalciumErrorNull() {
                this[this.tableSteadyStateCalciumExperiments.SteadyStateCalciumErrorColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInitialCalciumNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.InitialCalciumColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInitialCalciumNull() {
                this[this.tableSteadyStateCalciumExperiments.InitialCalciumColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInitialCalciumErrorNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.InitialCalciumErrorColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInitialCalciumErrorNull() {
                this[this.tableSteadyStateCalciumExperiments.InitialCalciumErrorColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPeakCalciumNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.PeakCalciumColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPeakCalciumNull() {
                this[this.tableSteadyStateCalciumExperiments.PeakCalciumColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPeakCalciumErrorNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.PeakCalciumErrorColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPeakCalciumErrorNull() {
                this[this.tableSteadyStateCalciumExperiments.PeakCalciumErrorColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeToPeakNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.TimeToPeakColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeToPeakNull() {
                this[this.tableSteadyStateCalciumExperiments.TimeToPeakColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeToSteadyStateNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.TimeToSteadyStateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeToSteadyStateNull() {
                this[this.tableSteadyStateCalciumExperiments.TimeToSteadyStateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.CommentsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tableSteadyStateCalciumExperiments.CommentsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipetteResistanceNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.PipetteResistanceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipetteResistanceNull() {
                this[this.tableSteadyStateCalciumExperiments.PipetteResistanceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSealResistanceNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.SealResistanceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSealResistanceNull() {
                this[this.tableSteadyStateCalciumExperiments.SealResistanceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCellCapacitanceNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.CellCapacitanceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCellCapacitanceNull() {
                this[this.tableSteadyStateCalciumExperiments.CellCapacitanceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMembraneResistanceNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.MembraneResistanceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMembraneResistanceNull() {
                this[this.tableSteadyStateCalciumExperiments.MembraneResistanceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeriesResistanceNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.SeriesResistanceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeriesResistanceNull() {
                this[this.tableSteadyStateCalciumExperiments.SeriesResistanceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHoldingPotentialNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.HoldingPotentialColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHoldingPotentialNull() {
                this[this.tableSteadyStateCalciumExperiments.HoldingPotentialColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipetteSolutionNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.PipetteSolutionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipetteSolutionNull() {
                this[this.tableSteadyStateCalciumExperiments.PipetteSolutionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBathSolutionNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.BathSolutionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBathSolutionNull() {
                this[this.tableSteadyStateCalciumExperiments.BathSolutionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHighBathSolutionNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.HighBathSolutionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHighBathSolutionNull() {
                this[this.tableSteadyStateCalciumExperiments.HighBathSolutionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLowBathSolutionNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.LowBathSolutionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLowBathSolutionNull() {
                this[this.tableSteadyStateCalciumExperiments.LowBathSolutionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRoughAppearanceRatingNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.RoughAppearanceRatingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRoughAppearanceRatingNull() {
                this[this.tableSteadyStateCalciumExperiments.RoughAppearanceRatingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLengthAppearanceRatingNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.LengthAppearanceRatingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLengthAppearanceRatingNull() {
                this[this.tableSteadyStateCalciumExperiments.LengthAppearanceRatingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShapeAppearanceRatingNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.ShapeAppearanceRatingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShapeAppearanceRatingNull() {
                this[this.tableSteadyStateCalciumExperiments.ShapeAppearanceRatingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreakInTimeNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.BreakInTimeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreakInTimeNull() {
                this[this.tableSteadyStateCalciumExperiments.BreakInTimeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeSinceBreakInNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.TimeSinceBreakInColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeSinceBreakInNull() {
                this[this.tableSteadyStateCalciumExperiments.TimeSinceBreakInColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHighMeasurementDelayNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.HighMeasurementDelayColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHighMeasurementDelayNull() {
                this[this.tableSteadyStateCalciumExperiments.HighMeasurementDelayColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLowMeasurementDelayNull() {
                return this.IsNull(this.tableSteadyStateCalciumExperiments.LowMeasurementDelayColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLowMeasurementDelayNull() {
                this[this.tableSteadyStateCalciumExperiments.LowMeasurementDelayColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SteadyStateCalciumExperimentsRowChangeEvent : System.EventArgs {
            
            private SteadyStateCalciumExperimentsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SteadyStateCalciumExperimentsRowChangeEvent(SteadyStateCalciumExperimentsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SteadyStateCalciumExperimentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591